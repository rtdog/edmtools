//   Copyright 2015 Keith Wannamaker
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto2";

package edmtools;

option java_package = "edmtools";
option java_outer_classname = "Proto";

// Primary message for information contained in the text headers.
message Metadata {
  optional string registration = 1;
  // Configured alarm thresholds for sensor data.
  optional AlarmThresholds alarm_thresholds = 2;
  optional Fuel fuel = 3;
  // Unix timestamp of download time.  JPI does not preserve zone.
  optional int64 download_timestamp = 4;
  optional int32 protocol_version = 5;
  optional Features features = 6;
  repeated FlightMetadata flight_metadata = 7;

  // Length of the metadata in the original JPI file, in bytes.
  optional int32 length = 8;

  // Non-fatal parse warnings.
  repeated string parse_warning = 9;
}

// Configured alarm thresholds.
message AlarmThresholds {
  optional double min_volts = 1;
  optional double max_volts = 2;
  optional int32 max_exhaust_gas_temperature_difference = 3;
  optional int32 max_cylinder_head_temperature = 4;
  // In degrees per minute.
  optional int32 max_cylinder_head_temperature_cooling_rate = 5;
  optional int32 max_exhaust_gas_temperature = 6;
  optional int32 min_oil_temperature = 7; 
  optional int32 max_oil_temperature = 8;
}

message Fuel {
  enum FuelFlowUnits {
    GPH = 1;
    PPH = 2;
    LPH = 3;
    KPH = 4;
  }
  optional FuelFlowUnits fuel_flow_units = 1;
  optional int32 full_quantity = 2;
  // TODO: should this bein alarm thresholds?
  optional int32 warning_quantity = 3;
  optional int32 k_factor1 = 4;
  optional int32 k_factor2 = 5;
}

message Features {
  optional int32 model_number = 1;  // eg 700, 760, 800
  optional int32 firmware_version = 2;  // N.NN * 100
  optional Sensors sensors = 3;
  enum TemperatureUnit {
    FAHRENHEIT = 1;
    CELSIUS = 2;
  }
  optional TemperatureUnit engine_temperature_unit = 4;
  optional int32 beta_number = 5;
  optional int32 build_number = 6;
}

message Sensors {
  optional int32 num_exhaust_gas_temperature = 3;
  optional int32 num_cylinder_head_temperature = 4;
  optional bool voltage = 5;
  optional bool oil_temperature = 6;
  optional bool turbine_inlet_temperature1 = 7;  // TIT1
  optional bool turbine_inlet_temperature2 = 8;  // TIT2
  optional bool outside_air_temperature = 9;  // OAT
  optional bool fuel_flow = 10;
  optional bool induction_air_temperature = 11;  // IAT
  optional bool compressor_discharge_temperature = 12;  // CDT
  optional bool manifold_pressure = 13;  // MAP
  optional bool rpm = 14; 
}

message FlightMetadata {
  optional int32 flight_number = 1;
  // The data records are not padded to word boundaries.  Consequently,
  // the record may be one byte less in length than this field indicates.
  optional int32 flight_data_length_words = 2;
}

// Primary message for each flight in the binary data.
message Flight {
  optional int32 flight_number = 1;
  // Unix timestamp of flight.
  optional int64 start_timestamp = 2;
  optional int32 recording_interval_secs = 3;
  optional Sensors sensors = 4;

  // The beginning DataRecord represents the sensor state at
  // start_timestamp; each subsequent record represents the
  // sensor state recording_interval_secs later (except see Mark).
  repeated DataRecord data = 5;

  // Length of the flight header, in bytes, in the original JPI file.
  optional int32 header_length = 6;

  // Length of data record data, in bytes, in the original JPI file.
  // This does not include header_length.
  // (header_length + data_length) / 2 = FlightMetadata.flight_data_length_words.
  // Note: this is the actual length in bytes (records are not padded to 
  // word boundaries). 
  optional int32 data_length = 7;

  // Non-fatal parse warnings.
  repeated string parse_warning = 8;
}

message DataRecord {
  repeated float voltage = 1;
  repeated int32 amperage = 2;
  optional int32 outside_air_temperature = 3;

  // Note: during lean- or rich-finding, the interval of records
  // is one second, not recording_interval_secs.
  enum Mark {
    NOT_MARKED = 0;
    MARKED = 1;
    RICH_START = 2;
    RICH_END = 3;
    LEAN_START = 4;
    LEAN_END = 5;
  }
  optional Mark mark = 4;

  // First record is left engine.
  repeated EngineDataRecord engine = 5;

  // Non-fatal parse warnings.
  repeated string parse_warning = 6;
}

message EngineDataRecord {
  repeated int32 exhaust_gas_temperature = 1;
  optional int32 max_exhaust_gas_temperature_difference = 2;
  repeated int32 turbine_inlet_temperature = 3;
  repeated int32 cylinder_head_temperature = 4;
  // Degrees per minute.
  optional int32 cylinder_head_temperature_cooling_rate = 5;
  optional int32 oil_temperature = 6;
  optional int32 compressor_discharge_temperature = 7;
  optional int32 induction_air_temperature = 8;
  optional int32 interstage_turbine_temperature = 9;

  repeated float fuel_used = 10;
  repeated float fuel_flow = 11;
  optional float fuel_pressure = 12;
  // TODO: unsure - verify this is really fuel level.
  repeated float fuel_level = 13;

  optional int32 oil_pressure = 14;
  optional float manifold_pressure = 15;
  repeated int32 hydraulic_pressure = 16;

  optional int32 horsepower = 17;
  optional int32 rpm = 18;
  optional int32 torque = 19;

  optional float hours = 20;
}

// Container message when converting a JPI file to proto format.
message JpiFile {
  optional Metadata metadata = 1;
  repeated Flight flight = 2; 
}
