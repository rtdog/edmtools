// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/edm.proto

package edmtools;

public final class Proto {
  private Proto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface MetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edmtools.Metadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string registration = 1;</code>
     */
    boolean hasRegistration();
    /**
     * <code>optional string registration = 1;</code>
     */
    java.lang.String getRegistration();
    /**
     * <code>optional string registration = 1;</code>
     */
    com.google.protobuf.ByteString
        getRegistrationBytes();

    /**
     * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
     *
     * <pre>
     * Configured alarm thresholds for sensor data.
     * </pre>
     */
    boolean hasAlarmThresholds();
    /**
     * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
     *
     * <pre>
     * Configured alarm thresholds for sensor data.
     * </pre>
     */
    edmtools.Proto.AlarmThresholds getAlarmThresholds();
    /**
     * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
     *
     * <pre>
     * Configured alarm thresholds for sensor data.
     * </pre>
     */
    edmtools.Proto.AlarmThresholdsOrBuilder getAlarmThresholdsOrBuilder();

    /**
     * <code>optional .edmtools.Fuel fuel = 3;</code>
     */
    boolean hasFuel();
    /**
     * <code>optional .edmtools.Fuel fuel = 3;</code>
     */
    edmtools.Proto.Fuel getFuel();
    /**
     * <code>optional .edmtools.Fuel fuel = 3;</code>
     */
    edmtools.Proto.FuelOrBuilder getFuelOrBuilder();

    /**
     * <code>optional int64 download_timestamp = 4;</code>
     *
     * <pre>
     * Unix timestamp of download time.  JPI does not preserve zone.
     * </pre>
     */
    boolean hasDownloadTimestamp();
    /**
     * <code>optional int64 download_timestamp = 4;</code>
     *
     * <pre>
     * Unix timestamp of download time.  JPI does not preserve zone.
     * </pre>
     */
    long getDownloadTimestamp();

    /**
     * <code>optional int32 protocol_version = 5;</code>
     */
    boolean hasProtocolVersion();
    /**
     * <code>optional int32 protocol_version = 5;</code>
     */
    int getProtocolVersion();

    /**
     * <code>optional .edmtools.Features features = 6;</code>
     */
    boolean hasFeatures();
    /**
     * <code>optional .edmtools.Features features = 6;</code>
     */
    edmtools.Proto.Features getFeatures();
    /**
     * <code>optional .edmtools.Features features = 6;</code>
     */
    edmtools.Proto.FeaturesOrBuilder getFeaturesOrBuilder();

    /**
     * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
     */
    java.util.List<edmtools.Proto.FlightMetadata> 
        getFlightMetadataList();
    /**
     * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
     */
    edmtools.Proto.FlightMetadata getFlightMetadata(int index);
    /**
     * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
     */
    int getFlightMetadataCount();
    /**
     * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
     */
    java.util.List<? extends edmtools.Proto.FlightMetadataOrBuilder> 
        getFlightMetadataOrBuilderList();
    /**
     * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
     */
    edmtools.Proto.FlightMetadataOrBuilder getFlightMetadataOrBuilder(
        int index);

    /**
     * <code>optional int32 length = 8;</code>
     *
     * <pre>
     * Length of the metadata in the original JPI file, in bytes.
     * </pre>
     */
    boolean hasLength();
    /**
     * <code>optional int32 length = 8;</code>
     *
     * <pre>
     * Length of the metadata in the original JPI file, in bytes.
     * </pre>
     */
    int getLength();

    /**
     * <code>repeated string parse_warning = 9;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getParseWarningList();
    /**
     * <code>repeated string parse_warning = 9;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    int getParseWarningCount();
    /**
     * <code>repeated string parse_warning = 9;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    java.lang.String getParseWarning(int index);
    /**
     * <code>repeated string parse_warning = 9;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    com.google.protobuf.ByteString
        getParseWarningBytes(int index);
  }
  /**
   * Protobuf type {@code edmtools.Metadata}
   *
   * <pre>
   * Primary message for information contained in the text headers.
   * </pre>
   */
  public static final class Metadata extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:edmtools.Metadata)
      MetadataOrBuilder {
    // Use Metadata.newBuilder() to construct.
    private Metadata(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Metadata(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Metadata defaultInstance;
    public static Metadata getDefaultInstance() {
      return defaultInstance;
    }

    public Metadata getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Metadata(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              registration_ = bs;
              break;
            }
            case 18: {
              edmtools.Proto.AlarmThresholds.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = alarmThresholds_.toBuilder();
              }
              alarmThresholds_ = input.readMessage(edmtools.Proto.AlarmThresholds.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(alarmThresholds_);
                alarmThresholds_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              edmtools.Proto.Fuel.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = fuel_.toBuilder();
              }
              fuel_ = input.readMessage(edmtools.Proto.Fuel.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fuel_);
                fuel_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              downloadTimestamp_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              protocolVersion_ = input.readInt32();
              break;
            }
            case 50: {
              edmtools.Proto.Features.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = features_.toBuilder();
              }
              features_ = input.readMessage(edmtools.Proto.Features.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(features_);
                features_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                flightMetadata_ = new java.util.ArrayList<edmtools.Proto.FlightMetadata>();
                mutable_bitField0_ |= 0x00000040;
              }
              flightMetadata_.add(input.readMessage(edmtools.Proto.FlightMetadata.PARSER, extensionRegistry));
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              length_ = input.readInt32();
              break;
            }
            case 74: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                parseWarning_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000100;
              }
              parseWarning_.add(bs);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          flightMetadata_ = java.util.Collections.unmodifiableList(flightMetadata_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          parseWarning_ = parseWarning_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edmtools.Proto.internal_static_edmtools_Metadata_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edmtools.Proto.internal_static_edmtools_Metadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edmtools.Proto.Metadata.class, edmtools.Proto.Metadata.Builder.class);
    }

    public static com.google.protobuf.Parser<Metadata> PARSER =
        new com.google.protobuf.AbstractParser<Metadata>() {
      public Metadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Metadata(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Metadata> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int REGISTRATION_FIELD_NUMBER = 1;
    private java.lang.Object registration_;
    /**
     * <code>optional string registration = 1;</code>
     */
    public boolean hasRegistration() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string registration = 1;</code>
     */
    public java.lang.String getRegistration() {
      java.lang.Object ref = registration_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          registration_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string registration = 1;</code>
     */
    public com.google.protobuf.ByteString
        getRegistrationBytes() {
      java.lang.Object ref = registration_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        registration_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ALARM_THRESHOLDS_FIELD_NUMBER = 2;
    private edmtools.Proto.AlarmThresholds alarmThresholds_;
    /**
     * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
     *
     * <pre>
     * Configured alarm thresholds for sensor data.
     * </pre>
     */
    public boolean hasAlarmThresholds() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
     *
     * <pre>
     * Configured alarm thresholds for sensor data.
     * </pre>
     */
    public edmtools.Proto.AlarmThresholds getAlarmThresholds() {
      return alarmThresholds_;
    }
    /**
     * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
     *
     * <pre>
     * Configured alarm thresholds for sensor data.
     * </pre>
     */
    public edmtools.Proto.AlarmThresholdsOrBuilder getAlarmThresholdsOrBuilder() {
      return alarmThresholds_;
    }

    public static final int FUEL_FIELD_NUMBER = 3;
    private edmtools.Proto.Fuel fuel_;
    /**
     * <code>optional .edmtools.Fuel fuel = 3;</code>
     */
    public boolean hasFuel() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .edmtools.Fuel fuel = 3;</code>
     */
    public edmtools.Proto.Fuel getFuel() {
      return fuel_;
    }
    /**
     * <code>optional .edmtools.Fuel fuel = 3;</code>
     */
    public edmtools.Proto.FuelOrBuilder getFuelOrBuilder() {
      return fuel_;
    }

    public static final int DOWNLOAD_TIMESTAMP_FIELD_NUMBER = 4;
    private long downloadTimestamp_;
    /**
     * <code>optional int64 download_timestamp = 4;</code>
     *
     * <pre>
     * Unix timestamp of download time.  JPI does not preserve zone.
     * </pre>
     */
    public boolean hasDownloadTimestamp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 download_timestamp = 4;</code>
     *
     * <pre>
     * Unix timestamp of download time.  JPI does not preserve zone.
     * </pre>
     */
    public long getDownloadTimestamp() {
      return downloadTimestamp_;
    }

    public static final int PROTOCOL_VERSION_FIELD_NUMBER = 5;
    private int protocolVersion_;
    /**
     * <code>optional int32 protocol_version = 5;</code>
     */
    public boolean hasProtocolVersion() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 protocol_version = 5;</code>
     */
    public int getProtocolVersion() {
      return protocolVersion_;
    }

    public static final int FEATURES_FIELD_NUMBER = 6;
    private edmtools.Proto.Features features_;
    /**
     * <code>optional .edmtools.Features features = 6;</code>
     */
    public boolean hasFeatures() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .edmtools.Features features = 6;</code>
     */
    public edmtools.Proto.Features getFeatures() {
      return features_;
    }
    /**
     * <code>optional .edmtools.Features features = 6;</code>
     */
    public edmtools.Proto.FeaturesOrBuilder getFeaturesOrBuilder() {
      return features_;
    }

    public static final int FLIGHT_METADATA_FIELD_NUMBER = 7;
    private java.util.List<edmtools.Proto.FlightMetadata> flightMetadata_;
    /**
     * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
     */
    public java.util.List<edmtools.Proto.FlightMetadata> getFlightMetadataList() {
      return flightMetadata_;
    }
    /**
     * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
     */
    public java.util.List<? extends edmtools.Proto.FlightMetadataOrBuilder> 
        getFlightMetadataOrBuilderList() {
      return flightMetadata_;
    }
    /**
     * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
     */
    public int getFlightMetadataCount() {
      return flightMetadata_.size();
    }
    /**
     * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
     */
    public edmtools.Proto.FlightMetadata getFlightMetadata(int index) {
      return flightMetadata_.get(index);
    }
    /**
     * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
     */
    public edmtools.Proto.FlightMetadataOrBuilder getFlightMetadataOrBuilder(
        int index) {
      return flightMetadata_.get(index);
    }

    public static final int LENGTH_FIELD_NUMBER = 8;
    private int length_;
    /**
     * <code>optional int32 length = 8;</code>
     *
     * <pre>
     * Length of the metadata in the original JPI file, in bytes.
     * </pre>
     */
    public boolean hasLength() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 length = 8;</code>
     *
     * <pre>
     * Length of the metadata in the original JPI file, in bytes.
     * </pre>
     */
    public int getLength() {
      return length_;
    }

    public static final int PARSE_WARNING_FIELD_NUMBER = 9;
    private com.google.protobuf.LazyStringList parseWarning_;
    /**
     * <code>repeated string parse_warning = 9;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getParseWarningList() {
      return parseWarning_;
    }
    /**
     * <code>repeated string parse_warning = 9;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public int getParseWarningCount() {
      return parseWarning_.size();
    }
    /**
     * <code>repeated string parse_warning = 9;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public java.lang.String getParseWarning(int index) {
      return parseWarning_.get(index);
    }
    /**
     * <code>repeated string parse_warning = 9;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getParseWarningBytes(int index) {
      return parseWarning_.getByteString(index);
    }

    private void initFields() {
      registration_ = "";
      alarmThresholds_ = edmtools.Proto.AlarmThresholds.getDefaultInstance();
      fuel_ = edmtools.Proto.Fuel.getDefaultInstance();
      downloadTimestamp_ = 0L;
      protocolVersion_ = 0;
      features_ = edmtools.Proto.Features.getDefaultInstance();
      flightMetadata_ = java.util.Collections.emptyList();
      length_ = 0;
      parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getRegistrationBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, alarmThresholds_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, fuel_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, downloadTimestamp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, protocolVersion_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, features_);
      }
      for (int i = 0; i < flightMetadata_.size(); i++) {
        output.writeMessage(7, flightMetadata_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(8, length_);
      }
      for (int i = 0; i < parseWarning_.size(); i++) {
        output.writeBytes(9, parseWarning_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getRegistrationBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, alarmThresholds_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, fuel_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, downloadTimestamp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, protocolVersion_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, features_);
      }
      for (int i = 0; i < flightMetadata_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, flightMetadata_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, length_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < parseWarning_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(parseWarning_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getParseWarningList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edmtools.Proto.Metadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.Metadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.Metadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.Metadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.Metadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.Metadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.Metadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edmtools.Proto.Metadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.Metadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.Metadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edmtools.Proto.Metadata prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edmtools.Metadata}
     *
     * <pre>
     * Primary message for information contained in the text headers.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edmtools.Metadata)
        edmtools.Proto.MetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edmtools.Proto.internal_static_edmtools_Metadata_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edmtools.Proto.internal_static_edmtools_Metadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edmtools.Proto.Metadata.class, edmtools.Proto.Metadata.Builder.class);
      }

      // Construct using edmtools.Proto.Metadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAlarmThresholdsFieldBuilder();
          getFuelFieldBuilder();
          getFeaturesFieldBuilder();
          getFlightMetadataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        registration_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (alarmThresholdsBuilder_ == null) {
          alarmThresholds_ = edmtools.Proto.AlarmThresholds.getDefaultInstance();
        } else {
          alarmThresholdsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (fuelBuilder_ == null) {
          fuel_ = edmtools.Proto.Fuel.getDefaultInstance();
        } else {
          fuelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        downloadTimestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        protocolVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (featuresBuilder_ == null) {
          features_ = edmtools.Proto.Features.getDefaultInstance();
        } else {
          featuresBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (flightMetadataBuilder_ == null) {
          flightMetadata_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          flightMetadataBuilder_.clear();
        }
        length_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edmtools.Proto.internal_static_edmtools_Metadata_descriptor;
      }

      public edmtools.Proto.Metadata getDefaultInstanceForType() {
        return edmtools.Proto.Metadata.getDefaultInstance();
      }

      public edmtools.Proto.Metadata build() {
        edmtools.Proto.Metadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edmtools.Proto.Metadata buildPartial() {
        edmtools.Proto.Metadata result = new edmtools.Proto.Metadata(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.registration_ = registration_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (alarmThresholdsBuilder_ == null) {
          result.alarmThresholds_ = alarmThresholds_;
        } else {
          result.alarmThresholds_ = alarmThresholdsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (fuelBuilder_ == null) {
          result.fuel_ = fuel_;
        } else {
          result.fuel_ = fuelBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.downloadTimestamp_ = downloadTimestamp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.protocolVersion_ = protocolVersion_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (featuresBuilder_ == null) {
          result.features_ = features_;
        } else {
          result.features_ = featuresBuilder_.build();
        }
        if (flightMetadataBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            flightMetadata_ = java.util.Collections.unmodifiableList(flightMetadata_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.flightMetadata_ = flightMetadata_;
        } else {
          result.flightMetadata_ = flightMetadataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.length_ = length_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          parseWarning_ = parseWarning_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.parseWarning_ = parseWarning_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edmtools.Proto.Metadata) {
          return mergeFrom((edmtools.Proto.Metadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edmtools.Proto.Metadata other) {
        if (other == edmtools.Proto.Metadata.getDefaultInstance()) return this;
        if (other.hasRegistration()) {
          bitField0_ |= 0x00000001;
          registration_ = other.registration_;
          onChanged();
        }
        if (other.hasAlarmThresholds()) {
          mergeAlarmThresholds(other.getAlarmThresholds());
        }
        if (other.hasFuel()) {
          mergeFuel(other.getFuel());
        }
        if (other.hasDownloadTimestamp()) {
          setDownloadTimestamp(other.getDownloadTimestamp());
        }
        if (other.hasProtocolVersion()) {
          setProtocolVersion(other.getProtocolVersion());
        }
        if (other.hasFeatures()) {
          mergeFeatures(other.getFeatures());
        }
        if (flightMetadataBuilder_ == null) {
          if (!other.flightMetadata_.isEmpty()) {
            if (flightMetadata_.isEmpty()) {
              flightMetadata_ = other.flightMetadata_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureFlightMetadataIsMutable();
              flightMetadata_.addAll(other.flightMetadata_);
            }
            onChanged();
          }
        } else {
          if (!other.flightMetadata_.isEmpty()) {
            if (flightMetadataBuilder_.isEmpty()) {
              flightMetadataBuilder_.dispose();
              flightMetadataBuilder_ = null;
              flightMetadata_ = other.flightMetadata_;
              bitField0_ = (bitField0_ & ~0x00000040);
              flightMetadataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFlightMetadataFieldBuilder() : null;
            } else {
              flightMetadataBuilder_.addAllMessages(other.flightMetadata_);
            }
          }
        }
        if (other.hasLength()) {
          setLength(other.getLength());
        }
        if (!other.parseWarning_.isEmpty()) {
          if (parseWarning_.isEmpty()) {
            parseWarning_ = other.parseWarning_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureParseWarningIsMutable();
            parseWarning_.addAll(other.parseWarning_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edmtools.Proto.Metadata parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edmtools.Proto.Metadata) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object registration_ = "";
      /**
       * <code>optional string registration = 1;</code>
       */
      public boolean hasRegistration() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string registration = 1;</code>
       */
      public java.lang.String getRegistration() {
        java.lang.Object ref = registration_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            registration_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string registration = 1;</code>
       */
      public com.google.protobuf.ByteString
          getRegistrationBytes() {
        java.lang.Object ref = registration_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          registration_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string registration = 1;</code>
       */
      public Builder setRegistration(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        registration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string registration = 1;</code>
       */
      public Builder clearRegistration() {
        bitField0_ = (bitField0_ & ~0x00000001);
        registration_ = getDefaultInstance().getRegistration();
        onChanged();
        return this;
      }
      /**
       * <code>optional string registration = 1;</code>
       */
      public Builder setRegistrationBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        registration_ = value;
        onChanged();
        return this;
      }

      private edmtools.Proto.AlarmThresholds alarmThresholds_ = edmtools.Proto.AlarmThresholds.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.AlarmThresholds, edmtools.Proto.AlarmThresholds.Builder, edmtools.Proto.AlarmThresholdsOrBuilder> alarmThresholdsBuilder_;
      /**
       * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
       *
       * <pre>
       * Configured alarm thresholds for sensor data.
       * </pre>
       */
      public boolean hasAlarmThresholds() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
       *
       * <pre>
       * Configured alarm thresholds for sensor data.
       * </pre>
       */
      public edmtools.Proto.AlarmThresholds getAlarmThresholds() {
        if (alarmThresholdsBuilder_ == null) {
          return alarmThresholds_;
        } else {
          return alarmThresholdsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
       *
       * <pre>
       * Configured alarm thresholds for sensor data.
       * </pre>
       */
      public Builder setAlarmThresholds(edmtools.Proto.AlarmThresholds value) {
        if (alarmThresholdsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          alarmThresholds_ = value;
          onChanged();
        } else {
          alarmThresholdsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
       *
       * <pre>
       * Configured alarm thresholds for sensor data.
       * </pre>
       */
      public Builder setAlarmThresholds(
          edmtools.Proto.AlarmThresholds.Builder builderForValue) {
        if (alarmThresholdsBuilder_ == null) {
          alarmThresholds_ = builderForValue.build();
          onChanged();
        } else {
          alarmThresholdsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
       *
       * <pre>
       * Configured alarm thresholds for sensor data.
       * </pre>
       */
      public Builder mergeAlarmThresholds(edmtools.Proto.AlarmThresholds value) {
        if (alarmThresholdsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              alarmThresholds_ != edmtools.Proto.AlarmThresholds.getDefaultInstance()) {
            alarmThresholds_ =
              edmtools.Proto.AlarmThresholds.newBuilder(alarmThresholds_).mergeFrom(value).buildPartial();
          } else {
            alarmThresholds_ = value;
          }
          onChanged();
        } else {
          alarmThresholdsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
       *
       * <pre>
       * Configured alarm thresholds for sensor data.
       * </pre>
       */
      public Builder clearAlarmThresholds() {
        if (alarmThresholdsBuilder_ == null) {
          alarmThresholds_ = edmtools.Proto.AlarmThresholds.getDefaultInstance();
          onChanged();
        } else {
          alarmThresholdsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
       *
       * <pre>
       * Configured alarm thresholds for sensor data.
       * </pre>
       */
      public edmtools.Proto.AlarmThresholds.Builder getAlarmThresholdsBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getAlarmThresholdsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
       *
       * <pre>
       * Configured alarm thresholds for sensor data.
       * </pre>
       */
      public edmtools.Proto.AlarmThresholdsOrBuilder getAlarmThresholdsOrBuilder() {
        if (alarmThresholdsBuilder_ != null) {
          return alarmThresholdsBuilder_.getMessageOrBuilder();
        } else {
          return alarmThresholds_;
        }
      }
      /**
       * <code>optional .edmtools.AlarmThresholds alarm_thresholds = 2;</code>
       *
       * <pre>
       * Configured alarm thresholds for sensor data.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.AlarmThresholds, edmtools.Proto.AlarmThresholds.Builder, edmtools.Proto.AlarmThresholdsOrBuilder> 
          getAlarmThresholdsFieldBuilder() {
        if (alarmThresholdsBuilder_ == null) {
          alarmThresholdsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edmtools.Proto.AlarmThresholds, edmtools.Proto.AlarmThresholds.Builder, edmtools.Proto.AlarmThresholdsOrBuilder>(
                  getAlarmThresholds(),
                  getParentForChildren(),
                  isClean());
          alarmThresholds_ = null;
        }
        return alarmThresholdsBuilder_;
      }

      private edmtools.Proto.Fuel fuel_ = edmtools.Proto.Fuel.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.Fuel, edmtools.Proto.Fuel.Builder, edmtools.Proto.FuelOrBuilder> fuelBuilder_;
      /**
       * <code>optional .edmtools.Fuel fuel = 3;</code>
       */
      public boolean hasFuel() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .edmtools.Fuel fuel = 3;</code>
       */
      public edmtools.Proto.Fuel getFuel() {
        if (fuelBuilder_ == null) {
          return fuel_;
        } else {
          return fuelBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .edmtools.Fuel fuel = 3;</code>
       */
      public Builder setFuel(edmtools.Proto.Fuel value) {
        if (fuelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fuel_ = value;
          onChanged();
        } else {
          fuelBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .edmtools.Fuel fuel = 3;</code>
       */
      public Builder setFuel(
          edmtools.Proto.Fuel.Builder builderForValue) {
        if (fuelBuilder_ == null) {
          fuel_ = builderForValue.build();
          onChanged();
        } else {
          fuelBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .edmtools.Fuel fuel = 3;</code>
       */
      public Builder mergeFuel(edmtools.Proto.Fuel value) {
        if (fuelBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              fuel_ != edmtools.Proto.Fuel.getDefaultInstance()) {
            fuel_ =
              edmtools.Proto.Fuel.newBuilder(fuel_).mergeFrom(value).buildPartial();
          } else {
            fuel_ = value;
          }
          onChanged();
        } else {
          fuelBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .edmtools.Fuel fuel = 3;</code>
       */
      public Builder clearFuel() {
        if (fuelBuilder_ == null) {
          fuel_ = edmtools.Proto.Fuel.getDefaultInstance();
          onChanged();
        } else {
          fuelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .edmtools.Fuel fuel = 3;</code>
       */
      public edmtools.Proto.Fuel.Builder getFuelBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFuelFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .edmtools.Fuel fuel = 3;</code>
       */
      public edmtools.Proto.FuelOrBuilder getFuelOrBuilder() {
        if (fuelBuilder_ != null) {
          return fuelBuilder_.getMessageOrBuilder();
        } else {
          return fuel_;
        }
      }
      /**
       * <code>optional .edmtools.Fuel fuel = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.Fuel, edmtools.Proto.Fuel.Builder, edmtools.Proto.FuelOrBuilder> 
          getFuelFieldBuilder() {
        if (fuelBuilder_ == null) {
          fuelBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edmtools.Proto.Fuel, edmtools.Proto.Fuel.Builder, edmtools.Proto.FuelOrBuilder>(
                  getFuel(),
                  getParentForChildren(),
                  isClean());
          fuel_ = null;
        }
        return fuelBuilder_;
      }

      private long downloadTimestamp_ ;
      /**
       * <code>optional int64 download_timestamp = 4;</code>
       *
       * <pre>
       * Unix timestamp of download time.  JPI does not preserve zone.
       * </pre>
       */
      public boolean hasDownloadTimestamp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 download_timestamp = 4;</code>
       *
       * <pre>
       * Unix timestamp of download time.  JPI does not preserve zone.
       * </pre>
       */
      public long getDownloadTimestamp() {
        return downloadTimestamp_;
      }
      /**
       * <code>optional int64 download_timestamp = 4;</code>
       *
       * <pre>
       * Unix timestamp of download time.  JPI does not preserve zone.
       * </pre>
       */
      public Builder setDownloadTimestamp(long value) {
        bitField0_ |= 0x00000008;
        downloadTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 download_timestamp = 4;</code>
       *
       * <pre>
       * Unix timestamp of download time.  JPI does not preserve zone.
       * </pre>
       */
      public Builder clearDownloadTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        downloadTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int protocolVersion_ ;
      /**
       * <code>optional int32 protocol_version = 5;</code>
       */
      public boolean hasProtocolVersion() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 protocol_version = 5;</code>
       */
      public int getProtocolVersion() {
        return protocolVersion_;
      }
      /**
       * <code>optional int32 protocol_version = 5;</code>
       */
      public Builder setProtocolVersion(int value) {
        bitField0_ |= 0x00000010;
        protocolVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 protocol_version = 5;</code>
       */
      public Builder clearProtocolVersion() {
        bitField0_ = (bitField0_ & ~0x00000010);
        protocolVersion_ = 0;
        onChanged();
        return this;
      }

      private edmtools.Proto.Features features_ = edmtools.Proto.Features.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.Features, edmtools.Proto.Features.Builder, edmtools.Proto.FeaturesOrBuilder> featuresBuilder_;
      /**
       * <code>optional .edmtools.Features features = 6;</code>
       */
      public boolean hasFeatures() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .edmtools.Features features = 6;</code>
       */
      public edmtools.Proto.Features getFeatures() {
        if (featuresBuilder_ == null) {
          return features_;
        } else {
          return featuresBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .edmtools.Features features = 6;</code>
       */
      public Builder setFeatures(edmtools.Proto.Features value) {
        if (featuresBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          features_ = value;
          onChanged();
        } else {
          featuresBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .edmtools.Features features = 6;</code>
       */
      public Builder setFeatures(
          edmtools.Proto.Features.Builder builderForValue) {
        if (featuresBuilder_ == null) {
          features_ = builderForValue.build();
          onChanged();
        } else {
          featuresBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .edmtools.Features features = 6;</code>
       */
      public Builder mergeFeatures(edmtools.Proto.Features value) {
        if (featuresBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              features_ != edmtools.Proto.Features.getDefaultInstance()) {
            features_ =
              edmtools.Proto.Features.newBuilder(features_).mergeFrom(value).buildPartial();
          } else {
            features_ = value;
          }
          onChanged();
        } else {
          featuresBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .edmtools.Features features = 6;</code>
       */
      public Builder clearFeatures() {
        if (featuresBuilder_ == null) {
          features_ = edmtools.Proto.Features.getDefaultInstance();
          onChanged();
        } else {
          featuresBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .edmtools.Features features = 6;</code>
       */
      public edmtools.Proto.Features.Builder getFeaturesBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getFeaturesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .edmtools.Features features = 6;</code>
       */
      public edmtools.Proto.FeaturesOrBuilder getFeaturesOrBuilder() {
        if (featuresBuilder_ != null) {
          return featuresBuilder_.getMessageOrBuilder();
        } else {
          return features_;
        }
      }
      /**
       * <code>optional .edmtools.Features features = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.Features, edmtools.Proto.Features.Builder, edmtools.Proto.FeaturesOrBuilder> 
          getFeaturesFieldBuilder() {
        if (featuresBuilder_ == null) {
          featuresBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edmtools.Proto.Features, edmtools.Proto.Features.Builder, edmtools.Proto.FeaturesOrBuilder>(
                  getFeatures(),
                  getParentForChildren(),
                  isClean());
          features_ = null;
        }
        return featuresBuilder_;
      }

      private java.util.List<edmtools.Proto.FlightMetadata> flightMetadata_ =
        java.util.Collections.emptyList();
      private void ensureFlightMetadataIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          flightMetadata_ = new java.util.ArrayList<edmtools.Proto.FlightMetadata>(flightMetadata_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edmtools.Proto.FlightMetadata, edmtools.Proto.FlightMetadata.Builder, edmtools.Proto.FlightMetadataOrBuilder> flightMetadataBuilder_;

      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public java.util.List<edmtools.Proto.FlightMetadata> getFlightMetadataList() {
        if (flightMetadataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(flightMetadata_);
        } else {
          return flightMetadataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public int getFlightMetadataCount() {
        if (flightMetadataBuilder_ == null) {
          return flightMetadata_.size();
        } else {
          return flightMetadataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public edmtools.Proto.FlightMetadata getFlightMetadata(int index) {
        if (flightMetadataBuilder_ == null) {
          return flightMetadata_.get(index);
        } else {
          return flightMetadataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public Builder setFlightMetadata(
          int index, edmtools.Proto.FlightMetadata value) {
        if (flightMetadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFlightMetadataIsMutable();
          flightMetadata_.set(index, value);
          onChanged();
        } else {
          flightMetadataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public Builder setFlightMetadata(
          int index, edmtools.Proto.FlightMetadata.Builder builderForValue) {
        if (flightMetadataBuilder_ == null) {
          ensureFlightMetadataIsMutable();
          flightMetadata_.set(index, builderForValue.build());
          onChanged();
        } else {
          flightMetadataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public Builder addFlightMetadata(edmtools.Proto.FlightMetadata value) {
        if (flightMetadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFlightMetadataIsMutable();
          flightMetadata_.add(value);
          onChanged();
        } else {
          flightMetadataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public Builder addFlightMetadata(
          int index, edmtools.Proto.FlightMetadata value) {
        if (flightMetadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFlightMetadataIsMutable();
          flightMetadata_.add(index, value);
          onChanged();
        } else {
          flightMetadataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public Builder addFlightMetadata(
          edmtools.Proto.FlightMetadata.Builder builderForValue) {
        if (flightMetadataBuilder_ == null) {
          ensureFlightMetadataIsMutable();
          flightMetadata_.add(builderForValue.build());
          onChanged();
        } else {
          flightMetadataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public Builder addFlightMetadata(
          int index, edmtools.Proto.FlightMetadata.Builder builderForValue) {
        if (flightMetadataBuilder_ == null) {
          ensureFlightMetadataIsMutable();
          flightMetadata_.add(index, builderForValue.build());
          onChanged();
        } else {
          flightMetadataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public Builder addAllFlightMetadata(
          java.lang.Iterable<? extends edmtools.Proto.FlightMetadata> values) {
        if (flightMetadataBuilder_ == null) {
          ensureFlightMetadataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, flightMetadata_);
          onChanged();
        } else {
          flightMetadataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public Builder clearFlightMetadata() {
        if (flightMetadataBuilder_ == null) {
          flightMetadata_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          flightMetadataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public Builder removeFlightMetadata(int index) {
        if (flightMetadataBuilder_ == null) {
          ensureFlightMetadataIsMutable();
          flightMetadata_.remove(index);
          onChanged();
        } else {
          flightMetadataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public edmtools.Proto.FlightMetadata.Builder getFlightMetadataBuilder(
          int index) {
        return getFlightMetadataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public edmtools.Proto.FlightMetadataOrBuilder getFlightMetadataOrBuilder(
          int index) {
        if (flightMetadataBuilder_ == null) {
          return flightMetadata_.get(index);  } else {
          return flightMetadataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public java.util.List<? extends edmtools.Proto.FlightMetadataOrBuilder> 
           getFlightMetadataOrBuilderList() {
        if (flightMetadataBuilder_ != null) {
          return flightMetadataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(flightMetadata_);
        }
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public edmtools.Proto.FlightMetadata.Builder addFlightMetadataBuilder() {
        return getFlightMetadataFieldBuilder().addBuilder(
            edmtools.Proto.FlightMetadata.getDefaultInstance());
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public edmtools.Proto.FlightMetadata.Builder addFlightMetadataBuilder(
          int index) {
        return getFlightMetadataFieldBuilder().addBuilder(
            index, edmtools.Proto.FlightMetadata.getDefaultInstance());
      }
      /**
       * <code>repeated .edmtools.FlightMetadata flight_metadata = 7;</code>
       */
      public java.util.List<edmtools.Proto.FlightMetadata.Builder> 
           getFlightMetadataBuilderList() {
        return getFlightMetadataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edmtools.Proto.FlightMetadata, edmtools.Proto.FlightMetadata.Builder, edmtools.Proto.FlightMetadataOrBuilder> 
          getFlightMetadataFieldBuilder() {
        if (flightMetadataBuilder_ == null) {
          flightMetadataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edmtools.Proto.FlightMetadata, edmtools.Proto.FlightMetadata.Builder, edmtools.Proto.FlightMetadataOrBuilder>(
                  flightMetadata_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          flightMetadata_ = null;
        }
        return flightMetadataBuilder_;
      }

      private int length_ ;
      /**
       * <code>optional int32 length = 8;</code>
       *
       * <pre>
       * Length of the metadata in the original JPI file, in bytes.
       * </pre>
       */
      public boolean hasLength() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 length = 8;</code>
       *
       * <pre>
       * Length of the metadata in the original JPI file, in bytes.
       * </pre>
       */
      public int getLength() {
        return length_;
      }
      /**
       * <code>optional int32 length = 8;</code>
       *
       * <pre>
       * Length of the metadata in the original JPI file, in bytes.
       * </pre>
       */
      public Builder setLength(int value) {
        bitField0_ |= 0x00000080;
        length_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 length = 8;</code>
       *
       * <pre>
       * Length of the metadata in the original JPI file, in bytes.
       * </pre>
       */
      public Builder clearLength() {
        bitField0_ = (bitField0_ & ~0x00000080);
        length_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureParseWarningIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          parseWarning_ = new com.google.protobuf.LazyStringArrayList(parseWarning_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated string parse_warning = 9;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getParseWarningList() {
        return parseWarning_.getUnmodifiableView();
      }
      /**
       * <code>repeated string parse_warning = 9;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public int getParseWarningCount() {
        return parseWarning_.size();
      }
      /**
       * <code>repeated string parse_warning = 9;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public java.lang.String getParseWarning(int index) {
        return parseWarning_.get(index);
      }
      /**
       * <code>repeated string parse_warning = 9;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getParseWarningBytes(int index) {
        return parseWarning_.getByteString(index);
      }
      /**
       * <code>repeated string parse_warning = 9;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder setParseWarning(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParseWarningIsMutable();
        parseWarning_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 9;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder addParseWarning(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParseWarningIsMutable();
        parseWarning_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 9;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder addAllParseWarning(
          java.lang.Iterable<java.lang.String> values) {
        ensureParseWarningIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, parseWarning_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 9;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder clearParseWarning() {
        parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 9;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder addParseWarningBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParseWarningIsMutable();
        parseWarning_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:edmtools.Metadata)
    }

    static {
      defaultInstance = new Metadata(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:edmtools.Metadata)
  }

  public interface AlarmThresholdsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edmtools.AlarmThresholds)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double min_volts = 1;</code>
     */
    boolean hasMinVolts();
    /**
     * <code>optional double min_volts = 1;</code>
     */
    double getMinVolts();

    /**
     * <code>optional double max_volts = 2;</code>
     */
    boolean hasMaxVolts();
    /**
     * <code>optional double max_volts = 2;</code>
     */
    double getMaxVolts();

    /**
     * <code>optional int32 max_exhaust_gas_temperature_difference = 3;</code>
     */
    boolean hasMaxExhaustGasTemperatureDifference();
    /**
     * <code>optional int32 max_exhaust_gas_temperature_difference = 3;</code>
     */
    int getMaxExhaustGasTemperatureDifference();

    /**
     * <code>optional int32 max_cylinder_head_temperature = 4;</code>
     */
    boolean hasMaxCylinderHeadTemperature();
    /**
     * <code>optional int32 max_cylinder_head_temperature = 4;</code>
     */
    int getMaxCylinderHeadTemperature();

    /**
     * <code>optional int32 max_cylinder_head_temperature_cooling_rate = 5;</code>
     *
     * <pre>
     * In degrees per minute.
     * </pre>
     */
    boolean hasMaxCylinderHeadTemperatureCoolingRate();
    /**
     * <code>optional int32 max_cylinder_head_temperature_cooling_rate = 5;</code>
     *
     * <pre>
     * In degrees per minute.
     * </pre>
     */
    int getMaxCylinderHeadTemperatureCoolingRate();

    /**
     * <code>optional int32 max_exhaust_gas_temperature = 6;</code>
     */
    boolean hasMaxExhaustGasTemperature();
    /**
     * <code>optional int32 max_exhaust_gas_temperature = 6;</code>
     */
    int getMaxExhaustGasTemperature();

    /**
     * <code>optional int32 min_oil_temperature = 7;</code>
     */
    boolean hasMinOilTemperature();
    /**
     * <code>optional int32 min_oil_temperature = 7;</code>
     */
    int getMinOilTemperature();

    /**
     * <code>optional int32 max_oil_temperature = 8;</code>
     */
    boolean hasMaxOilTemperature();
    /**
     * <code>optional int32 max_oil_temperature = 8;</code>
     */
    int getMaxOilTemperature();
  }
  /**
   * Protobuf type {@code edmtools.AlarmThresholds}
   *
   * <pre>
   * Configured alarm thresholds.
   * </pre>
   */
  public static final class AlarmThresholds extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:edmtools.AlarmThresholds)
      AlarmThresholdsOrBuilder {
    // Use AlarmThresholds.newBuilder() to construct.
    private AlarmThresholds(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AlarmThresholds(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AlarmThresholds defaultInstance;
    public static AlarmThresholds getDefaultInstance() {
      return defaultInstance;
    }

    public AlarmThresholds getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AlarmThresholds(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              minVolts_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              maxVolts_ = input.readDouble();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              maxExhaustGasTemperatureDifference_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              maxCylinderHeadTemperature_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              maxCylinderHeadTemperatureCoolingRate_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              maxExhaustGasTemperature_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              minOilTemperature_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              maxOilTemperature_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edmtools.Proto.internal_static_edmtools_AlarmThresholds_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edmtools.Proto.internal_static_edmtools_AlarmThresholds_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edmtools.Proto.AlarmThresholds.class, edmtools.Proto.AlarmThresholds.Builder.class);
    }

    public static com.google.protobuf.Parser<AlarmThresholds> PARSER =
        new com.google.protobuf.AbstractParser<AlarmThresholds>() {
      public AlarmThresholds parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AlarmThresholds(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AlarmThresholds> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MIN_VOLTS_FIELD_NUMBER = 1;
    private double minVolts_;
    /**
     * <code>optional double min_volts = 1;</code>
     */
    public boolean hasMinVolts() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double min_volts = 1;</code>
     */
    public double getMinVolts() {
      return minVolts_;
    }

    public static final int MAX_VOLTS_FIELD_NUMBER = 2;
    private double maxVolts_;
    /**
     * <code>optional double max_volts = 2;</code>
     */
    public boolean hasMaxVolts() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double max_volts = 2;</code>
     */
    public double getMaxVolts() {
      return maxVolts_;
    }

    public static final int MAX_EXHAUST_GAS_TEMPERATURE_DIFFERENCE_FIELD_NUMBER = 3;
    private int maxExhaustGasTemperatureDifference_;
    /**
     * <code>optional int32 max_exhaust_gas_temperature_difference = 3;</code>
     */
    public boolean hasMaxExhaustGasTemperatureDifference() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 max_exhaust_gas_temperature_difference = 3;</code>
     */
    public int getMaxExhaustGasTemperatureDifference() {
      return maxExhaustGasTemperatureDifference_;
    }

    public static final int MAX_CYLINDER_HEAD_TEMPERATURE_FIELD_NUMBER = 4;
    private int maxCylinderHeadTemperature_;
    /**
     * <code>optional int32 max_cylinder_head_temperature = 4;</code>
     */
    public boolean hasMaxCylinderHeadTemperature() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 max_cylinder_head_temperature = 4;</code>
     */
    public int getMaxCylinderHeadTemperature() {
      return maxCylinderHeadTemperature_;
    }

    public static final int MAX_CYLINDER_HEAD_TEMPERATURE_COOLING_RATE_FIELD_NUMBER = 5;
    private int maxCylinderHeadTemperatureCoolingRate_;
    /**
     * <code>optional int32 max_cylinder_head_temperature_cooling_rate = 5;</code>
     *
     * <pre>
     * In degrees per minute.
     * </pre>
     */
    public boolean hasMaxCylinderHeadTemperatureCoolingRate() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 max_cylinder_head_temperature_cooling_rate = 5;</code>
     *
     * <pre>
     * In degrees per minute.
     * </pre>
     */
    public int getMaxCylinderHeadTemperatureCoolingRate() {
      return maxCylinderHeadTemperatureCoolingRate_;
    }

    public static final int MAX_EXHAUST_GAS_TEMPERATURE_FIELD_NUMBER = 6;
    private int maxExhaustGasTemperature_;
    /**
     * <code>optional int32 max_exhaust_gas_temperature = 6;</code>
     */
    public boolean hasMaxExhaustGasTemperature() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 max_exhaust_gas_temperature = 6;</code>
     */
    public int getMaxExhaustGasTemperature() {
      return maxExhaustGasTemperature_;
    }

    public static final int MIN_OIL_TEMPERATURE_FIELD_NUMBER = 7;
    private int minOilTemperature_;
    /**
     * <code>optional int32 min_oil_temperature = 7;</code>
     */
    public boolean hasMinOilTemperature() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 min_oil_temperature = 7;</code>
     */
    public int getMinOilTemperature() {
      return minOilTemperature_;
    }

    public static final int MAX_OIL_TEMPERATURE_FIELD_NUMBER = 8;
    private int maxOilTemperature_;
    /**
     * <code>optional int32 max_oil_temperature = 8;</code>
     */
    public boolean hasMaxOilTemperature() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 max_oil_temperature = 8;</code>
     */
    public int getMaxOilTemperature() {
      return maxOilTemperature_;
    }

    private void initFields() {
      minVolts_ = 0D;
      maxVolts_ = 0D;
      maxExhaustGasTemperatureDifference_ = 0;
      maxCylinderHeadTemperature_ = 0;
      maxCylinderHeadTemperatureCoolingRate_ = 0;
      maxExhaustGasTemperature_ = 0;
      minOilTemperature_ = 0;
      maxOilTemperature_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, minVolts_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, maxVolts_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, maxExhaustGasTemperatureDifference_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, maxCylinderHeadTemperature_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, maxCylinderHeadTemperatureCoolingRate_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, maxExhaustGasTemperature_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, minOilTemperature_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, maxOilTemperature_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, minVolts_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, maxVolts_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, maxExhaustGasTemperatureDifference_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, maxCylinderHeadTemperature_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, maxCylinderHeadTemperatureCoolingRate_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, maxExhaustGasTemperature_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, minOilTemperature_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, maxOilTemperature_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edmtools.Proto.AlarmThresholds parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.AlarmThresholds parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.AlarmThresholds parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.AlarmThresholds parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.AlarmThresholds parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.AlarmThresholds parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.AlarmThresholds parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edmtools.Proto.AlarmThresholds parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.AlarmThresholds parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.AlarmThresholds parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edmtools.Proto.AlarmThresholds prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edmtools.AlarmThresholds}
     *
     * <pre>
     * Configured alarm thresholds.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edmtools.AlarmThresholds)
        edmtools.Proto.AlarmThresholdsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edmtools.Proto.internal_static_edmtools_AlarmThresholds_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edmtools.Proto.internal_static_edmtools_AlarmThresholds_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edmtools.Proto.AlarmThresholds.class, edmtools.Proto.AlarmThresholds.Builder.class);
      }

      // Construct using edmtools.Proto.AlarmThresholds.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        minVolts_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        maxVolts_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        maxExhaustGasTemperatureDifference_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxCylinderHeadTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        maxCylinderHeadTemperatureCoolingRate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        maxExhaustGasTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        minOilTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        maxOilTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edmtools.Proto.internal_static_edmtools_AlarmThresholds_descriptor;
      }

      public edmtools.Proto.AlarmThresholds getDefaultInstanceForType() {
        return edmtools.Proto.AlarmThresholds.getDefaultInstance();
      }

      public edmtools.Proto.AlarmThresholds build() {
        edmtools.Proto.AlarmThresholds result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edmtools.Proto.AlarmThresholds buildPartial() {
        edmtools.Proto.AlarmThresholds result = new edmtools.Proto.AlarmThresholds(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.minVolts_ = minVolts_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.maxVolts_ = maxVolts_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.maxExhaustGasTemperatureDifference_ = maxExhaustGasTemperatureDifference_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxCylinderHeadTemperature_ = maxCylinderHeadTemperature_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.maxCylinderHeadTemperatureCoolingRate_ = maxCylinderHeadTemperatureCoolingRate_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.maxExhaustGasTemperature_ = maxExhaustGasTemperature_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.minOilTemperature_ = minOilTemperature_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.maxOilTemperature_ = maxOilTemperature_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edmtools.Proto.AlarmThresholds) {
          return mergeFrom((edmtools.Proto.AlarmThresholds)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edmtools.Proto.AlarmThresholds other) {
        if (other == edmtools.Proto.AlarmThresholds.getDefaultInstance()) return this;
        if (other.hasMinVolts()) {
          setMinVolts(other.getMinVolts());
        }
        if (other.hasMaxVolts()) {
          setMaxVolts(other.getMaxVolts());
        }
        if (other.hasMaxExhaustGasTemperatureDifference()) {
          setMaxExhaustGasTemperatureDifference(other.getMaxExhaustGasTemperatureDifference());
        }
        if (other.hasMaxCylinderHeadTemperature()) {
          setMaxCylinderHeadTemperature(other.getMaxCylinderHeadTemperature());
        }
        if (other.hasMaxCylinderHeadTemperatureCoolingRate()) {
          setMaxCylinderHeadTemperatureCoolingRate(other.getMaxCylinderHeadTemperatureCoolingRate());
        }
        if (other.hasMaxExhaustGasTemperature()) {
          setMaxExhaustGasTemperature(other.getMaxExhaustGasTemperature());
        }
        if (other.hasMinOilTemperature()) {
          setMinOilTemperature(other.getMinOilTemperature());
        }
        if (other.hasMaxOilTemperature()) {
          setMaxOilTemperature(other.getMaxOilTemperature());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edmtools.Proto.AlarmThresholds parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edmtools.Proto.AlarmThresholds) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double minVolts_ ;
      /**
       * <code>optional double min_volts = 1;</code>
       */
      public boolean hasMinVolts() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double min_volts = 1;</code>
       */
      public double getMinVolts() {
        return minVolts_;
      }
      /**
       * <code>optional double min_volts = 1;</code>
       */
      public Builder setMinVolts(double value) {
        bitField0_ |= 0x00000001;
        minVolts_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double min_volts = 1;</code>
       */
      public Builder clearMinVolts() {
        bitField0_ = (bitField0_ & ~0x00000001);
        minVolts_ = 0D;
        onChanged();
        return this;
      }

      private double maxVolts_ ;
      /**
       * <code>optional double max_volts = 2;</code>
       */
      public boolean hasMaxVolts() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double max_volts = 2;</code>
       */
      public double getMaxVolts() {
        return maxVolts_;
      }
      /**
       * <code>optional double max_volts = 2;</code>
       */
      public Builder setMaxVolts(double value) {
        bitField0_ |= 0x00000002;
        maxVolts_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_volts = 2;</code>
       */
      public Builder clearMaxVolts() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxVolts_ = 0D;
        onChanged();
        return this;
      }

      private int maxExhaustGasTemperatureDifference_ ;
      /**
       * <code>optional int32 max_exhaust_gas_temperature_difference = 3;</code>
       */
      public boolean hasMaxExhaustGasTemperatureDifference() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 max_exhaust_gas_temperature_difference = 3;</code>
       */
      public int getMaxExhaustGasTemperatureDifference() {
        return maxExhaustGasTemperatureDifference_;
      }
      /**
       * <code>optional int32 max_exhaust_gas_temperature_difference = 3;</code>
       */
      public Builder setMaxExhaustGasTemperatureDifference(int value) {
        bitField0_ |= 0x00000004;
        maxExhaustGasTemperatureDifference_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_exhaust_gas_temperature_difference = 3;</code>
       */
      public Builder clearMaxExhaustGasTemperatureDifference() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maxExhaustGasTemperatureDifference_ = 0;
        onChanged();
        return this;
      }

      private int maxCylinderHeadTemperature_ ;
      /**
       * <code>optional int32 max_cylinder_head_temperature = 4;</code>
       */
      public boolean hasMaxCylinderHeadTemperature() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 max_cylinder_head_temperature = 4;</code>
       */
      public int getMaxCylinderHeadTemperature() {
        return maxCylinderHeadTemperature_;
      }
      /**
       * <code>optional int32 max_cylinder_head_temperature = 4;</code>
       */
      public Builder setMaxCylinderHeadTemperature(int value) {
        bitField0_ |= 0x00000008;
        maxCylinderHeadTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_cylinder_head_temperature = 4;</code>
       */
      public Builder clearMaxCylinderHeadTemperature() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxCylinderHeadTemperature_ = 0;
        onChanged();
        return this;
      }

      private int maxCylinderHeadTemperatureCoolingRate_ ;
      /**
       * <code>optional int32 max_cylinder_head_temperature_cooling_rate = 5;</code>
       *
       * <pre>
       * In degrees per minute.
       * </pre>
       */
      public boolean hasMaxCylinderHeadTemperatureCoolingRate() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 max_cylinder_head_temperature_cooling_rate = 5;</code>
       *
       * <pre>
       * In degrees per minute.
       * </pre>
       */
      public int getMaxCylinderHeadTemperatureCoolingRate() {
        return maxCylinderHeadTemperatureCoolingRate_;
      }
      /**
       * <code>optional int32 max_cylinder_head_temperature_cooling_rate = 5;</code>
       *
       * <pre>
       * In degrees per minute.
       * </pre>
       */
      public Builder setMaxCylinderHeadTemperatureCoolingRate(int value) {
        bitField0_ |= 0x00000010;
        maxCylinderHeadTemperatureCoolingRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_cylinder_head_temperature_cooling_rate = 5;</code>
       *
       * <pre>
       * In degrees per minute.
       * </pre>
       */
      public Builder clearMaxCylinderHeadTemperatureCoolingRate() {
        bitField0_ = (bitField0_ & ~0x00000010);
        maxCylinderHeadTemperatureCoolingRate_ = 0;
        onChanged();
        return this;
      }

      private int maxExhaustGasTemperature_ ;
      /**
       * <code>optional int32 max_exhaust_gas_temperature = 6;</code>
       */
      public boolean hasMaxExhaustGasTemperature() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 max_exhaust_gas_temperature = 6;</code>
       */
      public int getMaxExhaustGasTemperature() {
        return maxExhaustGasTemperature_;
      }
      /**
       * <code>optional int32 max_exhaust_gas_temperature = 6;</code>
       */
      public Builder setMaxExhaustGasTemperature(int value) {
        bitField0_ |= 0x00000020;
        maxExhaustGasTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_exhaust_gas_temperature = 6;</code>
       */
      public Builder clearMaxExhaustGasTemperature() {
        bitField0_ = (bitField0_ & ~0x00000020);
        maxExhaustGasTemperature_ = 0;
        onChanged();
        return this;
      }

      private int minOilTemperature_ ;
      /**
       * <code>optional int32 min_oil_temperature = 7;</code>
       */
      public boolean hasMinOilTemperature() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 min_oil_temperature = 7;</code>
       */
      public int getMinOilTemperature() {
        return minOilTemperature_;
      }
      /**
       * <code>optional int32 min_oil_temperature = 7;</code>
       */
      public Builder setMinOilTemperature(int value) {
        bitField0_ |= 0x00000040;
        minOilTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 min_oil_temperature = 7;</code>
       */
      public Builder clearMinOilTemperature() {
        bitField0_ = (bitField0_ & ~0x00000040);
        minOilTemperature_ = 0;
        onChanged();
        return this;
      }

      private int maxOilTemperature_ ;
      /**
       * <code>optional int32 max_oil_temperature = 8;</code>
       */
      public boolean hasMaxOilTemperature() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 max_oil_temperature = 8;</code>
       */
      public int getMaxOilTemperature() {
        return maxOilTemperature_;
      }
      /**
       * <code>optional int32 max_oil_temperature = 8;</code>
       */
      public Builder setMaxOilTemperature(int value) {
        bitField0_ |= 0x00000080;
        maxOilTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_oil_temperature = 8;</code>
       */
      public Builder clearMaxOilTemperature() {
        bitField0_ = (bitField0_ & ~0x00000080);
        maxOilTemperature_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:edmtools.AlarmThresholds)
    }

    static {
      defaultInstance = new AlarmThresholds(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:edmtools.AlarmThresholds)
  }

  public interface FuelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edmtools.Fuel)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .edmtools.Fuel.FuelFlowUnits fuel_flow_units = 1;</code>
     */
    boolean hasFuelFlowUnits();
    /**
     * <code>optional .edmtools.Fuel.FuelFlowUnits fuel_flow_units = 1;</code>
     */
    edmtools.Proto.Fuel.FuelFlowUnits getFuelFlowUnits();

    /**
     * <code>optional int32 full_quantity = 2;</code>
     */
    boolean hasFullQuantity();
    /**
     * <code>optional int32 full_quantity = 2;</code>
     */
    int getFullQuantity();

    /**
     * <code>optional int32 warning_quantity = 3;</code>
     *
     * <pre>
     * TODO: should this bein alarm thresholds?
     * </pre>
     */
    boolean hasWarningQuantity();
    /**
     * <code>optional int32 warning_quantity = 3;</code>
     *
     * <pre>
     * TODO: should this bein alarm thresholds?
     * </pre>
     */
    int getWarningQuantity();

    /**
     * <code>optional int32 k_factor1 = 4;</code>
     */
    boolean hasKFactor1();
    /**
     * <code>optional int32 k_factor1 = 4;</code>
     */
    int getKFactor1();

    /**
     * <code>optional int32 k_factor2 = 5;</code>
     */
    boolean hasKFactor2();
    /**
     * <code>optional int32 k_factor2 = 5;</code>
     */
    int getKFactor2();
  }
  /**
   * Protobuf type {@code edmtools.Fuel}
   */
  public static final class Fuel extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:edmtools.Fuel)
      FuelOrBuilder {
    // Use Fuel.newBuilder() to construct.
    private Fuel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Fuel(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Fuel defaultInstance;
    public static Fuel getDefaultInstance() {
      return defaultInstance;
    }

    public Fuel getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Fuel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              edmtools.Proto.Fuel.FuelFlowUnits value = edmtools.Proto.Fuel.FuelFlowUnits.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                fuelFlowUnits_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              fullQuantity_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              warningQuantity_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              kFactor1_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              kFactor2_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edmtools.Proto.internal_static_edmtools_Fuel_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edmtools.Proto.internal_static_edmtools_Fuel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edmtools.Proto.Fuel.class, edmtools.Proto.Fuel.Builder.class);
    }

    public static com.google.protobuf.Parser<Fuel> PARSER =
        new com.google.protobuf.AbstractParser<Fuel>() {
      public Fuel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Fuel(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Fuel> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code edmtools.Fuel.FuelFlowUnits}
     */
    public enum FuelFlowUnits
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>GPH = 1;</code>
       */
      GPH(0, 1),
      /**
       * <code>PPH = 2;</code>
       */
      PPH(1, 2),
      /**
       * <code>LPH = 3;</code>
       */
      LPH(2, 3),
      /**
       * <code>KPH = 4;</code>
       */
      KPH(3, 4),
      ;

      /**
       * <code>GPH = 1;</code>
       */
      public static final int GPH_VALUE = 1;
      /**
       * <code>PPH = 2;</code>
       */
      public static final int PPH_VALUE = 2;
      /**
       * <code>LPH = 3;</code>
       */
      public static final int LPH_VALUE = 3;
      /**
       * <code>KPH = 4;</code>
       */
      public static final int KPH_VALUE = 4;


      public final int getNumber() { return value; }

      public static FuelFlowUnits valueOf(int value) {
        switch (value) {
          case 1: return GPH;
          case 2: return PPH;
          case 3: return LPH;
          case 4: return KPH;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FuelFlowUnits>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<FuelFlowUnits>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FuelFlowUnits>() {
              public FuelFlowUnits findValueByNumber(int number) {
                return FuelFlowUnits.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return edmtools.Proto.Fuel.getDescriptor().getEnumTypes().get(0);
      }

      private static final FuelFlowUnits[] VALUES = values();

      public static FuelFlowUnits valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private FuelFlowUnits(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:edmtools.Fuel.FuelFlowUnits)
    }

    private int bitField0_;
    public static final int FUEL_FLOW_UNITS_FIELD_NUMBER = 1;
    private edmtools.Proto.Fuel.FuelFlowUnits fuelFlowUnits_;
    /**
     * <code>optional .edmtools.Fuel.FuelFlowUnits fuel_flow_units = 1;</code>
     */
    public boolean hasFuelFlowUnits() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .edmtools.Fuel.FuelFlowUnits fuel_flow_units = 1;</code>
     */
    public edmtools.Proto.Fuel.FuelFlowUnits getFuelFlowUnits() {
      return fuelFlowUnits_;
    }

    public static final int FULL_QUANTITY_FIELD_NUMBER = 2;
    private int fullQuantity_;
    /**
     * <code>optional int32 full_quantity = 2;</code>
     */
    public boolean hasFullQuantity() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 full_quantity = 2;</code>
     */
    public int getFullQuantity() {
      return fullQuantity_;
    }

    public static final int WARNING_QUANTITY_FIELD_NUMBER = 3;
    private int warningQuantity_;
    /**
     * <code>optional int32 warning_quantity = 3;</code>
     *
     * <pre>
     * TODO: should this bein alarm thresholds?
     * </pre>
     */
    public boolean hasWarningQuantity() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 warning_quantity = 3;</code>
     *
     * <pre>
     * TODO: should this bein alarm thresholds?
     * </pre>
     */
    public int getWarningQuantity() {
      return warningQuantity_;
    }

    public static final int K_FACTOR1_FIELD_NUMBER = 4;
    private int kFactor1_;
    /**
     * <code>optional int32 k_factor1 = 4;</code>
     */
    public boolean hasKFactor1() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 k_factor1 = 4;</code>
     */
    public int getKFactor1() {
      return kFactor1_;
    }

    public static final int K_FACTOR2_FIELD_NUMBER = 5;
    private int kFactor2_;
    /**
     * <code>optional int32 k_factor2 = 5;</code>
     */
    public boolean hasKFactor2() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 k_factor2 = 5;</code>
     */
    public int getKFactor2() {
      return kFactor2_;
    }

    private void initFields() {
      fuelFlowUnits_ = edmtools.Proto.Fuel.FuelFlowUnits.GPH;
      fullQuantity_ = 0;
      warningQuantity_ = 0;
      kFactor1_ = 0;
      kFactor2_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, fuelFlowUnits_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, fullQuantity_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, warningQuantity_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, kFactor1_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, kFactor2_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, fuelFlowUnits_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, fullQuantity_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, warningQuantity_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, kFactor1_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, kFactor2_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edmtools.Proto.Fuel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.Fuel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.Fuel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.Fuel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.Fuel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.Fuel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.Fuel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edmtools.Proto.Fuel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.Fuel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.Fuel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edmtools.Proto.Fuel prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edmtools.Fuel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edmtools.Fuel)
        edmtools.Proto.FuelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edmtools.Proto.internal_static_edmtools_Fuel_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edmtools.Proto.internal_static_edmtools_Fuel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edmtools.Proto.Fuel.class, edmtools.Proto.Fuel.Builder.class);
      }

      // Construct using edmtools.Proto.Fuel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        fuelFlowUnits_ = edmtools.Proto.Fuel.FuelFlowUnits.GPH;
        bitField0_ = (bitField0_ & ~0x00000001);
        fullQuantity_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        warningQuantity_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        kFactor1_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        kFactor2_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edmtools.Proto.internal_static_edmtools_Fuel_descriptor;
      }

      public edmtools.Proto.Fuel getDefaultInstanceForType() {
        return edmtools.Proto.Fuel.getDefaultInstance();
      }

      public edmtools.Proto.Fuel build() {
        edmtools.Proto.Fuel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edmtools.Proto.Fuel buildPartial() {
        edmtools.Proto.Fuel result = new edmtools.Proto.Fuel(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.fuelFlowUnits_ = fuelFlowUnits_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fullQuantity_ = fullQuantity_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.warningQuantity_ = warningQuantity_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.kFactor1_ = kFactor1_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.kFactor2_ = kFactor2_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edmtools.Proto.Fuel) {
          return mergeFrom((edmtools.Proto.Fuel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edmtools.Proto.Fuel other) {
        if (other == edmtools.Proto.Fuel.getDefaultInstance()) return this;
        if (other.hasFuelFlowUnits()) {
          setFuelFlowUnits(other.getFuelFlowUnits());
        }
        if (other.hasFullQuantity()) {
          setFullQuantity(other.getFullQuantity());
        }
        if (other.hasWarningQuantity()) {
          setWarningQuantity(other.getWarningQuantity());
        }
        if (other.hasKFactor1()) {
          setKFactor1(other.getKFactor1());
        }
        if (other.hasKFactor2()) {
          setKFactor2(other.getKFactor2());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edmtools.Proto.Fuel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edmtools.Proto.Fuel) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private edmtools.Proto.Fuel.FuelFlowUnits fuelFlowUnits_ = edmtools.Proto.Fuel.FuelFlowUnits.GPH;
      /**
       * <code>optional .edmtools.Fuel.FuelFlowUnits fuel_flow_units = 1;</code>
       */
      public boolean hasFuelFlowUnits() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .edmtools.Fuel.FuelFlowUnits fuel_flow_units = 1;</code>
       */
      public edmtools.Proto.Fuel.FuelFlowUnits getFuelFlowUnits() {
        return fuelFlowUnits_;
      }
      /**
       * <code>optional .edmtools.Fuel.FuelFlowUnits fuel_flow_units = 1;</code>
       */
      public Builder setFuelFlowUnits(edmtools.Proto.Fuel.FuelFlowUnits value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        fuelFlowUnits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .edmtools.Fuel.FuelFlowUnits fuel_flow_units = 1;</code>
       */
      public Builder clearFuelFlowUnits() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fuelFlowUnits_ = edmtools.Proto.Fuel.FuelFlowUnits.GPH;
        onChanged();
        return this;
      }

      private int fullQuantity_ ;
      /**
       * <code>optional int32 full_quantity = 2;</code>
       */
      public boolean hasFullQuantity() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 full_quantity = 2;</code>
       */
      public int getFullQuantity() {
        return fullQuantity_;
      }
      /**
       * <code>optional int32 full_quantity = 2;</code>
       */
      public Builder setFullQuantity(int value) {
        bitField0_ |= 0x00000002;
        fullQuantity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 full_quantity = 2;</code>
       */
      public Builder clearFullQuantity() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fullQuantity_ = 0;
        onChanged();
        return this;
      }

      private int warningQuantity_ ;
      /**
       * <code>optional int32 warning_quantity = 3;</code>
       *
       * <pre>
       * TODO: should this bein alarm thresholds?
       * </pre>
       */
      public boolean hasWarningQuantity() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 warning_quantity = 3;</code>
       *
       * <pre>
       * TODO: should this bein alarm thresholds?
       * </pre>
       */
      public int getWarningQuantity() {
        return warningQuantity_;
      }
      /**
       * <code>optional int32 warning_quantity = 3;</code>
       *
       * <pre>
       * TODO: should this bein alarm thresholds?
       * </pre>
       */
      public Builder setWarningQuantity(int value) {
        bitField0_ |= 0x00000004;
        warningQuantity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 warning_quantity = 3;</code>
       *
       * <pre>
       * TODO: should this bein alarm thresholds?
       * </pre>
       */
      public Builder clearWarningQuantity() {
        bitField0_ = (bitField0_ & ~0x00000004);
        warningQuantity_ = 0;
        onChanged();
        return this;
      }

      private int kFactor1_ ;
      /**
       * <code>optional int32 k_factor1 = 4;</code>
       */
      public boolean hasKFactor1() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 k_factor1 = 4;</code>
       */
      public int getKFactor1() {
        return kFactor1_;
      }
      /**
       * <code>optional int32 k_factor1 = 4;</code>
       */
      public Builder setKFactor1(int value) {
        bitField0_ |= 0x00000008;
        kFactor1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 k_factor1 = 4;</code>
       */
      public Builder clearKFactor1() {
        bitField0_ = (bitField0_ & ~0x00000008);
        kFactor1_ = 0;
        onChanged();
        return this;
      }

      private int kFactor2_ ;
      /**
       * <code>optional int32 k_factor2 = 5;</code>
       */
      public boolean hasKFactor2() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 k_factor2 = 5;</code>
       */
      public int getKFactor2() {
        return kFactor2_;
      }
      /**
       * <code>optional int32 k_factor2 = 5;</code>
       */
      public Builder setKFactor2(int value) {
        bitField0_ |= 0x00000010;
        kFactor2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 k_factor2 = 5;</code>
       */
      public Builder clearKFactor2() {
        bitField0_ = (bitField0_ & ~0x00000010);
        kFactor2_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:edmtools.Fuel)
    }

    static {
      defaultInstance = new Fuel(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:edmtools.Fuel)
  }

  public interface FeaturesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edmtools.Features)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 model_number = 1;</code>
     *
     * <pre>
     * eg 700, 760, 800
     * </pre>
     */
    boolean hasModelNumber();
    /**
     * <code>optional int32 model_number = 1;</code>
     *
     * <pre>
     * eg 700, 760, 800
     * </pre>
     */
    int getModelNumber();

    /**
     * <code>optional int32 firmware_version = 2;</code>
     *
     * <pre>
     * N.NN * 100
     * </pre>
     */
    boolean hasFirmwareVersion();
    /**
     * <code>optional int32 firmware_version = 2;</code>
     *
     * <pre>
     * N.NN * 100
     * </pre>
     */
    int getFirmwareVersion();

    /**
     * <code>optional .edmtools.Sensors sensors = 3;</code>
     */
    boolean hasSensors();
    /**
     * <code>optional .edmtools.Sensors sensors = 3;</code>
     */
    edmtools.Proto.Sensors getSensors();
    /**
     * <code>optional .edmtools.Sensors sensors = 3;</code>
     */
    edmtools.Proto.SensorsOrBuilder getSensorsOrBuilder();

    /**
     * <code>optional .edmtools.Features.TemperatureUnit engine_temperature_unit = 4;</code>
     */
    boolean hasEngineTemperatureUnit();
    /**
     * <code>optional .edmtools.Features.TemperatureUnit engine_temperature_unit = 4;</code>
     */
    edmtools.Proto.Features.TemperatureUnit getEngineTemperatureUnit();

    /**
     * <code>optional int32 beta_number = 5;</code>
     */
    boolean hasBetaNumber();
    /**
     * <code>optional int32 beta_number = 5;</code>
     */
    int getBetaNumber();

    /**
     * <code>optional int32 build_number = 6;</code>
     */
    boolean hasBuildNumber();
    /**
     * <code>optional int32 build_number = 6;</code>
     */
    int getBuildNumber();
  }
  /**
   * Protobuf type {@code edmtools.Features}
   */
  public static final class Features extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:edmtools.Features)
      FeaturesOrBuilder {
    // Use Features.newBuilder() to construct.
    private Features(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Features(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Features defaultInstance;
    public static Features getDefaultInstance() {
      return defaultInstance;
    }

    public Features getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Features(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              modelNumber_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              firmwareVersion_ = input.readInt32();
              break;
            }
            case 26: {
              edmtools.Proto.Sensors.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = sensors_.toBuilder();
              }
              sensors_ = input.readMessage(edmtools.Proto.Sensors.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sensors_);
                sensors_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              edmtools.Proto.Features.TemperatureUnit value = edmtools.Proto.Features.TemperatureUnit.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                engineTemperatureUnit_ = value;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              betaNumber_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              buildNumber_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edmtools.Proto.internal_static_edmtools_Features_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edmtools.Proto.internal_static_edmtools_Features_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edmtools.Proto.Features.class, edmtools.Proto.Features.Builder.class);
    }

    public static com.google.protobuf.Parser<Features> PARSER =
        new com.google.protobuf.AbstractParser<Features>() {
      public Features parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Features(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Features> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code edmtools.Features.TemperatureUnit}
     */
    public enum TemperatureUnit
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FAHRENHEIT = 1;</code>
       */
      FAHRENHEIT(0, 1),
      /**
       * <code>CELSIUS = 2;</code>
       */
      CELSIUS(1, 2),
      ;

      /**
       * <code>FAHRENHEIT = 1;</code>
       */
      public static final int FAHRENHEIT_VALUE = 1;
      /**
       * <code>CELSIUS = 2;</code>
       */
      public static final int CELSIUS_VALUE = 2;


      public final int getNumber() { return value; }

      public static TemperatureUnit valueOf(int value) {
        switch (value) {
          case 1: return FAHRENHEIT;
          case 2: return CELSIUS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TemperatureUnit>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<TemperatureUnit>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TemperatureUnit>() {
              public TemperatureUnit findValueByNumber(int number) {
                return TemperatureUnit.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return edmtools.Proto.Features.getDescriptor().getEnumTypes().get(0);
      }

      private static final TemperatureUnit[] VALUES = values();

      public static TemperatureUnit valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private TemperatureUnit(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:edmtools.Features.TemperatureUnit)
    }

    private int bitField0_;
    public static final int MODEL_NUMBER_FIELD_NUMBER = 1;
    private int modelNumber_;
    /**
     * <code>optional int32 model_number = 1;</code>
     *
     * <pre>
     * eg 700, 760, 800
     * </pre>
     */
    public boolean hasModelNumber() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 model_number = 1;</code>
     *
     * <pre>
     * eg 700, 760, 800
     * </pre>
     */
    public int getModelNumber() {
      return modelNumber_;
    }

    public static final int FIRMWARE_VERSION_FIELD_NUMBER = 2;
    private int firmwareVersion_;
    /**
     * <code>optional int32 firmware_version = 2;</code>
     *
     * <pre>
     * N.NN * 100
     * </pre>
     */
    public boolean hasFirmwareVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 firmware_version = 2;</code>
     *
     * <pre>
     * N.NN * 100
     * </pre>
     */
    public int getFirmwareVersion() {
      return firmwareVersion_;
    }

    public static final int SENSORS_FIELD_NUMBER = 3;
    private edmtools.Proto.Sensors sensors_;
    /**
     * <code>optional .edmtools.Sensors sensors = 3;</code>
     */
    public boolean hasSensors() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .edmtools.Sensors sensors = 3;</code>
     */
    public edmtools.Proto.Sensors getSensors() {
      return sensors_;
    }
    /**
     * <code>optional .edmtools.Sensors sensors = 3;</code>
     */
    public edmtools.Proto.SensorsOrBuilder getSensorsOrBuilder() {
      return sensors_;
    }

    public static final int ENGINE_TEMPERATURE_UNIT_FIELD_NUMBER = 4;
    private edmtools.Proto.Features.TemperatureUnit engineTemperatureUnit_;
    /**
     * <code>optional .edmtools.Features.TemperatureUnit engine_temperature_unit = 4;</code>
     */
    public boolean hasEngineTemperatureUnit() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .edmtools.Features.TemperatureUnit engine_temperature_unit = 4;</code>
     */
    public edmtools.Proto.Features.TemperatureUnit getEngineTemperatureUnit() {
      return engineTemperatureUnit_;
    }

    public static final int BETA_NUMBER_FIELD_NUMBER = 5;
    private int betaNumber_;
    /**
     * <code>optional int32 beta_number = 5;</code>
     */
    public boolean hasBetaNumber() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 beta_number = 5;</code>
     */
    public int getBetaNumber() {
      return betaNumber_;
    }

    public static final int BUILD_NUMBER_FIELD_NUMBER = 6;
    private int buildNumber_;
    /**
     * <code>optional int32 build_number = 6;</code>
     */
    public boolean hasBuildNumber() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 build_number = 6;</code>
     */
    public int getBuildNumber() {
      return buildNumber_;
    }

    private void initFields() {
      modelNumber_ = 0;
      firmwareVersion_ = 0;
      sensors_ = edmtools.Proto.Sensors.getDefaultInstance();
      engineTemperatureUnit_ = edmtools.Proto.Features.TemperatureUnit.FAHRENHEIT;
      betaNumber_ = 0;
      buildNumber_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, modelNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, firmwareVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, sensors_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, engineTemperatureUnit_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, betaNumber_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, buildNumber_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, modelNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, firmwareVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, sensors_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, engineTemperatureUnit_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, betaNumber_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, buildNumber_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edmtools.Proto.Features parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.Features parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.Features parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.Features parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.Features parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.Features parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.Features parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edmtools.Proto.Features parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.Features parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.Features parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edmtools.Proto.Features prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edmtools.Features}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edmtools.Features)
        edmtools.Proto.FeaturesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edmtools.Proto.internal_static_edmtools_Features_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edmtools.Proto.internal_static_edmtools_Features_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edmtools.Proto.Features.class, edmtools.Proto.Features.Builder.class);
      }

      // Construct using edmtools.Proto.Features.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSensorsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        modelNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        firmwareVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (sensorsBuilder_ == null) {
          sensors_ = edmtools.Proto.Sensors.getDefaultInstance();
        } else {
          sensorsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        engineTemperatureUnit_ = edmtools.Proto.Features.TemperatureUnit.FAHRENHEIT;
        bitField0_ = (bitField0_ & ~0x00000008);
        betaNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        buildNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edmtools.Proto.internal_static_edmtools_Features_descriptor;
      }

      public edmtools.Proto.Features getDefaultInstanceForType() {
        return edmtools.Proto.Features.getDefaultInstance();
      }

      public edmtools.Proto.Features build() {
        edmtools.Proto.Features result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edmtools.Proto.Features buildPartial() {
        edmtools.Proto.Features result = new edmtools.Proto.Features(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.modelNumber_ = modelNumber_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.firmwareVersion_ = firmwareVersion_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (sensorsBuilder_ == null) {
          result.sensors_ = sensors_;
        } else {
          result.sensors_ = sensorsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.engineTemperatureUnit_ = engineTemperatureUnit_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.betaNumber_ = betaNumber_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.buildNumber_ = buildNumber_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edmtools.Proto.Features) {
          return mergeFrom((edmtools.Proto.Features)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edmtools.Proto.Features other) {
        if (other == edmtools.Proto.Features.getDefaultInstance()) return this;
        if (other.hasModelNumber()) {
          setModelNumber(other.getModelNumber());
        }
        if (other.hasFirmwareVersion()) {
          setFirmwareVersion(other.getFirmwareVersion());
        }
        if (other.hasSensors()) {
          mergeSensors(other.getSensors());
        }
        if (other.hasEngineTemperatureUnit()) {
          setEngineTemperatureUnit(other.getEngineTemperatureUnit());
        }
        if (other.hasBetaNumber()) {
          setBetaNumber(other.getBetaNumber());
        }
        if (other.hasBuildNumber()) {
          setBuildNumber(other.getBuildNumber());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edmtools.Proto.Features parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edmtools.Proto.Features) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int modelNumber_ ;
      /**
       * <code>optional int32 model_number = 1;</code>
       *
       * <pre>
       * eg 700, 760, 800
       * </pre>
       */
      public boolean hasModelNumber() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 model_number = 1;</code>
       *
       * <pre>
       * eg 700, 760, 800
       * </pre>
       */
      public int getModelNumber() {
        return modelNumber_;
      }
      /**
       * <code>optional int32 model_number = 1;</code>
       *
       * <pre>
       * eg 700, 760, 800
       * </pre>
       */
      public Builder setModelNumber(int value) {
        bitField0_ |= 0x00000001;
        modelNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 model_number = 1;</code>
       *
       * <pre>
       * eg 700, 760, 800
       * </pre>
       */
      public Builder clearModelNumber() {
        bitField0_ = (bitField0_ & ~0x00000001);
        modelNumber_ = 0;
        onChanged();
        return this;
      }

      private int firmwareVersion_ ;
      /**
       * <code>optional int32 firmware_version = 2;</code>
       *
       * <pre>
       * N.NN * 100
       * </pre>
       */
      public boolean hasFirmwareVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 firmware_version = 2;</code>
       *
       * <pre>
       * N.NN * 100
       * </pre>
       */
      public int getFirmwareVersion() {
        return firmwareVersion_;
      }
      /**
       * <code>optional int32 firmware_version = 2;</code>
       *
       * <pre>
       * N.NN * 100
       * </pre>
       */
      public Builder setFirmwareVersion(int value) {
        bitField0_ |= 0x00000002;
        firmwareVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 firmware_version = 2;</code>
       *
       * <pre>
       * N.NN * 100
       * </pre>
       */
      public Builder clearFirmwareVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        firmwareVersion_ = 0;
        onChanged();
        return this;
      }

      private edmtools.Proto.Sensors sensors_ = edmtools.Proto.Sensors.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.Sensors, edmtools.Proto.Sensors.Builder, edmtools.Proto.SensorsOrBuilder> sensorsBuilder_;
      /**
       * <code>optional .edmtools.Sensors sensors = 3;</code>
       */
      public boolean hasSensors() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 3;</code>
       */
      public edmtools.Proto.Sensors getSensors() {
        if (sensorsBuilder_ == null) {
          return sensors_;
        } else {
          return sensorsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 3;</code>
       */
      public Builder setSensors(edmtools.Proto.Sensors value) {
        if (sensorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sensors_ = value;
          onChanged();
        } else {
          sensorsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 3;</code>
       */
      public Builder setSensors(
          edmtools.Proto.Sensors.Builder builderForValue) {
        if (sensorsBuilder_ == null) {
          sensors_ = builderForValue.build();
          onChanged();
        } else {
          sensorsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 3;</code>
       */
      public Builder mergeSensors(edmtools.Proto.Sensors value) {
        if (sensorsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              sensors_ != edmtools.Proto.Sensors.getDefaultInstance()) {
            sensors_ =
              edmtools.Proto.Sensors.newBuilder(sensors_).mergeFrom(value).buildPartial();
          } else {
            sensors_ = value;
          }
          onChanged();
        } else {
          sensorsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 3;</code>
       */
      public Builder clearSensors() {
        if (sensorsBuilder_ == null) {
          sensors_ = edmtools.Proto.Sensors.getDefaultInstance();
          onChanged();
        } else {
          sensorsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 3;</code>
       */
      public edmtools.Proto.Sensors.Builder getSensorsBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSensorsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 3;</code>
       */
      public edmtools.Proto.SensorsOrBuilder getSensorsOrBuilder() {
        if (sensorsBuilder_ != null) {
          return sensorsBuilder_.getMessageOrBuilder();
        } else {
          return sensors_;
        }
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.Sensors, edmtools.Proto.Sensors.Builder, edmtools.Proto.SensorsOrBuilder> 
          getSensorsFieldBuilder() {
        if (sensorsBuilder_ == null) {
          sensorsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edmtools.Proto.Sensors, edmtools.Proto.Sensors.Builder, edmtools.Proto.SensorsOrBuilder>(
                  getSensors(),
                  getParentForChildren(),
                  isClean());
          sensors_ = null;
        }
        return sensorsBuilder_;
      }

      private edmtools.Proto.Features.TemperatureUnit engineTemperatureUnit_ = edmtools.Proto.Features.TemperatureUnit.FAHRENHEIT;
      /**
       * <code>optional .edmtools.Features.TemperatureUnit engine_temperature_unit = 4;</code>
       */
      public boolean hasEngineTemperatureUnit() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .edmtools.Features.TemperatureUnit engine_temperature_unit = 4;</code>
       */
      public edmtools.Proto.Features.TemperatureUnit getEngineTemperatureUnit() {
        return engineTemperatureUnit_;
      }
      /**
       * <code>optional .edmtools.Features.TemperatureUnit engine_temperature_unit = 4;</code>
       */
      public Builder setEngineTemperatureUnit(edmtools.Proto.Features.TemperatureUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        engineTemperatureUnit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .edmtools.Features.TemperatureUnit engine_temperature_unit = 4;</code>
       */
      public Builder clearEngineTemperatureUnit() {
        bitField0_ = (bitField0_ & ~0x00000008);
        engineTemperatureUnit_ = edmtools.Proto.Features.TemperatureUnit.FAHRENHEIT;
        onChanged();
        return this;
      }

      private int betaNumber_ ;
      /**
       * <code>optional int32 beta_number = 5;</code>
       */
      public boolean hasBetaNumber() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 beta_number = 5;</code>
       */
      public int getBetaNumber() {
        return betaNumber_;
      }
      /**
       * <code>optional int32 beta_number = 5;</code>
       */
      public Builder setBetaNumber(int value) {
        bitField0_ |= 0x00000010;
        betaNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 beta_number = 5;</code>
       */
      public Builder clearBetaNumber() {
        bitField0_ = (bitField0_ & ~0x00000010);
        betaNumber_ = 0;
        onChanged();
        return this;
      }

      private int buildNumber_ ;
      /**
       * <code>optional int32 build_number = 6;</code>
       */
      public boolean hasBuildNumber() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 build_number = 6;</code>
       */
      public int getBuildNumber() {
        return buildNumber_;
      }
      /**
       * <code>optional int32 build_number = 6;</code>
       */
      public Builder setBuildNumber(int value) {
        bitField0_ |= 0x00000020;
        buildNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 build_number = 6;</code>
       */
      public Builder clearBuildNumber() {
        bitField0_ = (bitField0_ & ~0x00000020);
        buildNumber_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:edmtools.Features)
    }

    static {
      defaultInstance = new Features(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:edmtools.Features)
  }

  public interface SensorsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edmtools.Sensors)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 num_exhaust_gas_temperature = 3;</code>
     */
    boolean hasNumExhaustGasTemperature();
    /**
     * <code>optional int32 num_exhaust_gas_temperature = 3;</code>
     */
    int getNumExhaustGasTemperature();

    /**
     * <code>optional int32 num_cylinder_head_temperature = 4;</code>
     */
    boolean hasNumCylinderHeadTemperature();
    /**
     * <code>optional int32 num_cylinder_head_temperature = 4;</code>
     */
    int getNumCylinderHeadTemperature();

    /**
     * <code>optional bool voltage = 5;</code>
     */
    boolean hasVoltage();
    /**
     * <code>optional bool voltage = 5;</code>
     */
    boolean getVoltage();

    /**
     * <code>optional bool oil_temperature = 6;</code>
     */
    boolean hasOilTemperature();
    /**
     * <code>optional bool oil_temperature = 6;</code>
     */
    boolean getOilTemperature();

    /**
     * <code>optional bool turbine_inlet_temperature1 = 7;</code>
     *
     * <pre>
     * TIT1
     * </pre>
     */
    boolean hasTurbineInletTemperature1();
    /**
     * <code>optional bool turbine_inlet_temperature1 = 7;</code>
     *
     * <pre>
     * TIT1
     * </pre>
     */
    boolean getTurbineInletTemperature1();

    /**
     * <code>optional bool turbine_inlet_temperature2 = 8;</code>
     *
     * <pre>
     * TIT2
     * </pre>
     */
    boolean hasTurbineInletTemperature2();
    /**
     * <code>optional bool turbine_inlet_temperature2 = 8;</code>
     *
     * <pre>
     * TIT2
     * </pre>
     */
    boolean getTurbineInletTemperature2();

    /**
     * <code>optional bool outside_air_temperature = 9;</code>
     *
     * <pre>
     * OAT
     * </pre>
     */
    boolean hasOutsideAirTemperature();
    /**
     * <code>optional bool outside_air_temperature = 9;</code>
     *
     * <pre>
     * OAT
     * </pre>
     */
    boolean getOutsideAirTemperature();

    /**
     * <code>optional bool fuel_flow = 10;</code>
     */
    boolean hasFuelFlow();
    /**
     * <code>optional bool fuel_flow = 10;</code>
     */
    boolean getFuelFlow();

    /**
     * <code>optional bool induction_air_temperature = 11;</code>
     *
     * <pre>
     * IAT
     * </pre>
     */
    boolean hasInductionAirTemperature();
    /**
     * <code>optional bool induction_air_temperature = 11;</code>
     *
     * <pre>
     * IAT
     * </pre>
     */
    boolean getInductionAirTemperature();

    /**
     * <code>optional bool compressor_discharge_temperature = 12;</code>
     *
     * <pre>
     * CDT
     * </pre>
     */
    boolean hasCompressorDischargeTemperature();
    /**
     * <code>optional bool compressor_discharge_temperature = 12;</code>
     *
     * <pre>
     * CDT
     * </pre>
     */
    boolean getCompressorDischargeTemperature();

    /**
     * <code>optional bool manifold_pressure = 13;</code>
     *
     * <pre>
     * MAP
     * </pre>
     */
    boolean hasManifoldPressure();
    /**
     * <code>optional bool manifold_pressure = 13;</code>
     *
     * <pre>
     * MAP
     * </pre>
     */
    boolean getManifoldPressure();

    /**
     * <code>optional bool rpm = 14;</code>
     */
    boolean hasRpm();
    /**
     * <code>optional bool rpm = 14;</code>
     */
    boolean getRpm();
  }
  /**
   * Protobuf type {@code edmtools.Sensors}
   */
  public static final class Sensors extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:edmtools.Sensors)
      SensorsOrBuilder {
    // Use Sensors.newBuilder() to construct.
    private Sensors(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Sensors(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Sensors defaultInstance;
    public static Sensors getDefaultInstance() {
      return defaultInstance;
    }

    public Sensors getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Sensors(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              numExhaustGasTemperature_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              numCylinderHeadTemperature_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              voltage_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              oilTemperature_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              turbineInletTemperature1_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              turbineInletTemperature2_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              outsideAirTemperature_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000080;
              fuelFlow_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000100;
              inductionAirTemperature_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000200;
              compressorDischargeTemperature_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000400;
              manifoldPressure_ = input.readBool();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000800;
              rpm_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edmtools.Proto.internal_static_edmtools_Sensors_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edmtools.Proto.internal_static_edmtools_Sensors_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edmtools.Proto.Sensors.class, edmtools.Proto.Sensors.Builder.class);
    }

    public static com.google.protobuf.Parser<Sensors> PARSER =
        new com.google.protobuf.AbstractParser<Sensors>() {
      public Sensors parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Sensors(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Sensors> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NUM_EXHAUST_GAS_TEMPERATURE_FIELD_NUMBER = 3;
    private int numExhaustGasTemperature_;
    /**
     * <code>optional int32 num_exhaust_gas_temperature = 3;</code>
     */
    public boolean hasNumExhaustGasTemperature() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 num_exhaust_gas_temperature = 3;</code>
     */
    public int getNumExhaustGasTemperature() {
      return numExhaustGasTemperature_;
    }

    public static final int NUM_CYLINDER_HEAD_TEMPERATURE_FIELD_NUMBER = 4;
    private int numCylinderHeadTemperature_;
    /**
     * <code>optional int32 num_cylinder_head_temperature = 4;</code>
     */
    public boolean hasNumCylinderHeadTemperature() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 num_cylinder_head_temperature = 4;</code>
     */
    public int getNumCylinderHeadTemperature() {
      return numCylinderHeadTemperature_;
    }

    public static final int VOLTAGE_FIELD_NUMBER = 5;
    private boolean voltage_;
    /**
     * <code>optional bool voltage = 5;</code>
     */
    public boolean hasVoltage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool voltage = 5;</code>
     */
    public boolean getVoltage() {
      return voltage_;
    }

    public static final int OIL_TEMPERATURE_FIELD_NUMBER = 6;
    private boolean oilTemperature_;
    /**
     * <code>optional bool oil_temperature = 6;</code>
     */
    public boolean hasOilTemperature() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool oil_temperature = 6;</code>
     */
    public boolean getOilTemperature() {
      return oilTemperature_;
    }

    public static final int TURBINE_INLET_TEMPERATURE1_FIELD_NUMBER = 7;
    private boolean turbineInletTemperature1_;
    /**
     * <code>optional bool turbine_inlet_temperature1 = 7;</code>
     *
     * <pre>
     * TIT1
     * </pre>
     */
    public boolean hasTurbineInletTemperature1() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool turbine_inlet_temperature1 = 7;</code>
     *
     * <pre>
     * TIT1
     * </pre>
     */
    public boolean getTurbineInletTemperature1() {
      return turbineInletTemperature1_;
    }

    public static final int TURBINE_INLET_TEMPERATURE2_FIELD_NUMBER = 8;
    private boolean turbineInletTemperature2_;
    /**
     * <code>optional bool turbine_inlet_temperature2 = 8;</code>
     *
     * <pre>
     * TIT2
     * </pre>
     */
    public boolean hasTurbineInletTemperature2() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool turbine_inlet_temperature2 = 8;</code>
     *
     * <pre>
     * TIT2
     * </pre>
     */
    public boolean getTurbineInletTemperature2() {
      return turbineInletTemperature2_;
    }

    public static final int OUTSIDE_AIR_TEMPERATURE_FIELD_NUMBER = 9;
    private boolean outsideAirTemperature_;
    /**
     * <code>optional bool outside_air_temperature = 9;</code>
     *
     * <pre>
     * OAT
     * </pre>
     */
    public boolean hasOutsideAirTemperature() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool outside_air_temperature = 9;</code>
     *
     * <pre>
     * OAT
     * </pre>
     */
    public boolean getOutsideAirTemperature() {
      return outsideAirTemperature_;
    }

    public static final int FUEL_FLOW_FIELD_NUMBER = 10;
    private boolean fuelFlow_;
    /**
     * <code>optional bool fuel_flow = 10;</code>
     */
    public boolean hasFuelFlow() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool fuel_flow = 10;</code>
     */
    public boolean getFuelFlow() {
      return fuelFlow_;
    }

    public static final int INDUCTION_AIR_TEMPERATURE_FIELD_NUMBER = 11;
    private boolean inductionAirTemperature_;
    /**
     * <code>optional bool induction_air_temperature = 11;</code>
     *
     * <pre>
     * IAT
     * </pre>
     */
    public boolean hasInductionAirTemperature() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool induction_air_temperature = 11;</code>
     *
     * <pre>
     * IAT
     * </pre>
     */
    public boolean getInductionAirTemperature() {
      return inductionAirTemperature_;
    }

    public static final int COMPRESSOR_DISCHARGE_TEMPERATURE_FIELD_NUMBER = 12;
    private boolean compressorDischargeTemperature_;
    /**
     * <code>optional bool compressor_discharge_temperature = 12;</code>
     *
     * <pre>
     * CDT
     * </pre>
     */
    public boolean hasCompressorDischargeTemperature() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool compressor_discharge_temperature = 12;</code>
     *
     * <pre>
     * CDT
     * </pre>
     */
    public boolean getCompressorDischargeTemperature() {
      return compressorDischargeTemperature_;
    }

    public static final int MANIFOLD_PRESSURE_FIELD_NUMBER = 13;
    private boolean manifoldPressure_;
    /**
     * <code>optional bool manifold_pressure = 13;</code>
     *
     * <pre>
     * MAP
     * </pre>
     */
    public boolean hasManifoldPressure() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool manifold_pressure = 13;</code>
     *
     * <pre>
     * MAP
     * </pre>
     */
    public boolean getManifoldPressure() {
      return manifoldPressure_;
    }

    public static final int RPM_FIELD_NUMBER = 14;
    private boolean rpm_;
    /**
     * <code>optional bool rpm = 14;</code>
     */
    public boolean hasRpm() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool rpm = 14;</code>
     */
    public boolean getRpm() {
      return rpm_;
    }

    private void initFields() {
      numExhaustGasTemperature_ = 0;
      numCylinderHeadTemperature_ = 0;
      voltage_ = false;
      oilTemperature_ = false;
      turbineInletTemperature1_ = false;
      turbineInletTemperature2_ = false;
      outsideAirTemperature_ = false;
      fuelFlow_ = false;
      inductionAirTemperature_ = false;
      compressorDischargeTemperature_ = false;
      manifoldPressure_ = false;
      rpm_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, numExhaustGasTemperature_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, numCylinderHeadTemperature_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(5, voltage_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(6, oilTemperature_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(7, turbineInletTemperature1_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(8, turbineInletTemperature2_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(9, outsideAirTemperature_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(10, fuelFlow_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(11, inductionAirTemperature_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(12, compressorDischargeTemperature_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(13, manifoldPressure_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(14, rpm_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, numExhaustGasTemperature_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, numCylinderHeadTemperature_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, voltage_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, oilTemperature_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, turbineInletTemperature1_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, turbineInletTemperature2_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, outsideAirTemperature_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, fuelFlow_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, inductionAirTemperature_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, compressorDischargeTemperature_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, manifoldPressure_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, rpm_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edmtools.Proto.Sensors parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.Sensors parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.Sensors parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.Sensors parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.Sensors parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.Sensors parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.Sensors parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edmtools.Proto.Sensors parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.Sensors parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.Sensors parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edmtools.Proto.Sensors prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edmtools.Sensors}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edmtools.Sensors)
        edmtools.Proto.SensorsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edmtools.Proto.internal_static_edmtools_Sensors_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edmtools.Proto.internal_static_edmtools_Sensors_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edmtools.Proto.Sensors.class, edmtools.Proto.Sensors.Builder.class);
      }

      // Construct using edmtools.Proto.Sensors.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        numExhaustGasTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        numCylinderHeadTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        voltage_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        oilTemperature_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        turbineInletTemperature1_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        turbineInletTemperature2_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        outsideAirTemperature_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        fuelFlow_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        inductionAirTemperature_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        compressorDischargeTemperature_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        manifoldPressure_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        rpm_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edmtools.Proto.internal_static_edmtools_Sensors_descriptor;
      }

      public edmtools.Proto.Sensors getDefaultInstanceForType() {
        return edmtools.Proto.Sensors.getDefaultInstance();
      }

      public edmtools.Proto.Sensors build() {
        edmtools.Proto.Sensors result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edmtools.Proto.Sensors buildPartial() {
        edmtools.Proto.Sensors result = new edmtools.Proto.Sensors(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.numExhaustGasTemperature_ = numExhaustGasTemperature_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.numCylinderHeadTemperature_ = numCylinderHeadTemperature_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.voltage_ = voltage_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.oilTemperature_ = oilTemperature_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.turbineInletTemperature1_ = turbineInletTemperature1_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.turbineInletTemperature2_ = turbineInletTemperature2_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.outsideAirTemperature_ = outsideAirTemperature_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.fuelFlow_ = fuelFlow_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.inductionAirTemperature_ = inductionAirTemperature_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.compressorDischargeTemperature_ = compressorDischargeTemperature_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.manifoldPressure_ = manifoldPressure_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.rpm_ = rpm_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edmtools.Proto.Sensors) {
          return mergeFrom((edmtools.Proto.Sensors)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edmtools.Proto.Sensors other) {
        if (other == edmtools.Proto.Sensors.getDefaultInstance()) return this;
        if (other.hasNumExhaustGasTemperature()) {
          setNumExhaustGasTemperature(other.getNumExhaustGasTemperature());
        }
        if (other.hasNumCylinderHeadTemperature()) {
          setNumCylinderHeadTemperature(other.getNumCylinderHeadTemperature());
        }
        if (other.hasVoltage()) {
          setVoltage(other.getVoltage());
        }
        if (other.hasOilTemperature()) {
          setOilTemperature(other.getOilTemperature());
        }
        if (other.hasTurbineInletTemperature1()) {
          setTurbineInletTemperature1(other.getTurbineInletTemperature1());
        }
        if (other.hasTurbineInletTemperature2()) {
          setTurbineInletTemperature2(other.getTurbineInletTemperature2());
        }
        if (other.hasOutsideAirTemperature()) {
          setOutsideAirTemperature(other.getOutsideAirTemperature());
        }
        if (other.hasFuelFlow()) {
          setFuelFlow(other.getFuelFlow());
        }
        if (other.hasInductionAirTemperature()) {
          setInductionAirTemperature(other.getInductionAirTemperature());
        }
        if (other.hasCompressorDischargeTemperature()) {
          setCompressorDischargeTemperature(other.getCompressorDischargeTemperature());
        }
        if (other.hasManifoldPressure()) {
          setManifoldPressure(other.getManifoldPressure());
        }
        if (other.hasRpm()) {
          setRpm(other.getRpm());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edmtools.Proto.Sensors parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edmtools.Proto.Sensors) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int numExhaustGasTemperature_ ;
      /**
       * <code>optional int32 num_exhaust_gas_temperature = 3;</code>
       */
      public boolean hasNumExhaustGasTemperature() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 num_exhaust_gas_temperature = 3;</code>
       */
      public int getNumExhaustGasTemperature() {
        return numExhaustGasTemperature_;
      }
      /**
       * <code>optional int32 num_exhaust_gas_temperature = 3;</code>
       */
      public Builder setNumExhaustGasTemperature(int value) {
        bitField0_ |= 0x00000001;
        numExhaustGasTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 num_exhaust_gas_temperature = 3;</code>
       */
      public Builder clearNumExhaustGasTemperature() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numExhaustGasTemperature_ = 0;
        onChanged();
        return this;
      }

      private int numCylinderHeadTemperature_ ;
      /**
       * <code>optional int32 num_cylinder_head_temperature = 4;</code>
       */
      public boolean hasNumCylinderHeadTemperature() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 num_cylinder_head_temperature = 4;</code>
       */
      public int getNumCylinderHeadTemperature() {
        return numCylinderHeadTemperature_;
      }
      /**
       * <code>optional int32 num_cylinder_head_temperature = 4;</code>
       */
      public Builder setNumCylinderHeadTemperature(int value) {
        bitField0_ |= 0x00000002;
        numCylinderHeadTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 num_cylinder_head_temperature = 4;</code>
       */
      public Builder clearNumCylinderHeadTemperature() {
        bitField0_ = (bitField0_ & ~0x00000002);
        numCylinderHeadTemperature_ = 0;
        onChanged();
        return this;
      }

      private boolean voltage_ ;
      /**
       * <code>optional bool voltage = 5;</code>
       */
      public boolean hasVoltage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool voltage = 5;</code>
       */
      public boolean getVoltage() {
        return voltage_;
      }
      /**
       * <code>optional bool voltage = 5;</code>
       */
      public Builder setVoltage(boolean value) {
        bitField0_ |= 0x00000004;
        voltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool voltage = 5;</code>
       */
      public Builder clearVoltage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        voltage_ = false;
        onChanged();
        return this;
      }

      private boolean oilTemperature_ ;
      /**
       * <code>optional bool oil_temperature = 6;</code>
       */
      public boolean hasOilTemperature() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool oil_temperature = 6;</code>
       */
      public boolean getOilTemperature() {
        return oilTemperature_;
      }
      /**
       * <code>optional bool oil_temperature = 6;</code>
       */
      public Builder setOilTemperature(boolean value) {
        bitField0_ |= 0x00000008;
        oilTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool oil_temperature = 6;</code>
       */
      public Builder clearOilTemperature() {
        bitField0_ = (bitField0_ & ~0x00000008);
        oilTemperature_ = false;
        onChanged();
        return this;
      }

      private boolean turbineInletTemperature1_ ;
      /**
       * <code>optional bool turbine_inlet_temperature1 = 7;</code>
       *
       * <pre>
       * TIT1
       * </pre>
       */
      public boolean hasTurbineInletTemperature1() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool turbine_inlet_temperature1 = 7;</code>
       *
       * <pre>
       * TIT1
       * </pre>
       */
      public boolean getTurbineInletTemperature1() {
        return turbineInletTemperature1_;
      }
      /**
       * <code>optional bool turbine_inlet_temperature1 = 7;</code>
       *
       * <pre>
       * TIT1
       * </pre>
       */
      public Builder setTurbineInletTemperature1(boolean value) {
        bitField0_ |= 0x00000010;
        turbineInletTemperature1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool turbine_inlet_temperature1 = 7;</code>
       *
       * <pre>
       * TIT1
       * </pre>
       */
      public Builder clearTurbineInletTemperature1() {
        bitField0_ = (bitField0_ & ~0x00000010);
        turbineInletTemperature1_ = false;
        onChanged();
        return this;
      }

      private boolean turbineInletTemperature2_ ;
      /**
       * <code>optional bool turbine_inlet_temperature2 = 8;</code>
       *
       * <pre>
       * TIT2
       * </pre>
       */
      public boolean hasTurbineInletTemperature2() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool turbine_inlet_temperature2 = 8;</code>
       *
       * <pre>
       * TIT2
       * </pre>
       */
      public boolean getTurbineInletTemperature2() {
        return turbineInletTemperature2_;
      }
      /**
       * <code>optional bool turbine_inlet_temperature2 = 8;</code>
       *
       * <pre>
       * TIT2
       * </pre>
       */
      public Builder setTurbineInletTemperature2(boolean value) {
        bitField0_ |= 0x00000020;
        turbineInletTemperature2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool turbine_inlet_temperature2 = 8;</code>
       *
       * <pre>
       * TIT2
       * </pre>
       */
      public Builder clearTurbineInletTemperature2() {
        bitField0_ = (bitField0_ & ~0x00000020);
        turbineInletTemperature2_ = false;
        onChanged();
        return this;
      }

      private boolean outsideAirTemperature_ ;
      /**
       * <code>optional bool outside_air_temperature = 9;</code>
       *
       * <pre>
       * OAT
       * </pre>
       */
      public boolean hasOutsideAirTemperature() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool outside_air_temperature = 9;</code>
       *
       * <pre>
       * OAT
       * </pre>
       */
      public boolean getOutsideAirTemperature() {
        return outsideAirTemperature_;
      }
      /**
       * <code>optional bool outside_air_temperature = 9;</code>
       *
       * <pre>
       * OAT
       * </pre>
       */
      public Builder setOutsideAirTemperature(boolean value) {
        bitField0_ |= 0x00000040;
        outsideAirTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool outside_air_temperature = 9;</code>
       *
       * <pre>
       * OAT
       * </pre>
       */
      public Builder clearOutsideAirTemperature() {
        bitField0_ = (bitField0_ & ~0x00000040);
        outsideAirTemperature_ = false;
        onChanged();
        return this;
      }

      private boolean fuelFlow_ ;
      /**
       * <code>optional bool fuel_flow = 10;</code>
       */
      public boolean hasFuelFlow() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool fuel_flow = 10;</code>
       */
      public boolean getFuelFlow() {
        return fuelFlow_;
      }
      /**
       * <code>optional bool fuel_flow = 10;</code>
       */
      public Builder setFuelFlow(boolean value) {
        bitField0_ |= 0x00000080;
        fuelFlow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool fuel_flow = 10;</code>
       */
      public Builder clearFuelFlow() {
        bitField0_ = (bitField0_ & ~0x00000080);
        fuelFlow_ = false;
        onChanged();
        return this;
      }

      private boolean inductionAirTemperature_ ;
      /**
       * <code>optional bool induction_air_temperature = 11;</code>
       *
       * <pre>
       * IAT
       * </pre>
       */
      public boolean hasInductionAirTemperature() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool induction_air_temperature = 11;</code>
       *
       * <pre>
       * IAT
       * </pre>
       */
      public boolean getInductionAirTemperature() {
        return inductionAirTemperature_;
      }
      /**
       * <code>optional bool induction_air_temperature = 11;</code>
       *
       * <pre>
       * IAT
       * </pre>
       */
      public Builder setInductionAirTemperature(boolean value) {
        bitField0_ |= 0x00000100;
        inductionAirTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool induction_air_temperature = 11;</code>
       *
       * <pre>
       * IAT
       * </pre>
       */
      public Builder clearInductionAirTemperature() {
        bitField0_ = (bitField0_ & ~0x00000100);
        inductionAirTemperature_ = false;
        onChanged();
        return this;
      }

      private boolean compressorDischargeTemperature_ ;
      /**
       * <code>optional bool compressor_discharge_temperature = 12;</code>
       *
       * <pre>
       * CDT
       * </pre>
       */
      public boolean hasCompressorDischargeTemperature() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool compressor_discharge_temperature = 12;</code>
       *
       * <pre>
       * CDT
       * </pre>
       */
      public boolean getCompressorDischargeTemperature() {
        return compressorDischargeTemperature_;
      }
      /**
       * <code>optional bool compressor_discharge_temperature = 12;</code>
       *
       * <pre>
       * CDT
       * </pre>
       */
      public Builder setCompressorDischargeTemperature(boolean value) {
        bitField0_ |= 0x00000200;
        compressorDischargeTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool compressor_discharge_temperature = 12;</code>
       *
       * <pre>
       * CDT
       * </pre>
       */
      public Builder clearCompressorDischargeTemperature() {
        bitField0_ = (bitField0_ & ~0x00000200);
        compressorDischargeTemperature_ = false;
        onChanged();
        return this;
      }

      private boolean manifoldPressure_ ;
      /**
       * <code>optional bool manifold_pressure = 13;</code>
       *
       * <pre>
       * MAP
       * </pre>
       */
      public boolean hasManifoldPressure() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool manifold_pressure = 13;</code>
       *
       * <pre>
       * MAP
       * </pre>
       */
      public boolean getManifoldPressure() {
        return manifoldPressure_;
      }
      /**
       * <code>optional bool manifold_pressure = 13;</code>
       *
       * <pre>
       * MAP
       * </pre>
       */
      public Builder setManifoldPressure(boolean value) {
        bitField0_ |= 0x00000400;
        manifoldPressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool manifold_pressure = 13;</code>
       *
       * <pre>
       * MAP
       * </pre>
       */
      public Builder clearManifoldPressure() {
        bitField0_ = (bitField0_ & ~0x00000400);
        manifoldPressure_ = false;
        onChanged();
        return this;
      }

      private boolean rpm_ ;
      /**
       * <code>optional bool rpm = 14;</code>
       */
      public boolean hasRpm() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool rpm = 14;</code>
       */
      public boolean getRpm() {
        return rpm_;
      }
      /**
       * <code>optional bool rpm = 14;</code>
       */
      public Builder setRpm(boolean value) {
        bitField0_ |= 0x00000800;
        rpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool rpm = 14;</code>
       */
      public Builder clearRpm() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rpm_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:edmtools.Sensors)
    }

    static {
      defaultInstance = new Sensors(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:edmtools.Sensors)
  }

  public interface FlightMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edmtools.FlightMetadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 flight_number = 1;</code>
     */
    boolean hasFlightNumber();
    /**
     * <code>optional int32 flight_number = 1;</code>
     */
    int getFlightNumber();

    /**
     * <code>optional int32 flight_data_length_words = 2;</code>
     *
     * <pre>
     * The data records are not padded to word boundaries.  Consequently,
     * the record may be one byte less in length than this field indicates.
     * </pre>
     */
    boolean hasFlightDataLengthWords();
    /**
     * <code>optional int32 flight_data_length_words = 2;</code>
     *
     * <pre>
     * The data records are not padded to word boundaries.  Consequently,
     * the record may be one byte less in length than this field indicates.
     * </pre>
     */
    int getFlightDataLengthWords();
  }
  /**
   * Protobuf type {@code edmtools.FlightMetadata}
   */
  public static final class FlightMetadata extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:edmtools.FlightMetadata)
      FlightMetadataOrBuilder {
    // Use FlightMetadata.newBuilder() to construct.
    private FlightMetadata(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FlightMetadata(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FlightMetadata defaultInstance;
    public static FlightMetadata getDefaultInstance() {
      return defaultInstance;
    }

    public FlightMetadata getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FlightMetadata(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              flightNumber_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              flightDataLengthWords_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edmtools.Proto.internal_static_edmtools_FlightMetadata_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edmtools.Proto.internal_static_edmtools_FlightMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edmtools.Proto.FlightMetadata.class, edmtools.Proto.FlightMetadata.Builder.class);
    }

    public static com.google.protobuf.Parser<FlightMetadata> PARSER =
        new com.google.protobuf.AbstractParser<FlightMetadata>() {
      public FlightMetadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlightMetadata(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FlightMetadata> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FLIGHT_NUMBER_FIELD_NUMBER = 1;
    private int flightNumber_;
    /**
     * <code>optional int32 flight_number = 1;</code>
     */
    public boolean hasFlightNumber() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flight_number = 1;</code>
     */
    public int getFlightNumber() {
      return flightNumber_;
    }

    public static final int FLIGHT_DATA_LENGTH_WORDS_FIELD_NUMBER = 2;
    private int flightDataLengthWords_;
    /**
     * <code>optional int32 flight_data_length_words = 2;</code>
     *
     * <pre>
     * The data records are not padded to word boundaries.  Consequently,
     * the record may be one byte less in length than this field indicates.
     * </pre>
     */
    public boolean hasFlightDataLengthWords() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 flight_data_length_words = 2;</code>
     *
     * <pre>
     * The data records are not padded to word boundaries.  Consequently,
     * the record may be one byte less in length than this field indicates.
     * </pre>
     */
    public int getFlightDataLengthWords() {
      return flightDataLengthWords_;
    }

    private void initFields() {
      flightNumber_ = 0;
      flightDataLengthWords_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, flightNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, flightDataLengthWords_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, flightNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, flightDataLengthWords_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edmtools.Proto.FlightMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.FlightMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.FlightMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.FlightMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.FlightMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.FlightMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.FlightMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edmtools.Proto.FlightMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.FlightMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.FlightMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edmtools.Proto.FlightMetadata prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edmtools.FlightMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edmtools.FlightMetadata)
        edmtools.Proto.FlightMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edmtools.Proto.internal_static_edmtools_FlightMetadata_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edmtools.Proto.internal_static_edmtools_FlightMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edmtools.Proto.FlightMetadata.class, edmtools.Proto.FlightMetadata.Builder.class);
      }

      // Construct using edmtools.Proto.FlightMetadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flightNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        flightDataLengthWords_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edmtools.Proto.internal_static_edmtools_FlightMetadata_descriptor;
      }

      public edmtools.Proto.FlightMetadata getDefaultInstanceForType() {
        return edmtools.Proto.FlightMetadata.getDefaultInstance();
      }

      public edmtools.Proto.FlightMetadata build() {
        edmtools.Proto.FlightMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edmtools.Proto.FlightMetadata buildPartial() {
        edmtools.Proto.FlightMetadata result = new edmtools.Proto.FlightMetadata(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flightNumber_ = flightNumber_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.flightDataLengthWords_ = flightDataLengthWords_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edmtools.Proto.FlightMetadata) {
          return mergeFrom((edmtools.Proto.FlightMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edmtools.Proto.FlightMetadata other) {
        if (other == edmtools.Proto.FlightMetadata.getDefaultInstance()) return this;
        if (other.hasFlightNumber()) {
          setFlightNumber(other.getFlightNumber());
        }
        if (other.hasFlightDataLengthWords()) {
          setFlightDataLengthWords(other.getFlightDataLengthWords());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edmtools.Proto.FlightMetadata parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edmtools.Proto.FlightMetadata) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flightNumber_ ;
      /**
       * <code>optional int32 flight_number = 1;</code>
       */
      public boolean hasFlightNumber() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flight_number = 1;</code>
       */
      public int getFlightNumber() {
        return flightNumber_;
      }
      /**
       * <code>optional int32 flight_number = 1;</code>
       */
      public Builder setFlightNumber(int value) {
        bitField0_ |= 0x00000001;
        flightNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flight_number = 1;</code>
       */
      public Builder clearFlightNumber() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flightNumber_ = 0;
        onChanged();
        return this;
      }

      private int flightDataLengthWords_ ;
      /**
       * <code>optional int32 flight_data_length_words = 2;</code>
       *
       * <pre>
       * The data records are not padded to word boundaries.  Consequently,
       * the record may be one byte less in length than this field indicates.
       * </pre>
       */
      public boolean hasFlightDataLengthWords() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 flight_data_length_words = 2;</code>
       *
       * <pre>
       * The data records are not padded to word boundaries.  Consequently,
       * the record may be one byte less in length than this field indicates.
       * </pre>
       */
      public int getFlightDataLengthWords() {
        return flightDataLengthWords_;
      }
      /**
       * <code>optional int32 flight_data_length_words = 2;</code>
       *
       * <pre>
       * The data records are not padded to word boundaries.  Consequently,
       * the record may be one byte less in length than this field indicates.
       * </pre>
       */
      public Builder setFlightDataLengthWords(int value) {
        bitField0_ |= 0x00000002;
        flightDataLengthWords_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flight_data_length_words = 2;</code>
       *
       * <pre>
       * The data records are not padded to word boundaries.  Consequently,
       * the record may be one byte less in length than this field indicates.
       * </pre>
       */
      public Builder clearFlightDataLengthWords() {
        bitField0_ = (bitField0_ & ~0x00000002);
        flightDataLengthWords_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:edmtools.FlightMetadata)
    }

    static {
      defaultInstance = new FlightMetadata(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:edmtools.FlightMetadata)
  }

  public interface FlightOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edmtools.Flight)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 flight_number = 1;</code>
     */
    boolean hasFlightNumber();
    /**
     * <code>optional int32 flight_number = 1;</code>
     */
    int getFlightNumber();

    /**
     * <code>optional int64 start_timestamp = 2;</code>
     *
     * <pre>
     * Unix timestamp of flight.
     * </pre>
     */
    boolean hasStartTimestamp();
    /**
     * <code>optional int64 start_timestamp = 2;</code>
     *
     * <pre>
     * Unix timestamp of flight.
     * </pre>
     */
    long getStartTimestamp();

    /**
     * <code>optional int32 recording_interval_secs = 3;</code>
     */
    boolean hasRecordingIntervalSecs();
    /**
     * <code>optional int32 recording_interval_secs = 3;</code>
     */
    int getRecordingIntervalSecs();

    /**
     * <code>optional .edmtools.Sensors sensors = 4;</code>
     */
    boolean hasSensors();
    /**
     * <code>optional .edmtools.Sensors sensors = 4;</code>
     */
    edmtools.Proto.Sensors getSensors();
    /**
     * <code>optional .edmtools.Sensors sensors = 4;</code>
     */
    edmtools.Proto.SensorsOrBuilder getSensorsOrBuilder();

    /**
     * <code>repeated .edmtools.DataRecord data = 5;</code>
     *
     * <pre>
     * The beginning DataRecord represents the sensor state at
     * start_timestamp; each subsequent record represents the
     * sensor state recording_interval_secs later (except see Mark).
     * </pre>
     */
    java.util.List<edmtools.Proto.DataRecord> 
        getDataList();
    /**
     * <code>repeated .edmtools.DataRecord data = 5;</code>
     *
     * <pre>
     * The beginning DataRecord represents the sensor state at
     * start_timestamp; each subsequent record represents the
     * sensor state recording_interval_secs later (except see Mark).
     * </pre>
     */
    edmtools.Proto.DataRecord getData(int index);
    /**
     * <code>repeated .edmtools.DataRecord data = 5;</code>
     *
     * <pre>
     * The beginning DataRecord represents the sensor state at
     * start_timestamp; each subsequent record represents the
     * sensor state recording_interval_secs later (except see Mark).
     * </pre>
     */
    int getDataCount();
    /**
     * <code>repeated .edmtools.DataRecord data = 5;</code>
     *
     * <pre>
     * The beginning DataRecord represents the sensor state at
     * start_timestamp; each subsequent record represents the
     * sensor state recording_interval_secs later (except see Mark).
     * </pre>
     */
    java.util.List<? extends edmtools.Proto.DataRecordOrBuilder> 
        getDataOrBuilderList();
    /**
     * <code>repeated .edmtools.DataRecord data = 5;</code>
     *
     * <pre>
     * The beginning DataRecord represents the sensor state at
     * start_timestamp; each subsequent record represents the
     * sensor state recording_interval_secs later (except see Mark).
     * </pre>
     */
    edmtools.Proto.DataRecordOrBuilder getDataOrBuilder(
        int index);

    /**
     * <code>optional int32 header_length = 6;</code>
     *
     * <pre>
     * Length of the flight header, in bytes, in the original JPI file.
     * </pre>
     */
    boolean hasHeaderLength();
    /**
     * <code>optional int32 header_length = 6;</code>
     *
     * <pre>
     * Length of the flight header, in bytes, in the original JPI file.
     * </pre>
     */
    int getHeaderLength();

    /**
     * <code>optional int32 data_length = 7;</code>
     *
     * <pre>
     * Length of data record data, in bytes, in the original JPI file.
     * This does not include header_length.
     * (header_length + data_length) / 2 = FlightMetadata.flight_data_length_words.
     * Note: this is the actual length in bytes (records are not padded to 
     * word boundaries). 
     * </pre>
     */
    boolean hasDataLength();
    /**
     * <code>optional int32 data_length = 7;</code>
     *
     * <pre>
     * Length of data record data, in bytes, in the original JPI file.
     * This does not include header_length.
     * (header_length + data_length) / 2 = FlightMetadata.flight_data_length_words.
     * Note: this is the actual length in bytes (records are not padded to 
     * word boundaries). 
     * </pre>
     */
    int getDataLength();

    /**
     * <code>repeated string parse_warning = 8;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getParseWarningList();
    /**
     * <code>repeated string parse_warning = 8;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    int getParseWarningCount();
    /**
     * <code>repeated string parse_warning = 8;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    java.lang.String getParseWarning(int index);
    /**
     * <code>repeated string parse_warning = 8;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    com.google.protobuf.ByteString
        getParseWarningBytes(int index);
  }
  /**
   * Protobuf type {@code edmtools.Flight}
   *
   * <pre>
   * Primary message for each flight in the binary data.
   * </pre>
   */
  public static final class Flight extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:edmtools.Flight)
      FlightOrBuilder {
    // Use Flight.newBuilder() to construct.
    private Flight(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Flight(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Flight defaultInstance;
    public static Flight getDefaultInstance() {
      return defaultInstance;
    }

    public Flight getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Flight(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              flightNumber_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              startTimestamp_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              recordingIntervalSecs_ = input.readInt32();
              break;
            }
            case 34: {
              edmtools.Proto.Sensors.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = sensors_.toBuilder();
              }
              sensors_ = input.readMessage(edmtools.Proto.Sensors.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sensors_);
                sensors_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                data_ = new java.util.ArrayList<edmtools.Proto.DataRecord>();
                mutable_bitField0_ |= 0x00000010;
              }
              data_.add(input.readMessage(edmtools.Proto.DataRecord.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              headerLength_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              dataLength_ = input.readInt32();
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                parseWarning_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000080;
              }
              parseWarning_.add(bs);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          parseWarning_ = parseWarning_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edmtools.Proto.internal_static_edmtools_Flight_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edmtools.Proto.internal_static_edmtools_Flight_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edmtools.Proto.Flight.class, edmtools.Proto.Flight.Builder.class);
    }

    public static com.google.protobuf.Parser<Flight> PARSER =
        new com.google.protobuf.AbstractParser<Flight>() {
      public Flight parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Flight(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Flight> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FLIGHT_NUMBER_FIELD_NUMBER = 1;
    private int flightNumber_;
    /**
     * <code>optional int32 flight_number = 1;</code>
     */
    public boolean hasFlightNumber() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flight_number = 1;</code>
     */
    public int getFlightNumber() {
      return flightNumber_;
    }

    public static final int START_TIMESTAMP_FIELD_NUMBER = 2;
    private long startTimestamp_;
    /**
     * <code>optional int64 start_timestamp = 2;</code>
     *
     * <pre>
     * Unix timestamp of flight.
     * </pre>
     */
    public boolean hasStartTimestamp() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 start_timestamp = 2;</code>
     *
     * <pre>
     * Unix timestamp of flight.
     * </pre>
     */
    public long getStartTimestamp() {
      return startTimestamp_;
    }

    public static final int RECORDING_INTERVAL_SECS_FIELD_NUMBER = 3;
    private int recordingIntervalSecs_;
    /**
     * <code>optional int32 recording_interval_secs = 3;</code>
     */
    public boolean hasRecordingIntervalSecs() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 recording_interval_secs = 3;</code>
     */
    public int getRecordingIntervalSecs() {
      return recordingIntervalSecs_;
    }

    public static final int SENSORS_FIELD_NUMBER = 4;
    private edmtools.Proto.Sensors sensors_;
    /**
     * <code>optional .edmtools.Sensors sensors = 4;</code>
     */
    public boolean hasSensors() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .edmtools.Sensors sensors = 4;</code>
     */
    public edmtools.Proto.Sensors getSensors() {
      return sensors_;
    }
    /**
     * <code>optional .edmtools.Sensors sensors = 4;</code>
     */
    public edmtools.Proto.SensorsOrBuilder getSensorsOrBuilder() {
      return sensors_;
    }

    public static final int DATA_FIELD_NUMBER = 5;
    private java.util.List<edmtools.Proto.DataRecord> data_;
    /**
     * <code>repeated .edmtools.DataRecord data = 5;</code>
     *
     * <pre>
     * The beginning DataRecord represents the sensor state at
     * start_timestamp; each subsequent record represents the
     * sensor state recording_interval_secs later (except see Mark).
     * </pre>
     */
    public java.util.List<edmtools.Proto.DataRecord> getDataList() {
      return data_;
    }
    /**
     * <code>repeated .edmtools.DataRecord data = 5;</code>
     *
     * <pre>
     * The beginning DataRecord represents the sensor state at
     * start_timestamp; each subsequent record represents the
     * sensor state recording_interval_secs later (except see Mark).
     * </pre>
     */
    public java.util.List<? extends edmtools.Proto.DataRecordOrBuilder> 
        getDataOrBuilderList() {
      return data_;
    }
    /**
     * <code>repeated .edmtools.DataRecord data = 5;</code>
     *
     * <pre>
     * The beginning DataRecord represents the sensor state at
     * start_timestamp; each subsequent record represents the
     * sensor state recording_interval_secs later (except see Mark).
     * </pre>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated .edmtools.DataRecord data = 5;</code>
     *
     * <pre>
     * The beginning DataRecord represents the sensor state at
     * start_timestamp; each subsequent record represents the
     * sensor state recording_interval_secs later (except see Mark).
     * </pre>
     */
    public edmtools.Proto.DataRecord getData(int index) {
      return data_.get(index);
    }
    /**
     * <code>repeated .edmtools.DataRecord data = 5;</code>
     *
     * <pre>
     * The beginning DataRecord represents the sensor state at
     * start_timestamp; each subsequent record represents the
     * sensor state recording_interval_secs later (except see Mark).
     * </pre>
     */
    public edmtools.Proto.DataRecordOrBuilder getDataOrBuilder(
        int index) {
      return data_.get(index);
    }

    public static final int HEADER_LENGTH_FIELD_NUMBER = 6;
    private int headerLength_;
    /**
     * <code>optional int32 header_length = 6;</code>
     *
     * <pre>
     * Length of the flight header, in bytes, in the original JPI file.
     * </pre>
     */
    public boolean hasHeaderLength() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 header_length = 6;</code>
     *
     * <pre>
     * Length of the flight header, in bytes, in the original JPI file.
     * </pre>
     */
    public int getHeaderLength() {
      return headerLength_;
    }

    public static final int DATA_LENGTH_FIELD_NUMBER = 7;
    private int dataLength_;
    /**
     * <code>optional int32 data_length = 7;</code>
     *
     * <pre>
     * Length of data record data, in bytes, in the original JPI file.
     * This does not include header_length.
     * (header_length + data_length) / 2 = FlightMetadata.flight_data_length_words.
     * Note: this is the actual length in bytes (records are not padded to 
     * word boundaries). 
     * </pre>
     */
    public boolean hasDataLength() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 data_length = 7;</code>
     *
     * <pre>
     * Length of data record data, in bytes, in the original JPI file.
     * This does not include header_length.
     * (header_length + data_length) / 2 = FlightMetadata.flight_data_length_words.
     * Note: this is the actual length in bytes (records are not padded to 
     * word boundaries). 
     * </pre>
     */
    public int getDataLength() {
      return dataLength_;
    }

    public static final int PARSE_WARNING_FIELD_NUMBER = 8;
    private com.google.protobuf.LazyStringList parseWarning_;
    /**
     * <code>repeated string parse_warning = 8;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getParseWarningList() {
      return parseWarning_;
    }
    /**
     * <code>repeated string parse_warning = 8;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public int getParseWarningCount() {
      return parseWarning_.size();
    }
    /**
     * <code>repeated string parse_warning = 8;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public java.lang.String getParseWarning(int index) {
      return parseWarning_.get(index);
    }
    /**
     * <code>repeated string parse_warning = 8;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getParseWarningBytes(int index) {
      return parseWarning_.getByteString(index);
    }

    private void initFields() {
      flightNumber_ = 0;
      startTimestamp_ = 0L;
      recordingIntervalSecs_ = 0;
      sensors_ = edmtools.Proto.Sensors.getDefaultInstance();
      data_ = java.util.Collections.emptyList();
      headerLength_ = 0;
      dataLength_ = 0;
      parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, flightNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, startTimestamp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, recordingIntervalSecs_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, sensors_);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeMessage(5, data_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, headerLength_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, dataLength_);
      }
      for (int i = 0; i < parseWarning_.size(); i++) {
        output.writeBytes(8, parseWarning_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, flightNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, startTimestamp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, recordingIntervalSecs_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, sensors_);
      }
      for (int i = 0; i < data_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, data_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, headerLength_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, dataLength_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < parseWarning_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(parseWarning_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getParseWarningList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edmtools.Proto.Flight parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.Flight parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.Flight parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.Flight parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.Flight parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.Flight parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.Flight parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edmtools.Proto.Flight parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.Flight parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.Flight parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edmtools.Proto.Flight prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edmtools.Flight}
     *
     * <pre>
     * Primary message for each flight in the binary data.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edmtools.Flight)
        edmtools.Proto.FlightOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edmtools.Proto.internal_static_edmtools_Flight_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edmtools.Proto.internal_static_edmtools_Flight_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edmtools.Proto.Flight.class, edmtools.Proto.Flight.Builder.class);
      }

      // Construct using edmtools.Proto.Flight.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSensorsFieldBuilder();
          getDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flightNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        startTimestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        recordingIntervalSecs_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (sensorsBuilder_ == null) {
          sensors_ = edmtools.Proto.Sensors.getDefaultInstance();
        } else {
          sensorsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          dataBuilder_.clear();
        }
        headerLength_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        dataLength_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edmtools.Proto.internal_static_edmtools_Flight_descriptor;
      }

      public edmtools.Proto.Flight getDefaultInstanceForType() {
        return edmtools.Proto.Flight.getDefaultInstance();
      }

      public edmtools.Proto.Flight build() {
        edmtools.Proto.Flight result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edmtools.Proto.Flight buildPartial() {
        edmtools.Proto.Flight result = new edmtools.Proto.Flight(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flightNumber_ = flightNumber_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.startTimestamp_ = startTimestamp_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.recordingIntervalSecs_ = recordingIntervalSecs_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (sensorsBuilder_ == null) {
          result.sensors_ = sensors_;
        } else {
          result.sensors_ = sensorsBuilder_.build();
        }
        if (dataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            data_ = java.util.Collections.unmodifiableList(data_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.data_ = data_;
        } else {
          result.data_ = dataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.headerLength_ = headerLength_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.dataLength_ = dataLength_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          parseWarning_ = parseWarning_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.parseWarning_ = parseWarning_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edmtools.Proto.Flight) {
          return mergeFrom((edmtools.Proto.Flight)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edmtools.Proto.Flight other) {
        if (other == edmtools.Proto.Flight.getDefaultInstance()) return this;
        if (other.hasFlightNumber()) {
          setFlightNumber(other.getFlightNumber());
        }
        if (other.hasStartTimestamp()) {
          setStartTimestamp(other.getStartTimestamp());
        }
        if (other.hasRecordingIntervalSecs()) {
          setRecordingIntervalSecs(other.getRecordingIntervalSecs());
        }
        if (other.hasSensors()) {
          mergeSensors(other.getSensors());
        }
        if (dataBuilder_ == null) {
          if (!other.data_.isEmpty()) {
            if (data_.isEmpty()) {
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureDataIsMutable();
              data_.addAll(other.data_);
            }
            onChanged();
          }
        } else {
          if (!other.data_.isEmpty()) {
            if (dataBuilder_.isEmpty()) {
              dataBuilder_.dispose();
              dataBuilder_ = null;
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000010);
              dataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDataFieldBuilder() : null;
            } else {
              dataBuilder_.addAllMessages(other.data_);
            }
          }
        }
        if (other.hasHeaderLength()) {
          setHeaderLength(other.getHeaderLength());
        }
        if (other.hasDataLength()) {
          setDataLength(other.getDataLength());
        }
        if (!other.parseWarning_.isEmpty()) {
          if (parseWarning_.isEmpty()) {
            parseWarning_ = other.parseWarning_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureParseWarningIsMutable();
            parseWarning_.addAll(other.parseWarning_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edmtools.Proto.Flight parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edmtools.Proto.Flight) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flightNumber_ ;
      /**
       * <code>optional int32 flight_number = 1;</code>
       */
      public boolean hasFlightNumber() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flight_number = 1;</code>
       */
      public int getFlightNumber() {
        return flightNumber_;
      }
      /**
       * <code>optional int32 flight_number = 1;</code>
       */
      public Builder setFlightNumber(int value) {
        bitField0_ |= 0x00000001;
        flightNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flight_number = 1;</code>
       */
      public Builder clearFlightNumber() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flightNumber_ = 0;
        onChanged();
        return this;
      }

      private long startTimestamp_ ;
      /**
       * <code>optional int64 start_timestamp = 2;</code>
       *
       * <pre>
       * Unix timestamp of flight.
       * </pre>
       */
      public boolean hasStartTimestamp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 start_timestamp = 2;</code>
       *
       * <pre>
       * Unix timestamp of flight.
       * </pre>
       */
      public long getStartTimestamp() {
        return startTimestamp_;
      }
      /**
       * <code>optional int64 start_timestamp = 2;</code>
       *
       * <pre>
       * Unix timestamp of flight.
       * </pre>
       */
      public Builder setStartTimestamp(long value) {
        bitField0_ |= 0x00000002;
        startTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 start_timestamp = 2;</code>
       *
       * <pre>
       * Unix timestamp of flight.
       * </pre>
       */
      public Builder clearStartTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        startTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int recordingIntervalSecs_ ;
      /**
       * <code>optional int32 recording_interval_secs = 3;</code>
       */
      public boolean hasRecordingIntervalSecs() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 recording_interval_secs = 3;</code>
       */
      public int getRecordingIntervalSecs() {
        return recordingIntervalSecs_;
      }
      /**
       * <code>optional int32 recording_interval_secs = 3;</code>
       */
      public Builder setRecordingIntervalSecs(int value) {
        bitField0_ |= 0x00000004;
        recordingIntervalSecs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 recording_interval_secs = 3;</code>
       */
      public Builder clearRecordingIntervalSecs() {
        bitField0_ = (bitField0_ & ~0x00000004);
        recordingIntervalSecs_ = 0;
        onChanged();
        return this;
      }

      private edmtools.Proto.Sensors sensors_ = edmtools.Proto.Sensors.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.Sensors, edmtools.Proto.Sensors.Builder, edmtools.Proto.SensorsOrBuilder> sensorsBuilder_;
      /**
       * <code>optional .edmtools.Sensors sensors = 4;</code>
       */
      public boolean hasSensors() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 4;</code>
       */
      public edmtools.Proto.Sensors getSensors() {
        if (sensorsBuilder_ == null) {
          return sensors_;
        } else {
          return sensorsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 4;</code>
       */
      public Builder setSensors(edmtools.Proto.Sensors value) {
        if (sensorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sensors_ = value;
          onChanged();
        } else {
          sensorsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 4;</code>
       */
      public Builder setSensors(
          edmtools.Proto.Sensors.Builder builderForValue) {
        if (sensorsBuilder_ == null) {
          sensors_ = builderForValue.build();
          onChanged();
        } else {
          sensorsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 4;</code>
       */
      public Builder mergeSensors(edmtools.Proto.Sensors value) {
        if (sensorsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              sensors_ != edmtools.Proto.Sensors.getDefaultInstance()) {
            sensors_ =
              edmtools.Proto.Sensors.newBuilder(sensors_).mergeFrom(value).buildPartial();
          } else {
            sensors_ = value;
          }
          onChanged();
        } else {
          sensorsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 4;</code>
       */
      public Builder clearSensors() {
        if (sensorsBuilder_ == null) {
          sensors_ = edmtools.Proto.Sensors.getDefaultInstance();
          onChanged();
        } else {
          sensorsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 4;</code>
       */
      public edmtools.Proto.Sensors.Builder getSensorsBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getSensorsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 4;</code>
       */
      public edmtools.Proto.SensorsOrBuilder getSensorsOrBuilder() {
        if (sensorsBuilder_ != null) {
          return sensorsBuilder_.getMessageOrBuilder();
        } else {
          return sensors_;
        }
      }
      /**
       * <code>optional .edmtools.Sensors sensors = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.Sensors, edmtools.Proto.Sensors.Builder, edmtools.Proto.SensorsOrBuilder> 
          getSensorsFieldBuilder() {
        if (sensorsBuilder_ == null) {
          sensorsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edmtools.Proto.Sensors, edmtools.Proto.Sensors.Builder, edmtools.Proto.SensorsOrBuilder>(
                  getSensors(),
                  getParentForChildren(),
                  isClean());
          sensors_ = null;
        }
        return sensorsBuilder_;
      }

      private java.util.List<edmtools.Proto.DataRecord> data_ =
        java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          data_ = new java.util.ArrayList<edmtools.Proto.DataRecord>(data_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edmtools.Proto.DataRecord, edmtools.Proto.DataRecord.Builder, edmtools.Proto.DataRecordOrBuilder> dataBuilder_;

      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public java.util.List<edmtools.Proto.DataRecord> getDataList() {
        if (dataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(data_);
        } else {
          return dataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public int getDataCount() {
        if (dataBuilder_ == null) {
          return data_.size();
        } else {
          return dataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public edmtools.Proto.DataRecord getData(int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);
        } else {
          return dataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public Builder setData(
          int index, edmtools.Proto.DataRecord value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.set(index, value);
          onChanged();
        } else {
          dataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public Builder setData(
          int index, edmtools.Proto.DataRecord.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public Builder addData(edmtools.Proto.DataRecord value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(value);
          onChanged();
        } else {
          dataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public Builder addData(
          int index, edmtools.Proto.DataRecord value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(index, value);
          onChanged();
        } else {
          dataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public Builder addData(
          edmtools.Proto.DataRecord.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public Builder addData(
          int index, edmtools.Proto.DataRecord.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends edmtools.Proto.DataRecord> values) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, data_);
          onChanged();
        } else {
          dataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public Builder clearData() {
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          dataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public Builder removeData(int index) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.remove(index);
          onChanged();
        } else {
          dataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public edmtools.Proto.DataRecord.Builder getDataBuilder(
          int index) {
        return getDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public edmtools.Proto.DataRecordOrBuilder getDataOrBuilder(
          int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);  } else {
          return dataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public java.util.List<? extends edmtools.Proto.DataRecordOrBuilder> 
           getDataOrBuilderList() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(data_);
        }
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public edmtools.Proto.DataRecord.Builder addDataBuilder() {
        return getDataFieldBuilder().addBuilder(
            edmtools.Proto.DataRecord.getDefaultInstance());
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public edmtools.Proto.DataRecord.Builder addDataBuilder(
          int index) {
        return getDataFieldBuilder().addBuilder(
            index, edmtools.Proto.DataRecord.getDefaultInstance());
      }
      /**
       * <code>repeated .edmtools.DataRecord data = 5;</code>
       *
       * <pre>
       * The beginning DataRecord represents the sensor state at
       * start_timestamp; each subsequent record represents the
       * sensor state recording_interval_secs later (except see Mark).
       * </pre>
       */
      public java.util.List<edmtools.Proto.DataRecord.Builder> 
           getDataBuilderList() {
        return getDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edmtools.Proto.DataRecord, edmtools.Proto.DataRecord.Builder, edmtools.Proto.DataRecordOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edmtools.Proto.DataRecord, edmtools.Proto.DataRecord.Builder, edmtools.Proto.DataRecordOrBuilder>(
                  data_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }

      private int headerLength_ ;
      /**
       * <code>optional int32 header_length = 6;</code>
       *
       * <pre>
       * Length of the flight header, in bytes, in the original JPI file.
       * </pre>
       */
      public boolean hasHeaderLength() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 header_length = 6;</code>
       *
       * <pre>
       * Length of the flight header, in bytes, in the original JPI file.
       * </pre>
       */
      public int getHeaderLength() {
        return headerLength_;
      }
      /**
       * <code>optional int32 header_length = 6;</code>
       *
       * <pre>
       * Length of the flight header, in bytes, in the original JPI file.
       * </pre>
       */
      public Builder setHeaderLength(int value) {
        bitField0_ |= 0x00000020;
        headerLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 header_length = 6;</code>
       *
       * <pre>
       * Length of the flight header, in bytes, in the original JPI file.
       * </pre>
       */
      public Builder clearHeaderLength() {
        bitField0_ = (bitField0_ & ~0x00000020);
        headerLength_ = 0;
        onChanged();
        return this;
      }

      private int dataLength_ ;
      /**
       * <code>optional int32 data_length = 7;</code>
       *
       * <pre>
       * Length of data record data, in bytes, in the original JPI file.
       * This does not include header_length.
       * (header_length + data_length) / 2 = FlightMetadata.flight_data_length_words.
       * Note: this is the actual length in bytes (records are not padded to 
       * word boundaries). 
       * </pre>
       */
      public boolean hasDataLength() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 data_length = 7;</code>
       *
       * <pre>
       * Length of data record data, in bytes, in the original JPI file.
       * This does not include header_length.
       * (header_length + data_length) / 2 = FlightMetadata.flight_data_length_words.
       * Note: this is the actual length in bytes (records are not padded to 
       * word boundaries). 
       * </pre>
       */
      public int getDataLength() {
        return dataLength_;
      }
      /**
       * <code>optional int32 data_length = 7;</code>
       *
       * <pre>
       * Length of data record data, in bytes, in the original JPI file.
       * This does not include header_length.
       * (header_length + data_length) / 2 = FlightMetadata.flight_data_length_words.
       * Note: this is the actual length in bytes (records are not padded to 
       * word boundaries). 
       * </pre>
       */
      public Builder setDataLength(int value) {
        bitField0_ |= 0x00000040;
        dataLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 data_length = 7;</code>
       *
       * <pre>
       * Length of data record data, in bytes, in the original JPI file.
       * This does not include header_length.
       * (header_length + data_length) / 2 = FlightMetadata.flight_data_length_words.
       * Note: this is the actual length in bytes (records are not padded to 
       * word boundaries). 
       * </pre>
       */
      public Builder clearDataLength() {
        bitField0_ = (bitField0_ & ~0x00000040);
        dataLength_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureParseWarningIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          parseWarning_ = new com.google.protobuf.LazyStringArrayList(parseWarning_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated string parse_warning = 8;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getParseWarningList() {
        return parseWarning_.getUnmodifiableView();
      }
      /**
       * <code>repeated string parse_warning = 8;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public int getParseWarningCount() {
        return parseWarning_.size();
      }
      /**
       * <code>repeated string parse_warning = 8;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public java.lang.String getParseWarning(int index) {
        return parseWarning_.get(index);
      }
      /**
       * <code>repeated string parse_warning = 8;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getParseWarningBytes(int index) {
        return parseWarning_.getByteString(index);
      }
      /**
       * <code>repeated string parse_warning = 8;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder setParseWarning(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParseWarningIsMutable();
        parseWarning_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 8;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder addParseWarning(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParseWarningIsMutable();
        parseWarning_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 8;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder addAllParseWarning(
          java.lang.Iterable<java.lang.String> values) {
        ensureParseWarningIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, parseWarning_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 8;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder clearParseWarning() {
        parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 8;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder addParseWarningBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParseWarningIsMutable();
        parseWarning_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:edmtools.Flight)
    }

    static {
      defaultInstance = new Flight(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:edmtools.Flight)
  }

  public interface DataRecordOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edmtools.DataRecord)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated float voltage = 1;</code>
     */
    java.util.List<java.lang.Float> getVoltageList();
    /**
     * <code>repeated float voltage = 1;</code>
     */
    int getVoltageCount();
    /**
     * <code>repeated float voltage = 1;</code>
     */
    float getVoltage(int index);

    /**
     * <code>repeated int32 amperage = 2;</code>
     */
    java.util.List<java.lang.Integer> getAmperageList();
    /**
     * <code>repeated int32 amperage = 2;</code>
     */
    int getAmperageCount();
    /**
     * <code>repeated int32 amperage = 2;</code>
     */
    int getAmperage(int index);

    /**
     * <code>optional int32 outside_air_temperature = 3;</code>
     */
    boolean hasOutsideAirTemperature();
    /**
     * <code>optional int32 outside_air_temperature = 3;</code>
     */
    int getOutsideAirTemperature();

    /**
     * <code>optional .edmtools.DataRecord.Mark mark = 4;</code>
     */
    boolean hasMark();
    /**
     * <code>optional .edmtools.DataRecord.Mark mark = 4;</code>
     */
    edmtools.Proto.DataRecord.Mark getMark();

    /**
     * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
     *
     * <pre>
     * First record is left engine.
     * </pre>
     */
    java.util.List<edmtools.Proto.EngineDataRecord> 
        getEngineList();
    /**
     * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
     *
     * <pre>
     * First record is left engine.
     * </pre>
     */
    edmtools.Proto.EngineDataRecord getEngine(int index);
    /**
     * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
     *
     * <pre>
     * First record is left engine.
     * </pre>
     */
    int getEngineCount();
    /**
     * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
     *
     * <pre>
     * First record is left engine.
     * </pre>
     */
    java.util.List<? extends edmtools.Proto.EngineDataRecordOrBuilder> 
        getEngineOrBuilderList();
    /**
     * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
     *
     * <pre>
     * First record is left engine.
     * </pre>
     */
    edmtools.Proto.EngineDataRecordOrBuilder getEngineOrBuilder(
        int index);

    /**
     * <code>repeated string parse_warning = 6;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getParseWarningList();
    /**
     * <code>repeated string parse_warning = 6;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    int getParseWarningCount();
    /**
     * <code>repeated string parse_warning = 6;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    java.lang.String getParseWarning(int index);
    /**
     * <code>repeated string parse_warning = 6;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    com.google.protobuf.ByteString
        getParseWarningBytes(int index);
  }
  /**
   * Protobuf type {@code edmtools.DataRecord}
   */
  public static final class DataRecord extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:edmtools.DataRecord)
      DataRecordOrBuilder {
    // Use DataRecord.newBuilder() to construct.
    private DataRecord(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DataRecord(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DataRecord defaultInstance;
    public static DataRecord getDefaultInstance() {
      return defaultInstance;
    }

    public DataRecord getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DataRecord(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                voltage_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000001;
              }
              voltage_.add(input.readFloat());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                voltage_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                voltage_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                amperage_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              amperage_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                amperage_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                amperage_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              outsideAirTemperature_ = input.readInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              edmtools.Proto.DataRecord.Mark value = edmtools.Proto.DataRecord.Mark.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                mark_ = value;
              }
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                engine_ = new java.util.ArrayList<edmtools.Proto.EngineDataRecord>();
                mutable_bitField0_ |= 0x00000010;
              }
              engine_.add(input.readMessage(edmtools.Proto.EngineDataRecord.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                parseWarning_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000020;
              }
              parseWarning_.add(bs);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          voltage_ = java.util.Collections.unmodifiableList(voltage_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          amperage_ = java.util.Collections.unmodifiableList(amperage_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          engine_ = java.util.Collections.unmodifiableList(engine_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          parseWarning_ = parseWarning_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edmtools.Proto.internal_static_edmtools_DataRecord_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edmtools.Proto.internal_static_edmtools_DataRecord_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edmtools.Proto.DataRecord.class, edmtools.Proto.DataRecord.Builder.class);
    }

    public static com.google.protobuf.Parser<DataRecord> PARSER =
        new com.google.protobuf.AbstractParser<DataRecord>() {
      public DataRecord parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DataRecord(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DataRecord> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code edmtools.DataRecord.Mark}
     *
     * <pre>
     * Note: during lean- or rich-finding, the interval of records
     * is one second, not recording_interval_secs.
     * </pre>
     */
    public enum Mark
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NOT_MARKED = 0;</code>
       */
      NOT_MARKED(0, 0),
      /**
       * <code>MARKED = 1;</code>
       */
      MARKED(1, 1),
      /**
       * <code>RICH_START = 2;</code>
       */
      RICH_START(2, 2),
      /**
       * <code>RICH_END = 3;</code>
       */
      RICH_END(3, 3),
      /**
       * <code>LEAN_START = 4;</code>
       */
      LEAN_START(4, 4),
      /**
       * <code>LEAN_END = 5;</code>
       */
      LEAN_END(5, 5),
      ;

      /**
       * <code>NOT_MARKED = 0;</code>
       */
      public static final int NOT_MARKED_VALUE = 0;
      /**
       * <code>MARKED = 1;</code>
       */
      public static final int MARKED_VALUE = 1;
      /**
       * <code>RICH_START = 2;</code>
       */
      public static final int RICH_START_VALUE = 2;
      /**
       * <code>RICH_END = 3;</code>
       */
      public static final int RICH_END_VALUE = 3;
      /**
       * <code>LEAN_START = 4;</code>
       */
      public static final int LEAN_START_VALUE = 4;
      /**
       * <code>LEAN_END = 5;</code>
       */
      public static final int LEAN_END_VALUE = 5;


      public final int getNumber() { return value; }

      public static Mark valueOf(int value) {
        switch (value) {
          case 0: return NOT_MARKED;
          case 1: return MARKED;
          case 2: return RICH_START;
          case 3: return RICH_END;
          case 4: return LEAN_START;
          case 5: return LEAN_END;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Mark>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Mark>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Mark>() {
              public Mark findValueByNumber(int number) {
                return Mark.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return edmtools.Proto.DataRecord.getDescriptor().getEnumTypes().get(0);
      }

      private static final Mark[] VALUES = values();

      public static Mark valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Mark(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:edmtools.DataRecord.Mark)
    }

    private int bitField0_;
    public static final int VOLTAGE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Float> voltage_;
    /**
     * <code>repeated float voltage = 1;</code>
     */
    public java.util.List<java.lang.Float>
        getVoltageList() {
      return voltage_;
    }
    /**
     * <code>repeated float voltage = 1;</code>
     */
    public int getVoltageCount() {
      return voltage_.size();
    }
    /**
     * <code>repeated float voltage = 1;</code>
     */
    public float getVoltage(int index) {
      return voltage_.get(index);
    }

    public static final int AMPERAGE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> amperage_;
    /**
     * <code>repeated int32 amperage = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getAmperageList() {
      return amperage_;
    }
    /**
     * <code>repeated int32 amperage = 2;</code>
     */
    public int getAmperageCount() {
      return amperage_.size();
    }
    /**
     * <code>repeated int32 amperage = 2;</code>
     */
    public int getAmperage(int index) {
      return amperage_.get(index);
    }

    public static final int OUTSIDE_AIR_TEMPERATURE_FIELD_NUMBER = 3;
    private int outsideAirTemperature_;
    /**
     * <code>optional int32 outside_air_temperature = 3;</code>
     */
    public boolean hasOutsideAirTemperature() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 outside_air_temperature = 3;</code>
     */
    public int getOutsideAirTemperature() {
      return outsideAirTemperature_;
    }

    public static final int MARK_FIELD_NUMBER = 4;
    private edmtools.Proto.DataRecord.Mark mark_;
    /**
     * <code>optional .edmtools.DataRecord.Mark mark = 4;</code>
     */
    public boolean hasMark() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .edmtools.DataRecord.Mark mark = 4;</code>
     */
    public edmtools.Proto.DataRecord.Mark getMark() {
      return mark_;
    }

    public static final int ENGINE_FIELD_NUMBER = 5;
    private java.util.List<edmtools.Proto.EngineDataRecord> engine_;
    /**
     * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
     *
     * <pre>
     * First record is left engine.
     * </pre>
     */
    public java.util.List<edmtools.Proto.EngineDataRecord> getEngineList() {
      return engine_;
    }
    /**
     * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
     *
     * <pre>
     * First record is left engine.
     * </pre>
     */
    public java.util.List<? extends edmtools.Proto.EngineDataRecordOrBuilder> 
        getEngineOrBuilderList() {
      return engine_;
    }
    /**
     * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
     *
     * <pre>
     * First record is left engine.
     * </pre>
     */
    public int getEngineCount() {
      return engine_.size();
    }
    /**
     * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
     *
     * <pre>
     * First record is left engine.
     * </pre>
     */
    public edmtools.Proto.EngineDataRecord getEngine(int index) {
      return engine_.get(index);
    }
    /**
     * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
     *
     * <pre>
     * First record is left engine.
     * </pre>
     */
    public edmtools.Proto.EngineDataRecordOrBuilder getEngineOrBuilder(
        int index) {
      return engine_.get(index);
    }

    public static final int PARSE_WARNING_FIELD_NUMBER = 6;
    private com.google.protobuf.LazyStringList parseWarning_;
    /**
     * <code>repeated string parse_warning = 6;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getParseWarningList() {
      return parseWarning_;
    }
    /**
     * <code>repeated string parse_warning = 6;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public int getParseWarningCount() {
      return parseWarning_.size();
    }
    /**
     * <code>repeated string parse_warning = 6;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public java.lang.String getParseWarning(int index) {
      return parseWarning_.get(index);
    }
    /**
     * <code>repeated string parse_warning = 6;</code>
     *
     * <pre>
     * Non-fatal parse warnings.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getParseWarningBytes(int index) {
      return parseWarning_.getByteString(index);
    }

    private void initFields() {
      voltage_ = java.util.Collections.emptyList();
      amperage_ = java.util.Collections.emptyList();
      outsideAirTemperature_ = 0;
      mark_ = edmtools.Proto.DataRecord.Mark.NOT_MARKED;
      engine_ = java.util.Collections.emptyList();
      parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < voltage_.size(); i++) {
        output.writeFloat(1, voltage_.get(i));
      }
      for (int i = 0; i < amperage_.size(); i++) {
        output.writeInt32(2, amperage_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, outsideAirTemperature_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(4, mark_.getNumber());
      }
      for (int i = 0; i < engine_.size(); i++) {
        output.writeMessage(5, engine_.get(i));
      }
      for (int i = 0; i < parseWarning_.size(); i++) {
        output.writeBytes(6, parseWarning_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 4 * getVoltageList().size();
        size += dataSize;
        size += 1 * getVoltageList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < amperage_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(amperage_.get(i));
        }
        size += dataSize;
        size += 1 * getAmperageList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, outsideAirTemperature_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, mark_.getNumber());
      }
      for (int i = 0; i < engine_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, engine_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < parseWarning_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(parseWarning_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getParseWarningList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edmtools.Proto.DataRecord parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.DataRecord parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.DataRecord parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.DataRecord parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.DataRecord parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.DataRecord parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.DataRecord parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edmtools.Proto.DataRecord parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.DataRecord parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.DataRecord parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edmtools.Proto.DataRecord prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edmtools.DataRecord}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edmtools.DataRecord)
        edmtools.Proto.DataRecordOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edmtools.Proto.internal_static_edmtools_DataRecord_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edmtools.Proto.internal_static_edmtools_DataRecord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edmtools.Proto.DataRecord.class, edmtools.Proto.DataRecord.Builder.class);
      }

      // Construct using edmtools.Proto.DataRecord.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getEngineFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        voltage_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        amperage_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        outsideAirTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        mark_ = edmtools.Proto.DataRecord.Mark.NOT_MARKED;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (engineBuilder_ == null) {
          engine_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          engineBuilder_.clear();
        }
        parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edmtools.Proto.internal_static_edmtools_DataRecord_descriptor;
      }

      public edmtools.Proto.DataRecord getDefaultInstanceForType() {
        return edmtools.Proto.DataRecord.getDefaultInstance();
      }

      public edmtools.Proto.DataRecord build() {
        edmtools.Proto.DataRecord result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edmtools.Proto.DataRecord buildPartial() {
        edmtools.Proto.DataRecord result = new edmtools.Proto.DataRecord(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          voltage_ = java.util.Collections.unmodifiableList(voltage_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.voltage_ = voltage_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          amperage_ = java.util.Collections.unmodifiableList(amperage_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.amperage_ = amperage_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outsideAirTemperature_ = outsideAirTemperature_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mark_ = mark_;
        if (engineBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            engine_ = java.util.Collections.unmodifiableList(engine_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.engine_ = engine_;
        } else {
          result.engine_ = engineBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          parseWarning_ = parseWarning_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.parseWarning_ = parseWarning_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edmtools.Proto.DataRecord) {
          return mergeFrom((edmtools.Proto.DataRecord)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edmtools.Proto.DataRecord other) {
        if (other == edmtools.Proto.DataRecord.getDefaultInstance()) return this;
        if (!other.voltage_.isEmpty()) {
          if (voltage_.isEmpty()) {
            voltage_ = other.voltage_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureVoltageIsMutable();
            voltage_.addAll(other.voltage_);
          }
          onChanged();
        }
        if (!other.amperage_.isEmpty()) {
          if (amperage_.isEmpty()) {
            amperage_ = other.amperage_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureAmperageIsMutable();
            amperage_.addAll(other.amperage_);
          }
          onChanged();
        }
        if (other.hasOutsideAirTemperature()) {
          setOutsideAirTemperature(other.getOutsideAirTemperature());
        }
        if (other.hasMark()) {
          setMark(other.getMark());
        }
        if (engineBuilder_ == null) {
          if (!other.engine_.isEmpty()) {
            if (engine_.isEmpty()) {
              engine_ = other.engine_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureEngineIsMutable();
              engine_.addAll(other.engine_);
            }
            onChanged();
          }
        } else {
          if (!other.engine_.isEmpty()) {
            if (engineBuilder_.isEmpty()) {
              engineBuilder_.dispose();
              engineBuilder_ = null;
              engine_ = other.engine_;
              bitField0_ = (bitField0_ & ~0x00000010);
              engineBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEngineFieldBuilder() : null;
            } else {
              engineBuilder_.addAllMessages(other.engine_);
            }
          }
        }
        if (!other.parseWarning_.isEmpty()) {
          if (parseWarning_.isEmpty()) {
            parseWarning_ = other.parseWarning_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureParseWarningIsMutable();
            parseWarning_.addAll(other.parseWarning_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edmtools.Proto.DataRecord parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edmtools.Proto.DataRecord) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Float> voltage_ = java.util.Collections.emptyList();
      private void ensureVoltageIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          voltage_ = new java.util.ArrayList<java.lang.Float>(voltage_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated float voltage = 1;</code>
       */
      public java.util.List<java.lang.Float>
          getVoltageList() {
        return java.util.Collections.unmodifiableList(voltage_);
      }
      /**
       * <code>repeated float voltage = 1;</code>
       */
      public int getVoltageCount() {
        return voltage_.size();
      }
      /**
       * <code>repeated float voltage = 1;</code>
       */
      public float getVoltage(int index) {
        return voltage_.get(index);
      }
      /**
       * <code>repeated float voltage = 1;</code>
       */
      public Builder setVoltage(
          int index, float value) {
        ensureVoltageIsMutable();
        voltage_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float voltage = 1;</code>
       */
      public Builder addVoltage(float value) {
        ensureVoltageIsMutable();
        voltage_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float voltage = 1;</code>
       */
      public Builder addAllVoltage(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureVoltageIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, voltage_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float voltage = 1;</code>
       */
      public Builder clearVoltage() {
        voltage_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> amperage_ = java.util.Collections.emptyList();
      private void ensureAmperageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          amperage_ = new java.util.ArrayList<java.lang.Integer>(amperage_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 amperage = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getAmperageList() {
        return java.util.Collections.unmodifiableList(amperage_);
      }
      /**
       * <code>repeated int32 amperage = 2;</code>
       */
      public int getAmperageCount() {
        return amperage_.size();
      }
      /**
       * <code>repeated int32 amperage = 2;</code>
       */
      public int getAmperage(int index) {
        return amperage_.get(index);
      }
      /**
       * <code>repeated int32 amperage = 2;</code>
       */
      public Builder setAmperage(
          int index, int value) {
        ensureAmperageIsMutable();
        amperage_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 amperage = 2;</code>
       */
      public Builder addAmperage(int value) {
        ensureAmperageIsMutable();
        amperage_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 amperage = 2;</code>
       */
      public Builder addAllAmperage(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAmperageIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, amperage_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 amperage = 2;</code>
       */
      public Builder clearAmperage() {
        amperage_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private int outsideAirTemperature_ ;
      /**
       * <code>optional int32 outside_air_temperature = 3;</code>
       */
      public boolean hasOutsideAirTemperature() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 outside_air_temperature = 3;</code>
       */
      public int getOutsideAirTemperature() {
        return outsideAirTemperature_;
      }
      /**
       * <code>optional int32 outside_air_temperature = 3;</code>
       */
      public Builder setOutsideAirTemperature(int value) {
        bitField0_ |= 0x00000004;
        outsideAirTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 outside_air_temperature = 3;</code>
       */
      public Builder clearOutsideAirTemperature() {
        bitField0_ = (bitField0_ & ~0x00000004);
        outsideAirTemperature_ = 0;
        onChanged();
        return this;
      }

      private edmtools.Proto.DataRecord.Mark mark_ = edmtools.Proto.DataRecord.Mark.NOT_MARKED;
      /**
       * <code>optional .edmtools.DataRecord.Mark mark = 4;</code>
       */
      public boolean hasMark() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .edmtools.DataRecord.Mark mark = 4;</code>
       */
      public edmtools.Proto.DataRecord.Mark getMark() {
        return mark_;
      }
      /**
       * <code>optional .edmtools.DataRecord.Mark mark = 4;</code>
       */
      public Builder setMark(edmtools.Proto.DataRecord.Mark value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        mark_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .edmtools.DataRecord.Mark mark = 4;</code>
       */
      public Builder clearMark() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mark_ = edmtools.Proto.DataRecord.Mark.NOT_MARKED;
        onChanged();
        return this;
      }

      private java.util.List<edmtools.Proto.EngineDataRecord> engine_ =
        java.util.Collections.emptyList();
      private void ensureEngineIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          engine_ = new java.util.ArrayList<edmtools.Proto.EngineDataRecord>(engine_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edmtools.Proto.EngineDataRecord, edmtools.Proto.EngineDataRecord.Builder, edmtools.Proto.EngineDataRecordOrBuilder> engineBuilder_;

      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public java.util.List<edmtools.Proto.EngineDataRecord> getEngineList() {
        if (engineBuilder_ == null) {
          return java.util.Collections.unmodifiableList(engine_);
        } else {
          return engineBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public int getEngineCount() {
        if (engineBuilder_ == null) {
          return engine_.size();
        } else {
          return engineBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public edmtools.Proto.EngineDataRecord getEngine(int index) {
        if (engineBuilder_ == null) {
          return engine_.get(index);
        } else {
          return engineBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public Builder setEngine(
          int index, edmtools.Proto.EngineDataRecord value) {
        if (engineBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEngineIsMutable();
          engine_.set(index, value);
          onChanged();
        } else {
          engineBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public Builder setEngine(
          int index, edmtools.Proto.EngineDataRecord.Builder builderForValue) {
        if (engineBuilder_ == null) {
          ensureEngineIsMutable();
          engine_.set(index, builderForValue.build());
          onChanged();
        } else {
          engineBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public Builder addEngine(edmtools.Proto.EngineDataRecord value) {
        if (engineBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEngineIsMutable();
          engine_.add(value);
          onChanged();
        } else {
          engineBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public Builder addEngine(
          int index, edmtools.Proto.EngineDataRecord value) {
        if (engineBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEngineIsMutable();
          engine_.add(index, value);
          onChanged();
        } else {
          engineBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public Builder addEngine(
          edmtools.Proto.EngineDataRecord.Builder builderForValue) {
        if (engineBuilder_ == null) {
          ensureEngineIsMutable();
          engine_.add(builderForValue.build());
          onChanged();
        } else {
          engineBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public Builder addEngine(
          int index, edmtools.Proto.EngineDataRecord.Builder builderForValue) {
        if (engineBuilder_ == null) {
          ensureEngineIsMutable();
          engine_.add(index, builderForValue.build());
          onChanged();
        } else {
          engineBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public Builder addAllEngine(
          java.lang.Iterable<? extends edmtools.Proto.EngineDataRecord> values) {
        if (engineBuilder_ == null) {
          ensureEngineIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, engine_);
          onChanged();
        } else {
          engineBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public Builder clearEngine() {
        if (engineBuilder_ == null) {
          engine_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          engineBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public Builder removeEngine(int index) {
        if (engineBuilder_ == null) {
          ensureEngineIsMutable();
          engine_.remove(index);
          onChanged();
        } else {
          engineBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public edmtools.Proto.EngineDataRecord.Builder getEngineBuilder(
          int index) {
        return getEngineFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public edmtools.Proto.EngineDataRecordOrBuilder getEngineOrBuilder(
          int index) {
        if (engineBuilder_ == null) {
          return engine_.get(index);  } else {
          return engineBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public java.util.List<? extends edmtools.Proto.EngineDataRecordOrBuilder> 
           getEngineOrBuilderList() {
        if (engineBuilder_ != null) {
          return engineBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(engine_);
        }
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public edmtools.Proto.EngineDataRecord.Builder addEngineBuilder() {
        return getEngineFieldBuilder().addBuilder(
            edmtools.Proto.EngineDataRecord.getDefaultInstance());
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public edmtools.Proto.EngineDataRecord.Builder addEngineBuilder(
          int index) {
        return getEngineFieldBuilder().addBuilder(
            index, edmtools.Proto.EngineDataRecord.getDefaultInstance());
      }
      /**
       * <code>repeated .edmtools.EngineDataRecord engine = 5;</code>
       *
       * <pre>
       * First record is left engine.
       * </pre>
       */
      public java.util.List<edmtools.Proto.EngineDataRecord.Builder> 
           getEngineBuilderList() {
        return getEngineFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edmtools.Proto.EngineDataRecord, edmtools.Proto.EngineDataRecord.Builder, edmtools.Proto.EngineDataRecordOrBuilder> 
          getEngineFieldBuilder() {
        if (engineBuilder_ == null) {
          engineBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edmtools.Proto.EngineDataRecord, edmtools.Proto.EngineDataRecord.Builder, edmtools.Proto.EngineDataRecordOrBuilder>(
                  engine_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          engine_ = null;
        }
        return engineBuilder_;
      }

      private com.google.protobuf.LazyStringList parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureParseWarningIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          parseWarning_ = new com.google.protobuf.LazyStringArrayList(parseWarning_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated string parse_warning = 6;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getParseWarningList() {
        return parseWarning_.getUnmodifiableView();
      }
      /**
       * <code>repeated string parse_warning = 6;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public int getParseWarningCount() {
        return parseWarning_.size();
      }
      /**
       * <code>repeated string parse_warning = 6;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public java.lang.String getParseWarning(int index) {
        return parseWarning_.get(index);
      }
      /**
       * <code>repeated string parse_warning = 6;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getParseWarningBytes(int index) {
        return parseWarning_.getByteString(index);
      }
      /**
       * <code>repeated string parse_warning = 6;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder setParseWarning(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParseWarningIsMutable();
        parseWarning_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 6;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder addParseWarning(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParseWarningIsMutable();
        parseWarning_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 6;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder addAllParseWarning(
          java.lang.Iterable<java.lang.String> values) {
        ensureParseWarningIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, parseWarning_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 6;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder clearParseWarning() {
        parseWarning_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string parse_warning = 6;</code>
       *
       * <pre>
       * Non-fatal parse warnings.
       * </pre>
       */
      public Builder addParseWarningBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParseWarningIsMutable();
        parseWarning_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:edmtools.DataRecord)
    }

    static {
      defaultInstance = new DataRecord(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:edmtools.DataRecord)
  }

  public interface EngineDataRecordOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edmtools.EngineDataRecord)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int32 exhaust_gas_temperature = 1;</code>
     */
    java.util.List<java.lang.Integer> getExhaustGasTemperatureList();
    /**
     * <code>repeated int32 exhaust_gas_temperature = 1;</code>
     */
    int getExhaustGasTemperatureCount();
    /**
     * <code>repeated int32 exhaust_gas_temperature = 1;</code>
     */
    int getExhaustGasTemperature(int index);

    /**
     * <code>optional int32 max_exhaust_gas_temperature_difference = 2;</code>
     */
    boolean hasMaxExhaustGasTemperatureDifference();
    /**
     * <code>optional int32 max_exhaust_gas_temperature_difference = 2;</code>
     */
    int getMaxExhaustGasTemperatureDifference();

    /**
     * <code>repeated int32 turbine_inlet_temperature = 3;</code>
     */
    java.util.List<java.lang.Integer> getTurbineInletTemperatureList();
    /**
     * <code>repeated int32 turbine_inlet_temperature = 3;</code>
     */
    int getTurbineInletTemperatureCount();
    /**
     * <code>repeated int32 turbine_inlet_temperature = 3;</code>
     */
    int getTurbineInletTemperature(int index);

    /**
     * <code>repeated int32 cylinder_head_temperature = 4;</code>
     */
    java.util.List<java.lang.Integer> getCylinderHeadTemperatureList();
    /**
     * <code>repeated int32 cylinder_head_temperature = 4;</code>
     */
    int getCylinderHeadTemperatureCount();
    /**
     * <code>repeated int32 cylinder_head_temperature = 4;</code>
     */
    int getCylinderHeadTemperature(int index);

    /**
     * <code>optional int32 cylinder_head_temperature_cooling_rate = 5;</code>
     *
     * <pre>
     * Degrees per minute.
     * </pre>
     */
    boolean hasCylinderHeadTemperatureCoolingRate();
    /**
     * <code>optional int32 cylinder_head_temperature_cooling_rate = 5;</code>
     *
     * <pre>
     * Degrees per minute.
     * </pre>
     */
    int getCylinderHeadTemperatureCoolingRate();

    /**
     * <code>optional int32 oil_temperature = 6;</code>
     */
    boolean hasOilTemperature();
    /**
     * <code>optional int32 oil_temperature = 6;</code>
     */
    int getOilTemperature();

    /**
     * <code>optional int32 compressor_discharge_temperature = 7;</code>
     */
    boolean hasCompressorDischargeTemperature();
    /**
     * <code>optional int32 compressor_discharge_temperature = 7;</code>
     */
    int getCompressorDischargeTemperature();

    /**
     * <code>optional int32 induction_air_temperature = 8;</code>
     */
    boolean hasInductionAirTemperature();
    /**
     * <code>optional int32 induction_air_temperature = 8;</code>
     */
    int getInductionAirTemperature();

    /**
     * <code>optional int32 interstage_turbine_temperature = 9;</code>
     */
    boolean hasInterstageTurbineTemperature();
    /**
     * <code>optional int32 interstage_turbine_temperature = 9;</code>
     */
    int getInterstageTurbineTemperature();

    /**
     * <code>repeated float fuel_used = 10;</code>
     */
    java.util.List<java.lang.Float> getFuelUsedList();
    /**
     * <code>repeated float fuel_used = 10;</code>
     */
    int getFuelUsedCount();
    /**
     * <code>repeated float fuel_used = 10;</code>
     */
    float getFuelUsed(int index);

    /**
     * <code>repeated float fuel_flow = 11;</code>
     */
    java.util.List<java.lang.Float> getFuelFlowList();
    /**
     * <code>repeated float fuel_flow = 11;</code>
     */
    int getFuelFlowCount();
    /**
     * <code>repeated float fuel_flow = 11;</code>
     */
    float getFuelFlow(int index);

    /**
     * <code>optional float fuel_pressure = 12;</code>
     */
    boolean hasFuelPressure();
    /**
     * <code>optional float fuel_pressure = 12;</code>
     */
    float getFuelPressure();

    /**
     * <code>repeated float fuel_level = 13;</code>
     *
     * <pre>
     * TODO: unsure - verify this is really fuel level.
     * </pre>
     */
    java.util.List<java.lang.Float> getFuelLevelList();
    /**
     * <code>repeated float fuel_level = 13;</code>
     *
     * <pre>
     * TODO: unsure - verify this is really fuel level.
     * </pre>
     */
    int getFuelLevelCount();
    /**
     * <code>repeated float fuel_level = 13;</code>
     *
     * <pre>
     * TODO: unsure - verify this is really fuel level.
     * </pre>
     */
    float getFuelLevel(int index);

    /**
     * <code>optional int32 oil_pressure = 14;</code>
     */
    boolean hasOilPressure();
    /**
     * <code>optional int32 oil_pressure = 14;</code>
     */
    int getOilPressure();

    /**
     * <code>optional float manifold_pressure = 15;</code>
     */
    boolean hasManifoldPressure();
    /**
     * <code>optional float manifold_pressure = 15;</code>
     */
    float getManifoldPressure();

    /**
     * <code>repeated int32 hydraulic_pressure = 16;</code>
     */
    java.util.List<java.lang.Integer> getHydraulicPressureList();
    /**
     * <code>repeated int32 hydraulic_pressure = 16;</code>
     */
    int getHydraulicPressureCount();
    /**
     * <code>repeated int32 hydraulic_pressure = 16;</code>
     */
    int getHydraulicPressure(int index);

    /**
     * <code>optional int32 horsepower = 17;</code>
     */
    boolean hasHorsepower();
    /**
     * <code>optional int32 horsepower = 17;</code>
     */
    int getHorsepower();

    /**
     * <code>optional int32 rpm = 18;</code>
     */
    boolean hasRpm();
    /**
     * <code>optional int32 rpm = 18;</code>
     */
    int getRpm();

    /**
     * <code>optional int32 torque = 19;</code>
     */
    boolean hasTorque();
    /**
     * <code>optional int32 torque = 19;</code>
     */
    int getTorque();

    /**
     * <code>optional float hours = 20;</code>
     */
    boolean hasHours();
    /**
     * <code>optional float hours = 20;</code>
     */
    float getHours();
  }
  /**
   * Protobuf type {@code edmtools.EngineDataRecord}
   */
  public static final class EngineDataRecord extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:edmtools.EngineDataRecord)
      EngineDataRecordOrBuilder {
    // Use EngineDataRecord.newBuilder() to construct.
    private EngineDataRecord(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EngineDataRecord(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EngineDataRecord defaultInstance;
    public static EngineDataRecord getDefaultInstance() {
      return defaultInstance;
    }

    public EngineDataRecord getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EngineDataRecord(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                exhaustGasTemperature_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              exhaustGasTemperature_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                exhaustGasTemperature_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                exhaustGasTemperature_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              maxExhaustGasTemperatureDifference_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                turbineInletTemperature_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              turbineInletTemperature_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                turbineInletTemperature_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                turbineInletTemperature_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cylinderHeadTemperature_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cylinderHeadTemperature_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cylinderHeadTemperature_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cylinderHeadTemperature_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              cylinderHeadTemperatureCoolingRate_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              oilTemperature_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              compressorDischargeTemperature_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000010;
              inductionAirTemperature_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000020;
              interstageTurbineTemperature_ = input.readInt32();
              break;
            }
            case 85: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                fuelUsed_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000200;
              }
              fuelUsed_.add(input.readFloat());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                fuelUsed_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                fuelUsed_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 93: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                fuelFlow_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000400;
              }
              fuelFlow_.add(input.readFloat());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                fuelFlow_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                fuelFlow_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 101: {
              bitField0_ |= 0x00000040;
              fuelPressure_ = input.readFloat();
              break;
            }
            case 109: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                fuelLevel_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00001000;
              }
              fuelLevel_.add(input.readFloat());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                fuelLevel_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                fuelLevel_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              bitField0_ |= 0x00000080;
              oilPressure_ = input.readInt32();
              break;
            }
            case 125: {
              bitField0_ |= 0x00000100;
              manifoldPressure_ = input.readFloat();
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                hydraulicPressure_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              hydraulicPressure_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                hydraulicPressure_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                hydraulicPressure_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              bitField0_ |= 0x00000200;
              horsepower_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00000400;
              rpm_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00000800;
              torque_ = input.readInt32();
              break;
            }
            case 165: {
              bitField0_ |= 0x00001000;
              hours_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          exhaustGasTemperature_ = java.util.Collections.unmodifiableList(exhaustGasTemperature_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          turbineInletTemperature_ = java.util.Collections.unmodifiableList(turbineInletTemperature_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cylinderHeadTemperature_ = java.util.Collections.unmodifiableList(cylinderHeadTemperature_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          fuelUsed_ = java.util.Collections.unmodifiableList(fuelUsed_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          fuelFlow_ = java.util.Collections.unmodifiableList(fuelFlow_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          fuelLevel_ = java.util.Collections.unmodifiableList(fuelLevel_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          hydraulicPressure_ = java.util.Collections.unmodifiableList(hydraulicPressure_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edmtools.Proto.internal_static_edmtools_EngineDataRecord_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edmtools.Proto.internal_static_edmtools_EngineDataRecord_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edmtools.Proto.EngineDataRecord.class, edmtools.Proto.EngineDataRecord.Builder.class);
    }

    public static com.google.protobuf.Parser<EngineDataRecord> PARSER =
        new com.google.protobuf.AbstractParser<EngineDataRecord>() {
      public EngineDataRecord parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EngineDataRecord(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EngineDataRecord> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int EXHAUST_GAS_TEMPERATURE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> exhaustGasTemperature_;
    /**
     * <code>repeated int32 exhaust_gas_temperature = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getExhaustGasTemperatureList() {
      return exhaustGasTemperature_;
    }
    /**
     * <code>repeated int32 exhaust_gas_temperature = 1;</code>
     */
    public int getExhaustGasTemperatureCount() {
      return exhaustGasTemperature_.size();
    }
    /**
     * <code>repeated int32 exhaust_gas_temperature = 1;</code>
     */
    public int getExhaustGasTemperature(int index) {
      return exhaustGasTemperature_.get(index);
    }

    public static final int MAX_EXHAUST_GAS_TEMPERATURE_DIFFERENCE_FIELD_NUMBER = 2;
    private int maxExhaustGasTemperatureDifference_;
    /**
     * <code>optional int32 max_exhaust_gas_temperature_difference = 2;</code>
     */
    public boolean hasMaxExhaustGasTemperatureDifference() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 max_exhaust_gas_temperature_difference = 2;</code>
     */
    public int getMaxExhaustGasTemperatureDifference() {
      return maxExhaustGasTemperatureDifference_;
    }

    public static final int TURBINE_INLET_TEMPERATURE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> turbineInletTemperature_;
    /**
     * <code>repeated int32 turbine_inlet_temperature = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getTurbineInletTemperatureList() {
      return turbineInletTemperature_;
    }
    /**
     * <code>repeated int32 turbine_inlet_temperature = 3;</code>
     */
    public int getTurbineInletTemperatureCount() {
      return turbineInletTemperature_.size();
    }
    /**
     * <code>repeated int32 turbine_inlet_temperature = 3;</code>
     */
    public int getTurbineInletTemperature(int index) {
      return turbineInletTemperature_.get(index);
    }

    public static final int CYLINDER_HEAD_TEMPERATURE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cylinderHeadTemperature_;
    /**
     * <code>repeated int32 cylinder_head_temperature = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getCylinderHeadTemperatureList() {
      return cylinderHeadTemperature_;
    }
    /**
     * <code>repeated int32 cylinder_head_temperature = 4;</code>
     */
    public int getCylinderHeadTemperatureCount() {
      return cylinderHeadTemperature_.size();
    }
    /**
     * <code>repeated int32 cylinder_head_temperature = 4;</code>
     */
    public int getCylinderHeadTemperature(int index) {
      return cylinderHeadTemperature_.get(index);
    }

    public static final int CYLINDER_HEAD_TEMPERATURE_COOLING_RATE_FIELD_NUMBER = 5;
    private int cylinderHeadTemperatureCoolingRate_;
    /**
     * <code>optional int32 cylinder_head_temperature_cooling_rate = 5;</code>
     *
     * <pre>
     * Degrees per minute.
     * </pre>
     */
    public boolean hasCylinderHeadTemperatureCoolingRate() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cylinder_head_temperature_cooling_rate = 5;</code>
     *
     * <pre>
     * Degrees per minute.
     * </pre>
     */
    public int getCylinderHeadTemperatureCoolingRate() {
      return cylinderHeadTemperatureCoolingRate_;
    }

    public static final int OIL_TEMPERATURE_FIELD_NUMBER = 6;
    private int oilTemperature_;
    /**
     * <code>optional int32 oil_temperature = 6;</code>
     */
    public boolean hasOilTemperature() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 oil_temperature = 6;</code>
     */
    public int getOilTemperature() {
      return oilTemperature_;
    }

    public static final int COMPRESSOR_DISCHARGE_TEMPERATURE_FIELD_NUMBER = 7;
    private int compressorDischargeTemperature_;
    /**
     * <code>optional int32 compressor_discharge_temperature = 7;</code>
     */
    public boolean hasCompressorDischargeTemperature() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 compressor_discharge_temperature = 7;</code>
     */
    public int getCompressorDischargeTemperature() {
      return compressorDischargeTemperature_;
    }

    public static final int INDUCTION_AIR_TEMPERATURE_FIELD_NUMBER = 8;
    private int inductionAirTemperature_;
    /**
     * <code>optional int32 induction_air_temperature = 8;</code>
     */
    public boolean hasInductionAirTemperature() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 induction_air_temperature = 8;</code>
     */
    public int getInductionAirTemperature() {
      return inductionAirTemperature_;
    }

    public static final int INTERSTAGE_TURBINE_TEMPERATURE_FIELD_NUMBER = 9;
    private int interstageTurbineTemperature_;
    /**
     * <code>optional int32 interstage_turbine_temperature = 9;</code>
     */
    public boolean hasInterstageTurbineTemperature() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 interstage_turbine_temperature = 9;</code>
     */
    public int getInterstageTurbineTemperature() {
      return interstageTurbineTemperature_;
    }

    public static final int FUEL_USED_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Float> fuelUsed_;
    /**
     * <code>repeated float fuel_used = 10;</code>
     */
    public java.util.List<java.lang.Float>
        getFuelUsedList() {
      return fuelUsed_;
    }
    /**
     * <code>repeated float fuel_used = 10;</code>
     */
    public int getFuelUsedCount() {
      return fuelUsed_.size();
    }
    /**
     * <code>repeated float fuel_used = 10;</code>
     */
    public float getFuelUsed(int index) {
      return fuelUsed_.get(index);
    }

    public static final int FUEL_FLOW_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Float> fuelFlow_;
    /**
     * <code>repeated float fuel_flow = 11;</code>
     */
    public java.util.List<java.lang.Float>
        getFuelFlowList() {
      return fuelFlow_;
    }
    /**
     * <code>repeated float fuel_flow = 11;</code>
     */
    public int getFuelFlowCount() {
      return fuelFlow_.size();
    }
    /**
     * <code>repeated float fuel_flow = 11;</code>
     */
    public float getFuelFlow(int index) {
      return fuelFlow_.get(index);
    }

    public static final int FUEL_PRESSURE_FIELD_NUMBER = 12;
    private float fuelPressure_;
    /**
     * <code>optional float fuel_pressure = 12;</code>
     */
    public boolean hasFuelPressure() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float fuel_pressure = 12;</code>
     */
    public float getFuelPressure() {
      return fuelPressure_;
    }

    public static final int FUEL_LEVEL_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Float> fuelLevel_;
    /**
     * <code>repeated float fuel_level = 13;</code>
     *
     * <pre>
     * TODO: unsure - verify this is really fuel level.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getFuelLevelList() {
      return fuelLevel_;
    }
    /**
     * <code>repeated float fuel_level = 13;</code>
     *
     * <pre>
     * TODO: unsure - verify this is really fuel level.
     * </pre>
     */
    public int getFuelLevelCount() {
      return fuelLevel_.size();
    }
    /**
     * <code>repeated float fuel_level = 13;</code>
     *
     * <pre>
     * TODO: unsure - verify this is really fuel level.
     * </pre>
     */
    public float getFuelLevel(int index) {
      return fuelLevel_.get(index);
    }

    public static final int OIL_PRESSURE_FIELD_NUMBER = 14;
    private int oilPressure_;
    /**
     * <code>optional int32 oil_pressure = 14;</code>
     */
    public boolean hasOilPressure() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 oil_pressure = 14;</code>
     */
    public int getOilPressure() {
      return oilPressure_;
    }

    public static final int MANIFOLD_PRESSURE_FIELD_NUMBER = 15;
    private float manifoldPressure_;
    /**
     * <code>optional float manifold_pressure = 15;</code>
     */
    public boolean hasManifoldPressure() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float manifold_pressure = 15;</code>
     */
    public float getManifoldPressure() {
      return manifoldPressure_;
    }

    public static final int HYDRAULIC_PRESSURE_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> hydraulicPressure_;
    /**
     * <code>repeated int32 hydraulic_pressure = 16;</code>
     */
    public java.util.List<java.lang.Integer>
        getHydraulicPressureList() {
      return hydraulicPressure_;
    }
    /**
     * <code>repeated int32 hydraulic_pressure = 16;</code>
     */
    public int getHydraulicPressureCount() {
      return hydraulicPressure_.size();
    }
    /**
     * <code>repeated int32 hydraulic_pressure = 16;</code>
     */
    public int getHydraulicPressure(int index) {
      return hydraulicPressure_.get(index);
    }

    public static final int HORSEPOWER_FIELD_NUMBER = 17;
    private int horsepower_;
    /**
     * <code>optional int32 horsepower = 17;</code>
     */
    public boolean hasHorsepower() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 horsepower = 17;</code>
     */
    public int getHorsepower() {
      return horsepower_;
    }

    public static final int RPM_FIELD_NUMBER = 18;
    private int rpm_;
    /**
     * <code>optional int32 rpm = 18;</code>
     */
    public boolean hasRpm() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 rpm = 18;</code>
     */
    public int getRpm() {
      return rpm_;
    }

    public static final int TORQUE_FIELD_NUMBER = 19;
    private int torque_;
    /**
     * <code>optional int32 torque = 19;</code>
     */
    public boolean hasTorque() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 torque = 19;</code>
     */
    public int getTorque() {
      return torque_;
    }

    public static final int HOURS_FIELD_NUMBER = 20;
    private float hours_;
    /**
     * <code>optional float hours = 20;</code>
     */
    public boolean hasHours() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float hours = 20;</code>
     */
    public float getHours() {
      return hours_;
    }

    private void initFields() {
      exhaustGasTemperature_ = java.util.Collections.emptyList();
      maxExhaustGasTemperatureDifference_ = 0;
      turbineInletTemperature_ = java.util.Collections.emptyList();
      cylinderHeadTemperature_ = java.util.Collections.emptyList();
      cylinderHeadTemperatureCoolingRate_ = 0;
      oilTemperature_ = 0;
      compressorDischargeTemperature_ = 0;
      inductionAirTemperature_ = 0;
      interstageTurbineTemperature_ = 0;
      fuelUsed_ = java.util.Collections.emptyList();
      fuelFlow_ = java.util.Collections.emptyList();
      fuelPressure_ = 0F;
      fuelLevel_ = java.util.Collections.emptyList();
      oilPressure_ = 0;
      manifoldPressure_ = 0F;
      hydraulicPressure_ = java.util.Collections.emptyList();
      horsepower_ = 0;
      rpm_ = 0;
      torque_ = 0;
      hours_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < exhaustGasTemperature_.size(); i++) {
        output.writeInt32(1, exhaustGasTemperature_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, maxExhaustGasTemperatureDifference_);
      }
      for (int i = 0; i < turbineInletTemperature_.size(); i++) {
        output.writeInt32(3, turbineInletTemperature_.get(i));
      }
      for (int i = 0; i < cylinderHeadTemperature_.size(); i++) {
        output.writeInt32(4, cylinderHeadTemperature_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(5, cylinderHeadTemperatureCoolingRate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(6, oilTemperature_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(7, compressorDischargeTemperature_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(8, inductionAirTemperature_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(9, interstageTurbineTemperature_);
      }
      for (int i = 0; i < fuelUsed_.size(); i++) {
        output.writeFloat(10, fuelUsed_.get(i));
      }
      for (int i = 0; i < fuelFlow_.size(); i++) {
        output.writeFloat(11, fuelFlow_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(12, fuelPressure_);
      }
      for (int i = 0; i < fuelLevel_.size(); i++) {
        output.writeFloat(13, fuelLevel_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(14, oilPressure_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(15, manifoldPressure_);
      }
      for (int i = 0; i < hydraulicPressure_.size(); i++) {
        output.writeInt32(16, hydraulicPressure_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(17, horsepower_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(18, rpm_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(19, torque_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(20, hours_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < exhaustGasTemperature_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(exhaustGasTemperature_.get(i));
        }
        size += dataSize;
        size += 1 * getExhaustGasTemperatureList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, maxExhaustGasTemperatureDifference_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < turbineInletTemperature_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(turbineInletTemperature_.get(i));
        }
        size += dataSize;
        size += 1 * getTurbineInletTemperatureList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cylinderHeadTemperature_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cylinderHeadTemperature_.get(i));
        }
        size += dataSize;
        size += 1 * getCylinderHeadTemperatureList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cylinderHeadTemperatureCoolingRate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, oilTemperature_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, compressorDischargeTemperature_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, inductionAirTemperature_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, interstageTurbineTemperature_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFuelUsedList().size();
        size += dataSize;
        size += 1 * getFuelUsedList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFuelFlowList().size();
        size += dataSize;
        size += 1 * getFuelFlowList().size();
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, fuelPressure_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFuelLevelList().size();
        size += dataSize;
        size += 1 * getFuelLevelList().size();
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, oilPressure_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, manifoldPressure_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < hydraulicPressure_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(hydraulicPressure_.get(i));
        }
        size += dataSize;
        size += 2 * getHydraulicPressureList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, horsepower_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, rpm_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, torque_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, hours_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edmtools.Proto.EngineDataRecord parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.EngineDataRecord parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.EngineDataRecord parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.EngineDataRecord parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.EngineDataRecord parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.EngineDataRecord parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.EngineDataRecord parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edmtools.Proto.EngineDataRecord parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.EngineDataRecord parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.EngineDataRecord parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edmtools.Proto.EngineDataRecord prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edmtools.EngineDataRecord}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edmtools.EngineDataRecord)
        edmtools.Proto.EngineDataRecordOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edmtools.Proto.internal_static_edmtools_EngineDataRecord_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edmtools.Proto.internal_static_edmtools_EngineDataRecord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edmtools.Proto.EngineDataRecord.class, edmtools.Proto.EngineDataRecord.Builder.class);
      }

      // Construct using edmtools.Proto.EngineDataRecord.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        exhaustGasTemperature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        maxExhaustGasTemperatureDifference_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        turbineInletTemperature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cylinderHeadTemperature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        cylinderHeadTemperatureCoolingRate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        oilTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        compressorDischargeTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        inductionAirTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        interstageTurbineTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        fuelUsed_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        fuelFlow_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        fuelPressure_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        fuelLevel_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        oilPressure_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        manifoldPressure_ = 0F;
        bitField0_ = (bitField0_ & ~0x00004000);
        hydraulicPressure_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        horsepower_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        rpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        torque_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        hours_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edmtools.Proto.internal_static_edmtools_EngineDataRecord_descriptor;
      }

      public edmtools.Proto.EngineDataRecord getDefaultInstanceForType() {
        return edmtools.Proto.EngineDataRecord.getDefaultInstance();
      }

      public edmtools.Proto.EngineDataRecord build() {
        edmtools.Proto.EngineDataRecord result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edmtools.Proto.EngineDataRecord buildPartial() {
        edmtools.Proto.EngineDataRecord result = new edmtools.Proto.EngineDataRecord(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          exhaustGasTemperature_ = java.util.Collections.unmodifiableList(exhaustGasTemperature_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.exhaustGasTemperature_ = exhaustGasTemperature_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.maxExhaustGasTemperatureDifference_ = maxExhaustGasTemperatureDifference_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          turbineInletTemperature_ = java.util.Collections.unmodifiableList(turbineInletTemperature_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.turbineInletTemperature_ = turbineInletTemperature_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cylinderHeadTemperature_ = java.util.Collections.unmodifiableList(cylinderHeadTemperature_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cylinderHeadTemperature_ = cylinderHeadTemperature_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cylinderHeadTemperatureCoolingRate_ = cylinderHeadTemperatureCoolingRate_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.oilTemperature_ = oilTemperature_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.compressorDischargeTemperature_ = compressorDischargeTemperature_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000010;
        }
        result.inductionAirTemperature_ = inductionAirTemperature_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000020;
        }
        result.interstageTurbineTemperature_ = interstageTurbineTemperature_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          fuelUsed_ = java.util.Collections.unmodifiableList(fuelUsed_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.fuelUsed_ = fuelUsed_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          fuelFlow_ = java.util.Collections.unmodifiableList(fuelFlow_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.fuelFlow_ = fuelFlow_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000040;
        }
        result.fuelPressure_ = fuelPressure_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          fuelLevel_ = java.util.Collections.unmodifiableList(fuelLevel_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.fuelLevel_ = fuelLevel_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.oilPressure_ = oilPressure_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.manifoldPressure_ = manifoldPressure_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          hydraulicPressure_ = java.util.Collections.unmodifiableList(hydraulicPressure_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.hydraulicPressure_ = hydraulicPressure_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.horsepower_ = horsepower_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.rpm_ = rpm_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.torque_ = torque_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.hours_ = hours_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edmtools.Proto.EngineDataRecord) {
          return mergeFrom((edmtools.Proto.EngineDataRecord)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edmtools.Proto.EngineDataRecord other) {
        if (other == edmtools.Proto.EngineDataRecord.getDefaultInstance()) return this;
        if (!other.exhaustGasTemperature_.isEmpty()) {
          if (exhaustGasTemperature_.isEmpty()) {
            exhaustGasTemperature_ = other.exhaustGasTemperature_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureExhaustGasTemperatureIsMutable();
            exhaustGasTemperature_.addAll(other.exhaustGasTemperature_);
          }
          onChanged();
        }
        if (other.hasMaxExhaustGasTemperatureDifference()) {
          setMaxExhaustGasTemperatureDifference(other.getMaxExhaustGasTemperatureDifference());
        }
        if (!other.turbineInletTemperature_.isEmpty()) {
          if (turbineInletTemperature_.isEmpty()) {
            turbineInletTemperature_ = other.turbineInletTemperature_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureTurbineInletTemperatureIsMutable();
            turbineInletTemperature_.addAll(other.turbineInletTemperature_);
          }
          onChanged();
        }
        if (!other.cylinderHeadTemperature_.isEmpty()) {
          if (cylinderHeadTemperature_.isEmpty()) {
            cylinderHeadTemperature_ = other.cylinderHeadTemperature_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCylinderHeadTemperatureIsMutable();
            cylinderHeadTemperature_.addAll(other.cylinderHeadTemperature_);
          }
          onChanged();
        }
        if (other.hasCylinderHeadTemperatureCoolingRate()) {
          setCylinderHeadTemperatureCoolingRate(other.getCylinderHeadTemperatureCoolingRate());
        }
        if (other.hasOilTemperature()) {
          setOilTemperature(other.getOilTemperature());
        }
        if (other.hasCompressorDischargeTemperature()) {
          setCompressorDischargeTemperature(other.getCompressorDischargeTemperature());
        }
        if (other.hasInductionAirTemperature()) {
          setInductionAirTemperature(other.getInductionAirTemperature());
        }
        if (other.hasInterstageTurbineTemperature()) {
          setInterstageTurbineTemperature(other.getInterstageTurbineTemperature());
        }
        if (!other.fuelUsed_.isEmpty()) {
          if (fuelUsed_.isEmpty()) {
            fuelUsed_ = other.fuelUsed_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureFuelUsedIsMutable();
            fuelUsed_.addAll(other.fuelUsed_);
          }
          onChanged();
        }
        if (!other.fuelFlow_.isEmpty()) {
          if (fuelFlow_.isEmpty()) {
            fuelFlow_ = other.fuelFlow_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureFuelFlowIsMutable();
            fuelFlow_.addAll(other.fuelFlow_);
          }
          onChanged();
        }
        if (other.hasFuelPressure()) {
          setFuelPressure(other.getFuelPressure());
        }
        if (!other.fuelLevel_.isEmpty()) {
          if (fuelLevel_.isEmpty()) {
            fuelLevel_ = other.fuelLevel_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureFuelLevelIsMutable();
            fuelLevel_.addAll(other.fuelLevel_);
          }
          onChanged();
        }
        if (other.hasOilPressure()) {
          setOilPressure(other.getOilPressure());
        }
        if (other.hasManifoldPressure()) {
          setManifoldPressure(other.getManifoldPressure());
        }
        if (!other.hydraulicPressure_.isEmpty()) {
          if (hydraulicPressure_.isEmpty()) {
            hydraulicPressure_ = other.hydraulicPressure_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureHydraulicPressureIsMutable();
            hydraulicPressure_.addAll(other.hydraulicPressure_);
          }
          onChanged();
        }
        if (other.hasHorsepower()) {
          setHorsepower(other.getHorsepower());
        }
        if (other.hasRpm()) {
          setRpm(other.getRpm());
        }
        if (other.hasTorque()) {
          setTorque(other.getTorque());
        }
        if (other.hasHours()) {
          setHours(other.getHours());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edmtools.Proto.EngineDataRecord parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edmtools.Proto.EngineDataRecord) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Integer> exhaustGasTemperature_ = java.util.Collections.emptyList();
      private void ensureExhaustGasTemperatureIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          exhaustGasTemperature_ = new java.util.ArrayList<java.lang.Integer>(exhaustGasTemperature_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 exhaust_gas_temperature = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getExhaustGasTemperatureList() {
        return java.util.Collections.unmodifiableList(exhaustGasTemperature_);
      }
      /**
       * <code>repeated int32 exhaust_gas_temperature = 1;</code>
       */
      public int getExhaustGasTemperatureCount() {
        return exhaustGasTemperature_.size();
      }
      /**
       * <code>repeated int32 exhaust_gas_temperature = 1;</code>
       */
      public int getExhaustGasTemperature(int index) {
        return exhaustGasTemperature_.get(index);
      }
      /**
       * <code>repeated int32 exhaust_gas_temperature = 1;</code>
       */
      public Builder setExhaustGasTemperature(
          int index, int value) {
        ensureExhaustGasTemperatureIsMutable();
        exhaustGasTemperature_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 exhaust_gas_temperature = 1;</code>
       */
      public Builder addExhaustGasTemperature(int value) {
        ensureExhaustGasTemperatureIsMutable();
        exhaustGasTemperature_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 exhaust_gas_temperature = 1;</code>
       */
      public Builder addAllExhaustGasTemperature(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureExhaustGasTemperatureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, exhaustGasTemperature_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 exhaust_gas_temperature = 1;</code>
       */
      public Builder clearExhaustGasTemperature() {
        exhaustGasTemperature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private int maxExhaustGasTemperatureDifference_ ;
      /**
       * <code>optional int32 max_exhaust_gas_temperature_difference = 2;</code>
       */
      public boolean hasMaxExhaustGasTemperatureDifference() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 max_exhaust_gas_temperature_difference = 2;</code>
       */
      public int getMaxExhaustGasTemperatureDifference() {
        return maxExhaustGasTemperatureDifference_;
      }
      /**
       * <code>optional int32 max_exhaust_gas_temperature_difference = 2;</code>
       */
      public Builder setMaxExhaustGasTemperatureDifference(int value) {
        bitField0_ |= 0x00000002;
        maxExhaustGasTemperatureDifference_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_exhaust_gas_temperature_difference = 2;</code>
       */
      public Builder clearMaxExhaustGasTemperatureDifference() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxExhaustGasTemperatureDifference_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> turbineInletTemperature_ = java.util.Collections.emptyList();
      private void ensureTurbineInletTemperatureIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          turbineInletTemperature_ = new java.util.ArrayList<java.lang.Integer>(turbineInletTemperature_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 turbine_inlet_temperature = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getTurbineInletTemperatureList() {
        return java.util.Collections.unmodifiableList(turbineInletTemperature_);
      }
      /**
       * <code>repeated int32 turbine_inlet_temperature = 3;</code>
       */
      public int getTurbineInletTemperatureCount() {
        return turbineInletTemperature_.size();
      }
      /**
       * <code>repeated int32 turbine_inlet_temperature = 3;</code>
       */
      public int getTurbineInletTemperature(int index) {
        return turbineInletTemperature_.get(index);
      }
      /**
       * <code>repeated int32 turbine_inlet_temperature = 3;</code>
       */
      public Builder setTurbineInletTemperature(
          int index, int value) {
        ensureTurbineInletTemperatureIsMutable();
        turbineInletTemperature_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 turbine_inlet_temperature = 3;</code>
       */
      public Builder addTurbineInletTemperature(int value) {
        ensureTurbineInletTemperatureIsMutable();
        turbineInletTemperature_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 turbine_inlet_temperature = 3;</code>
       */
      public Builder addAllTurbineInletTemperature(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTurbineInletTemperatureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, turbineInletTemperature_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 turbine_inlet_temperature = 3;</code>
       */
      public Builder clearTurbineInletTemperature() {
        turbineInletTemperature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> cylinderHeadTemperature_ = java.util.Collections.emptyList();
      private void ensureCylinderHeadTemperatureIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cylinderHeadTemperature_ = new java.util.ArrayList<java.lang.Integer>(cylinderHeadTemperature_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 cylinder_head_temperature = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getCylinderHeadTemperatureList() {
        return java.util.Collections.unmodifiableList(cylinderHeadTemperature_);
      }
      /**
       * <code>repeated int32 cylinder_head_temperature = 4;</code>
       */
      public int getCylinderHeadTemperatureCount() {
        return cylinderHeadTemperature_.size();
      }
      /**
       * <code>repeated int32 cylinder_head_temperature = 4;</code>
       */
      public int getCylinderHeadTemperature(int index) {
        return cylinderHeadTemperature_.get(index);
      }
      /**
       * <code>repeated int32 cylinder_head_temperature = 4;</code>
       */
      public Builder setCylinderHeadTemperature(
          int index, int value) {
        ensureCylinderHeadTemperatureIsMutable();
        cylinderHeadTemperature_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cylinder_head_temperature = 4;</code>
       */
      public Builder addCylinderHeadTemperature(int value) {
        ensureCylinderHeadTemperatureIsMutable();
        cylinderHeadTemperature_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cylinder_head_temperature = 4;</code>
       */
      public Builder addAllCylinderHeadTemperature(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCylinderHeadTemperatureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, cylinderHeadTemperature_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cylinder_head_temperature = 4;</code>
       */
      public Builder clearCylinderHeadTemperature() {
        cylinderHeadTemperature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private int cylinderHeadTemperatureCoolingRate_ ;
      /**
       * <code>optional int32 cylinder_head_temperature_cooling_rate = 5;</code>
       *
       * <pre>
       * Degrees per minute.
       * </pre>
       */
      public boolean hasCylinderHeadTemperatureCoolingRate() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 cylinder_head_temperature_cooling_rate = 5;</code>
       *
       * <pre>
       * Degrees per minute.
       * </pre>
       */
      public int getCylinderHeadTemperatureCoolingRate() {
        return cylinderHeadTemperatureCoolingRate_;
      }
      /**
       * <code>optional int32 cylinder_head_temperature_cooling_rate = 5;</code>
       *
       * <pre>
       * Degrees per minute.
       * </pre>
       */
      public Builder setCylinderHeadTemperatureCoolingRate(int value) {
        bitField0_ |= 0x00000010;
        cylinderHeadTemperatureCoolingRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cylinder_head_temperature_cooling_rate = 5;</code>
       *
       * <pre>
       * Degrees per minute.
       * </pre>
       */
      public Builder clearCylinderHeadTemperatureCoolingRate() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cylinderHeadTemperatureCoolingRate_ = 0;
        onChanged();
        return this;
      }

      private int oilTemperature_ ;
      /**
       * <code>optional int32 oil_temperature = 6;</code>
       */
      public boolean hasOilTemperature() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 oil_temperature = 6;</code>
       */
      public int getOilTemperature() {
        return oilTemperature_;
      }
      /**
       * <code>optional int32 oil_temperature = 6;</code>
       */
      public Builder setOilTemperature(int value) {
        bitField0_ |= 0x00000020;
        oilTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 oil_temperature = 6;</code>
       */
      public Builder clearOilTemperature() {
        bitField0_ = (bitField0_ & ~0x00000020);
        oilTemperature_ = 0;
        onChanged();
        return this;
      }

      private int compressorDischargeTemperature_ ;
      /**
       * <code>optional int32 compressor_discharge_temperature = 7;</code>
       */
      public boolean hasCompressorDischargeTemperature() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 compressor_discharge_temperature = 7;</code>
       */
      public int getCompressorDischargeTemperature() {
        return compressorDischargeTemperature_;
      }
      /**
       * <code>optional int32 compressor_discharge_temperature = 7;</code>
       */
      public Builder setCompressorDischargeTemperature(int value) {
        bitField0_ |= 0x00000040;
        compressorDischargeTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 compressor_discharge_temperature = 7;</code>
       */
      public Builder clearCompressorDischargeTemperature() {
        bitField0_ = (bitField0_ & ~0x00000040);
        compressorDischargeTemperature_ = 0;
        onChanged();
        return this;
      }

      private int inductionAirTemperature_ ;
      /**
       * <code>optional int32 induction_air_temperature = 8;</code>
       */
      public boolean hasInductionAirTemperature() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 induction_air_temperature = 8;</code>
       */
      public int getInductionAirTemperature() {
        return inductionAirTemperature_;
      }
      /**
       * <code>optional int32 induction_air_temperature = 8;</code>
       */
      public Builder setInductionAirTemperature(int value) {
        bitField0_ |= 0x00000080;
        inductionAirTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 induction_air_temperature = 8;</code>
       */
      public Builder clearInductionAirTemperature() {
        bitField0_ = (bitField0_ & ~0x00000080);
        inductionAirTemperature_ = 0;
        onChanged();
        return this;
      }

      private int interstageTurbineTemperature_ ;
      /**
       * <code>optional int32 interstage_turbine_temperature = 9;</code>
       */
      public boolean hasInterstageTurbineTemperature() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 interstage_turbine_temperature = 9;</code>
       */
      public int getInterstageTurbineTemperature() {
        return interstageTurbineTemperature_;
      }
      /**
       * <code>optional int32 interstage_turbine_temperature = 9;</code>
       */
      public Builder setInterstageTurbineTemperature(int value) {
        bitField0_ |= 0x00000100;
        interstageTurbineTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 interstage_turbine_temperature = 9;</code>
       */
      public Builder clearInterstageTurbineTemperature() {
        bitField0_ = (bitField0_ & ~0x00000100);
        interstageTurbineTemperature_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> fuelUsed_ = java.util.Collections.emptyList();
      private void ensureFuelUsedIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          fuelUsed_ = new java.util.ArrayList<java.lang.Float>(fuelUsed_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated float fuel_used = 10;</code>
       */
      public java.util.List<java.lang.Float>
          getFuelUsedList() {
        return java.util.Collections.unmodifiableList(fuelUsed_);
      }
      /**
       * <code>repeated float fuel_used = 10;</code>
       */
      public int getFuelUsedCount() {
        return fuelUsed_.size();
      }
      /**
       * <code>repeated float fuel_used = 10;</code>
       */
      public float getFuelUsed(int index) {
        return fuelUsed_.get(index);
      }
      /**
       * <code>repeated float fuel_used = 10;</code>
       */
      public Builder setFuelUsed(
          int index, float value) {
        ensureFuelUsedIsMutable();
        fuelUsed_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fuel_used = 10;</code>
       */
      public Builder addFuelUsed(float value) {
        ensureFuelUsedIsMutable();
        fuelUsed_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fuel_used = 10;</code>
       */
      public Builder addAllFuelUsed(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFuelUsedIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fuelUsed_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fuel_used = 10;</code>
       */
      public Builder clearFuelUsed() {
        fuelUsed_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> fuelFlow_ = java.util.Collections.emptyList();
      private void ensureFuelFlowIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          fuelFlow_ = new java.util.ArrayList<java.lang.Float>(fuelFlow_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated float fuel_flow = 11;</code>
       */
      public java.util.List<java.lang.Float>
          getFuelFlowList() {
        return java.util.Collections.unmodifiableList(fuelFlow_);
      }
      /**
       * <code>repeated float fuel_flow = 11;</code>
       */
      public int getFuelFlowCount() {
        return fuelFlow_.size();
      }
      /**
       * <code>repeated float fuel_flow = 11;</code>
       */
      public float getFuelFlow(int index) {
        return fuelFlow_.get(index);
      }
      /**
       * <code>repeated float fuel_flow = 11;</code>
       */
      public Builder setFuelFlow(
          int index, float value) {
        ensureFuelFlowIsMutable();
        fuelFlow_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fuel_flow = 11;</code>
       */
      public Builder addFuelFlow(float value) {
        ensureFuelFlowIsMutable();
        fuelFlow_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fuel_flow = 11;</code>
       */
      public Builder addAllFuelFlow(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFuelFlowIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fuelFlow_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fuel_flow = 11;</code>
       */
      public Builder clearFuelFlow() {
        fuelFlow_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      private float fuelPressure_ ;
      /**
       * <code>optional float fuel_pressure = 12;</code>
       */
      public boolean hasFuelPressure() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float fuel_pressure = 12;</code>
       */
      public float getFuelPressure() {
        return fuelPressure_;
      }
      /**
       * <code>optional float fuel_pressure = 12;</code>
       */
      public Builder setFuelPressure(float value) {
        bitField0_ |= 0x00000800;
        fuelPressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fuel_pressure = 12;</code>
       */
      public Builder clearFuelPressure() {
        bitField0_ = (bitField0_ & ~0x00000800);
        fuelPressure_ = 0F;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> fuelLevel_ = java.util.Collections.emptyList();
      private void ensureFuelLevelIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          fuelLevel_ = new java.util.ArrayList<java.lang.Float>(fuelLevel_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated float fuel_level = 13;</code>
       *
       * <pre>
       * TODO: unsure - verify this is really fuel level.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getFuelLevelList() {
        return java.util.Collections.unmodifiableList(fuelLevel_);
      }
      /**
       * <code>repeated float fuel_level = 13;</code>
       *
       * <pre>
       * TODO: unsure - verify this is really fuel level.
       * </pre>
       */
      public int getFuelLevelCount() {
        return fuelLevel_.size();
      }
      /**
       * <code>repeated float fuel_level = 13;</code>
       *
       * <pre>
       * TODO: unsure - verify this is really fuel level.
       * </pre>
       */
      public float getFuelLevel(int index) {
        return fuelLevel_.get(index);
      }
      /**
       * <code>repeated float fuel_level = 13;</code>
       *
       * <pre>
       * TODO: unsure - verify this is really fuel level.
       * </pre>
       */
      public Builder setFuelLevel(
          int index, float value) {
        ensureFuelLevelIsMutable();
        fuelLevel_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fuel_level = 13;</code>
       *
       * <pre>
       * TODO: unsure - verify this is really fuel level.
       * </pre>
       */
      public Builder addFuelLevel(float value) {
        ensureFuelLevelIsMutable();
        fuelLevel_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fuel_level = 13;</code>
       *
       * <pre>
       * TODO: unsure - verify this is really fuel level.
       * </pre>
       */
      public Builder addAllFuelLevel(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFuelLevelIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fuelLevel_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fuel_level = 13;</code>
       *
       * <pre>
       * TODO: unsure - verify this is really fuel level.
       * </pre>
       */
      public Builder clearFuelLevel() {
        fuelLevel_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private int oilPressure_ ;
      /**
       * <code>optional int32 oil_pressure = 14;</code>
       */
      public boolean hasOilPressure() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 oil_pressure = 14;</code>
       */
      public int getOilPressure() {
        return oilPressure_;
      }
      /**
       * <code>optional int32 oil_pressure = 14;</code>
       */
      public Builder setOilPressure(int value) {
        bitField0_ |= 0x00002000;
        oilPressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 oil_pressure = 14;</code>
       */
      public Builder clearOilPressure() {
        bitField0_ = (bitField0_ & ~0x00002000);
        oilPressure_ = 0;
        onChanged();
        return this;
      }

      private float manifoldPressure_ ;
      /**
       * <code>optional float manifold_pressure = 15;</code>
       */
      public boolean hasManifoldPressure() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float manifold_pressure = 15;</code>
       */
      public float getManifoldPressure() {
        return manifoldPressure_;
      }
      /**
       * <code>optional float manifold_pressure = 15;</code>
       */
      public Builder setManifoldPressure(float value) {
        bitField0_ |= 0x00004000;
        manifoldPressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float manifold_pressure = 15;</code>
       */
      public Builder clearManifoldPressure() {
        bitField0_ = (bitField0_ & ~0x00004000);
        manifoldPressure_ = 0F;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> hydraulicPressure_ = java.util.Collections.emptyList();
      private void ensureHydraulicPressureIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          hydraulicPressure_ = new java.util.ArrayList<java.lang.Integer>(hydraulicPressure_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 hydraulic_pressure = 16;</code>
       */
      public java.util.List<java.lang.Integer>
          getHydraulicPressureList() {
        return java.util.Collections.unmodifiableList(hydraulicPressure_);
      }
      /**
       * <code>repeated int32 hydraulic_pressure = 16;</code>
       */
      public int getHydraulicPressureCount() {
        return hydraulicPressure_.size();
      }
      /**
       * <code>repeated int32 hydraulic_pressure = 16;</code>
       */
      public int getHydraulicPressure(int index) {
        return hydraulicPressure_.get(index);
      }
      /**
       * <code>repeated int32 hydraulic_pressure = 16;</code>
       */
      public Builder setHydraulicPressure(
          int index, int value) {
        ensureHydraulicPressureIsMutable();
        hydraulicPressure_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hydraulic_pressure = 16;</code>
       */
      public Builder addHydraulicPressure(int value) {
        ensureHydraulicPressureIsMutable();
        hydraulicPressure_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hydraulic_pressure = 16;</code>
       */
      public Builder addAllHydraulicPressure(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHydraulicPressureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, hydraulicPressure_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hydraulic_pressure = 16;</code>
       */
      public Builder clearHydraulicPressure() {
        hydraulicPressure_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      private int horsepower_ ;
      /**
       * <code>optional int32 horsepower = 17;</code>
       */
      public boolean hasHorsepower() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 horsepower = 17;</code>
       */
      public int getHorsepower() {
        return horsepower_;
      }
      /**
       * <code>optional int32 horsepower = 17;</code>
       */
      public Builder setHorsepower(int value) {
        bitField0_ |= 0x00010000;
        horsepower_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 horsepower = 17;</code>
       */
      public Builder clearHorsepower() {
        bitField0_ = (bitField0_ & ~0x00010000);
        horsepower_ = 0;
        onChanged();
        return this;
      }

      private int rpm_ ;
      /**
       * <code>optional int32 rpm = 18;</code>
       */
      public boolean hasRpm() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 rpm = 18;</code>
       */
      public int getRpm() {
        return rpm_;
      }
      /**
       * <code>optional int32 rpm = 18;</code>
       */
      public Builder setRpm(int value) {
        bitField0_ |= 0x00020000;
        rpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rpm = 18;</code>
       */
      public Builder clearRpm() {
        bitField0_ = (bitField0_ & ~0x00020000);
        rpm_ = 0;
        onChanged();
        return this;
      }

      private int torque_ ;
      /**
       * <code>optional int32 torque = 19;</code>
       */
      public boolean hasTorque() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 torque = 19;</code>
       */
      public int getTorque() {
        return torque_;
      }
      /**
       * <code>optional int32 torque = 19;</code>
       */
      public Builder setTorque(int value) {
        bitField0_ |= 0x00040000;
        torque_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 torque = 19;</code>
       */
      public Builder clearTorque() {
        bitField0_ = (bitField0_ & ~0x00040000);
        torque_ = 0;
        onChanged();
        return this;
      }

      private float hours_ ;
      /**
       * <code>optional float hours = 20;</code>
       */
      public boolean hasHours() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional float hours = 20;</code>
       */
      public float getHours() {
        return hours_;
      }
      /**
       * <code>optional float hours = 20;</code>
       */
      public Builder setHours(float value) {
        bitField0_ |= 0x00080000;
        hours_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float hours = 20;</code>
       */
      public Builder clearHours() {
        bitField0_ = (bitField0_ & ~0x00080000);
        hours_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:edmtools.EngineDataRecord)
    }

    static {
      defaultInstance = new EngineDataRecord(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:edmtools.EngineDataRecord)
  }

  public interface JpiFileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:edmtools.JpiFile)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .edmtools.Metadata metadata = 1;</code>
     */
    boolean hasMetadata();
    /**
     * <code>optional .edmtools.Metadata metadata = 1;</code>
     */
    edmtools.Proto.Metadata getMetadata();
    /**
     * <code>optional .edmtools.Metadata metadata = 1;</code>
     */
    edmtools.Proto.MetadataOrBuilder getMetadataOrBuilder();

    /**
     * <code>repeated .edmtools.Flight flight = 2;</code>
     */
    java.util.List<edmtools.Proto.Flight> 
        getFlightList();
    /**
     * <code>repeated .edmtools.Flight flight = 2;</code>
     */
    edmtools.Proto.Flight getFlight(int index);
    /**
     * <code>repeated .edmtools.Flight flight = 2;</code>
     */
    int getFlightCount();
    /**
     * <code>repeated .edmtools.Flight flight = 2;</code>
     */
    java.util.List<? extends edmtools.Proto.FlightOrBuilder> 
        getFlightOrBuilderList();
    /**
     * <code>repeated .edmtools.Flight flight = 2;</code>
     */
    edmtools.Proto.FlightOrBuilder getFlightOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code edmtools.JpiFile}
   *
   * <pre>
   * Container message when converting a JPI file to proto format.
   * </pre>
   */
  public static final class JpiFile extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:edmtools.JpiFile)
      JpiFileOrBuilder {
    // Use JpiFile.newBuilder() to construct.
    private JpiFile(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JpiFile(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JpiFile defaultInstance;
    public static JpiFile getDefaultInstance() {
      return defaultInstance;
    }

    public JpiFile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JpiFile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              edmtools.Proto.Metadata.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = metadata_.toBuilder();
              }
              metadata_ = input.readMessage(edmtools.Proto.Metadata.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(metadata_);
                metadata_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                flight_ = new java.util.ArrayList<edmtools.Proto.Flight>();
                mutable_bitField0_ |= 0x00000002;
              }
              flight_.add(input.readMessage(edmtools.Proto.Flight.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          flight_ = java.util.Collections.unmodifiableList(flight_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edmtools.Proto.internal_static_edmtools_JpiFile_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edmtools.Proto.internal_static_edmtools_JpiFile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edmtools.Proto.JpiFile.class, edmtools.Proto.JpiFile.Builder.class);
    }

    public static com.google.protobuf.Parser<JpiFile> PARSER =
        new com.google.protobuf.AbstractParser<JpiFile>() {
      public JpiFile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JpiFile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JpiFile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int METADATA_FIELD_NUMBER = 1;
    private edmtools.Proto.Metadata metadata_;
    /**
     * <code>optional .edmtools.Metadata metadata = 1;</code>
     */
    public boolean hasMetadata() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .edmtools.Metadata metadata = 1;</code>
     */
    public edmtools.Proto.Metadata getMetadata() {
      return metadata_;
    }
    /**
     * <code>optional .edmtools.Metadata metadata = 1;</code>
     */
    public edmtools.Proto.MetadataOrBuilder getMetadataOrBuilder() {
      return metadata_;
    }

    public static final int FLIGHT_FIELD_NUMBER = 2;
    private java.util.List<edmtools.Proto.Flight> flight_;
    /**
     * <code>repeated .edmtools.Flight flight = 2;</code>
     */
    public java.util.List<edmtools.Proto.Flight> getFlightList() {
      return flight_;
    }
    /**
     * <code>repeated .edmtools.Flight flight = 2;</code>
     */
    public java.util.List<? extends edmtools.Proto.FlightOrBuilder> 
        getFlightOrBuilderList() {
      return flight_;
    }
    /**
     * <code>repeated .edmtools.Flight flight = 2;</code>
     */
    public int getFlightCount() {
      return flight_.size();
    }
    /**
     * <code>repeated .edmtools.Flight flight = 2;</code>
     */
    public edmtools.Proto.Flight getFlight(int index) {
      return flight_.get(index);
    }
    /**
     * <code>repeated .edmtools.Flight flight = 2;</code>
     */
    public edmtools.Proto.FlightOrBuilder getFlightOrBuilder(
        int index) {
      return flight_.get(index);
    }

    private void initFields() {
      metadata_ = edmtools.Proto.Metadata.getDefaultInstance();
      flight_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, metadata_);
      }
      for (int i = 0; i < flight_.size(); i++) {
        output.writeMessage(2, flight_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, metadata_);
      }
      for (int i = 0; i < flight_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, flight_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edmtools.Proto.JpiFile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.JpiFile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.JpiFile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edmtools.Proto.JpiFile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edmtools.Proto.JpiFile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.JpiFile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.JpiFile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edmtools.Proto.JpiFile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edmtools.Proto.JpiFile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edmtools.Proto.JpiFile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edmtools.Proto.JpiFile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code edmtools.JpiFile}
     *
     * <pre>
     * Container message when converting a JPI file to proto format.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:edmtools.JpiFile)
        edmtools.Proto.JpiFileOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edmtools.Proto.internal_static_edmtools_JpiFile_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edmtools.Proto.internal_static_edmtools_JpiFile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edmtools.Proto.JpiFile.class, edmtools.Proto.JpiFile.Builder.class);
      }

      // Construct using edmtools.Proto.JpiFile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMetadataFieldBuilder();
          getFlightFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (metadataBuilder_ == null) {
          metadata_ = edmtools.Proto.Metadata.getDefaultInstance();
        } else {
          metadataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (flightBuilder_ == null) {
          flight_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          flightBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edmtools.Proto.internal_static_edmtools_JpiFile_descriptor;
      }

      public edmtools.Proto.JpiFile getDefaultInstanceForType() {
        return edmtools.Proto.JpiFile.getDefaultInstance();
      }

      public edmtools.Proto.JpiFile build() {
        edmtools.Proto.JpiFile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edmtools.Proto.JpiFile buildPartial() {
        edmtools.Proto.JpiFile result = new edmtools.Proto.JpiFile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (metadataBuilder_ == null) {
          result.metadata_ = metadata_;
        } else {
          result.metadata_ = metadataBuilder_.build();
        }
        if (flightBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            flight_ = java.util.Collections.unmodifiableList(flight_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.flight_ = flight_;
        } else {
          result.flight_ = flightBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edmtools.Proto.JpiFile) {
          return mergeFrom((edmtools.Proto.JpiFile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edmtools.Proto.JpiFile other) {
        if (other == edmtools.Proto.JpiFile.getDefaultInstance()) return this;
        if (other.hasMetadata()) {
          mergeMetadata(other.getMetadata());
        }
        if (flightBuilder_ == null) {
          if (!other.flight_.isEmpty()) {
            if (flight_.isEmpty()) {
              flight_ = other.flight_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureFlightIsMutable();
              flight_.addAll(other.flight_);
            }
            onChanged();
          }
        } else {
          if (!other.flight_.isEmpty()) {
            if (flightBuilder_.isEmpty()) {
              flightBuilder_.dispose();
              flightBuilder_ = null;
              flight_ = other.flight_;
              bitField0_ = (bitField0_ & ~0x00000002);
              flightBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFlightFieldBuilder() : null;
            } else {
              flightBuilder_.addAllMessages(other.flight_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edmtools.Proto.JpiFile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edmtools.Proto.JpiFile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private edmtools.Proto.Metadata metadata_ = edmtools.Proto.Metadata.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.Metadata, edmtools.Proto.Metadata.Builder, edmtools.Proto.MetadataOrBuilder> metadataBuilder_;
      /**
       * <code>optional .edmtools.Metadata metadata = 1;</code>
       */
      public boolean hasMetadata() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .edmtools.Metadata metadata = 1;</code>
       */
      public edmtools.Proto.Metadata getMetadata() {
        if (metadataBuilder_ == null) {
          return metadata_;
        } else {
          return metadataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .edmtools.Metadata metadata = 1;</code>
       */
      public Builder setMetadata(edmtools.Proto.Metadata value) {
        if (metadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          metadata_ = value;
          onChanged();
        } else {
          metadataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .edmtools.Metadata metadata = 1;</code>
       */
      public Builder setMetadata(
          edmtools.Proto.Metadata.Builder builderForValue) {
        if (metadataBuilder_ == null) {
          metadata_ = builderForValue.build();
          onChanged();
        } else {
          metadataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .edmtools.Metadata metadata = 1;</code>
       */
      public Builder mergeMetadata(edmtools.Proto.Metadata value) {
        if (metadataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              metadata_ != edmtools.Proto.Metadata.getDefaultInstance()) {
            metadata_ =
              edmtools.Proto.Metadata.newBuilder(metadata_).mergeFrom(value).buildPartial();
          } else {
            metadata_ = value;
          }
          onChanged();
        } else {
          metadataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .edmtools.Metadata metadata = 1;</code>
       */
      public Builder clearMetadata() {
        if (metadataBuilder_ == null) {
          metadata_ = edmtools.Proto.Metadata.getDefaultInstance();
          onChanged();
        } else {
          metadataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .edmtools.Metadata metadata = 1;</code>
       */
      public edmtools.Proto.Metadata.Builder getMetadataBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMetadataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .edmtools.Metadata metadata = 1;</code>
       */
      public edmtools.Proto.MetadataOrBuilder getMetadataOrBuilder() {
        if (metadataBuilder_ != null) {
          return metadataBuilder_.getMessageOrBuilder();
        } else {
          return metadata_;
        }
      }
      /**
       * <code>optional .edmtools.Metadata metadata = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edmtools.Proto.Metadata, edmtools.Proto.Metadata.Builder, edmtools.Proto.MetadataOrBuilder> 
          getMetadataFieldBuilder() {
        if (metadataBuilder_ == null) {
          metadataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edmtools.Proto.Metadata, edmtools.Proto.Metadata.Builder, edmtools.Proto.MetadataOrBuilder>(
                  getMetadata(),
                  getParentForChildren(),
                  isClean());
          metadata_ = null;
        }
        return metadataBuilder_;
      }

      private java.util.List<edmtools.Proto.Flight> flight_ =
        java.util.Collections.emptyList();
      private void ensureFlightIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          flight_ = new java.util.ArrayList<edmtools.Proto.Flight>(flight_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edmtools.Proto.Flight, edmtools.Proto.Flight.Builder, edmtools.Proto.FlightOrBuilder> flightBuilder_;

      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public java.util.List<edmtools.Proto.Flight> getFlightList() {
        if (flightBuilder_ == null) {
          return java.util.Collections.unmodifiableList(flight_);
        } else {
          return flightBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public int getFlightCount() {
        if (flightBuilder_ == null) {
          return flight_.size();
        } else {
          return flightBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public edmtools.Proto.Flight getFlight(int index) {
        if (flightBuilder_ == null) {
          return flight_.get(index);
        } else {
          return flightBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public Builder setFlight(
          int index, edmtools.Proto.Flight value) {
        if (flightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFlightIsMutable();
          flight_.set(index, value);
          onChanged();
        } else {
          flightBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public Builder setFlight(
          int index, edmtools.Proto.Flight.Builder builderForValue) {
        if (flightBuilder_ == null) {
          ensureFlightIsMutable();
          flight_.set(index, builderForValue.build());
          onChanged();
        } else {
          flightBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public Builder addFlight(edmtools.Proto.Flight value) {
        if (flightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFlightIsMutable();
          flight_.add(value);
          onChanged();
        } else {
          flightBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public Builder addFlight(
          int index, edmtools.Proto.Flight value) {
        if (flightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFlightIsMutable();
          flight_.add(index, value);
          onChanged();
        } else {
          flightBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public Builder addFlight(
          edmtools.Proto.Flight.Builder builderForValue) {
        if (flightBuilder_ == null) {
          ensureFlightIsMutable();
          flight_.add(builderForValue.build());
          onChanged();
        } else {
          flightBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public Builder addFlight(
          int index, edmtools.Proto.Flight.Builder builderForValue) {
        if (flightBuilder_ == null) {
          ensureFlightIsMutable();
          flight_.add(index, builderForValue.build());
          onChanged();
        } else {
          flightBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public Builder addAllFlight(
          java.lang.Iterable<? extends edmtools.Proto.Flight> values) {
        if (flightBuilder_ == null) {
          ensureFlightIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, flight_);
          onChanged();
        } else {
          flightBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public Builder clearFlight() {
        if (flightBuilder_ == null) {
          flight_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          flightBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public Builder removeFlight(int index) {
        if (flightBuilder_ == null) {
          ensureFlightIsMutable();
          flight_.remove(index);
          onChanged();
        } else {
          flightBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public edmtools.Proto.Flight.Builder getFlightBuilder(
          int index) {
        return getFlightFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public edmtools.Proto.FlightOrBuilder getFlightOrBuilder(
          int index) {
        if (flightBuilder_ == null) {
          return flight_.get(index);  } else {
          return flightBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public java.util.List<? extends edmtools.Proto.FlightOrBuilder> 
           getFlightOrBuilderList() {
        if (flightBuilder_ != null) {
          return flightBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(flight_);
        }
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public edmtools.Proto.Flight.Builder addFlightBuilder() {
        return getFlightFieldBuilder().addBuilder(
            edmtools.Proto.Flight.getDefaultInstance());
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public edmtools.Proto.Flight.Builder addFlightBuilder(
          int index) {
        return getFlightFieldBuilder().addBuilder(
            index, edmtools.Proto.Flight.getDefaultInstance());
      }
      /**
       * <code>repeated .edmtools.Flight flight = 2;</code>
       */
      public java.util.List<edmtools.Proto.Flight.Builder> 
           getFlightBuilderList() {
        return getFlightFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edmtools.Proto.Flight, edmtools.Proto.Flight.Builder, edmtools.Proto.FlightOrBuilder> 
          getFlightFieldBuilder() {
        if (flightBuilder_ == null) {
          flightBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edmtools.Proto.Flight, edmtools.Proto.Flight.Builder, edmtools.Proto.FlightOrBuilder>(
                  flight_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          flight_ = null;
        }
        return flightBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:edmtools.JpiFile)
    }

    static {
      defaultInstance = new JpiFile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:edmtools.JpiFile)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edmtools_Metadata_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_edmtools_Metadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edmtools_AlarmThresholds_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_edmtools_AlarmThresholds_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edmtools_Fuel_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_edmtools_Fuel_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edmtools_Features_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_edmtools_Features_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edmtools_Sensors_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_edmtools_Sensors_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edmtools_FlightMetadata_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_edmtools_FlightMetadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edmtools_Flight_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_edmtools_Flight_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edmtools_DataRecord_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_edmtools_DataRecord_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edmtools_EngineDataRecord_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_edmtools_EngineDataRecord_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_edmtools_JpiFile_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_edmtools_JpiFile_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023src/proto/edm.proto\022\010edmtools\"\251\002\n\010Meta" +
      "data\022\024\n\014registration\030\001 \001(\t\0223\n\020alarm_thre" +
      "sholds\030\002 \001(\0132\031.edmtools.AlarmThresholds\022" +
      "\034\n\004fuel\030\003 \001(\0132\016.edmtools.Fuel\022\032\n\022downloa" +
      "d_timestamp\030\004 \001(\003\022\030\n\020protocol_version\030\005 " +
      "\001(\005\022$\n\010features\030\006 \001(\0132\022.edmtools.Feature" +
      "s\0221\n\017flight_metadata\030\007 \003(\0132\030.edmtools.Fl" +
      "ightMetadata\022\016\n\006length\030\010 \001(\005\022\025\n\rparse_wa" +
      "rning\030\t \003(\t\"\241\002\n\017AlarmThresholds\022\021\n\tmin_v" +
      "olts\030\001 \001(\001\022\021\n\tmax_volts\030\002 \001(\001\022.\n&max_exh",
      "aust_gas_temperature_difference\030\003 \001(\005\022%\n" +
      "\035max_cylinder_head_temperature\030\004 \001(\005\0222\n*" +
      "max_cylinder_head_temperature_cooling_ra" +
      "te\030\005 \001(\005\022#\n\033max_exhaust_gas_temperature\030" +
      "\006 \001(\005\022\033\n\023min_oil_temperature\030\007 \001(\005\022\033\n\023ma" +
      "x_oil_temperature\030\010 \001(\005\"\311\001\n\004Fuel\0225\n\017fuel" +
      "_flow_units\030\001 \001(\0162\034.edmtools.Fuel.FuelFl" +
      "owUnits\022\025\n\rfull_quantity\030\002 \001(\005\022\030\n\020warnin" +
      "g_quantity\030\003 \001(\005\022\021\n\tk_factor1\030\004 \001(\005\022\021\n\tk" +
      "_factor2\030\005 \001(\005\"3\n\rFuelFlowUnits\022\007\n\003GPH\020\001",
      "\022\007\n\003PPH\020\002\022\007\n\003LPH\020\003\022\007\n\003KPH\020\004\"\376\001\n\010Features" +
      "\022\024\n\014model_number\030\001 \001(\005\022\030\n\020firmware_versi" +
      "on\030\002 \001(\005\022\"\n\007sensors\030\003 \001(\0132\021.edmtools.Sen" +
      "sors\022C\n\027engine_temperature_unit\030\004 \001(\0162\"." +
      "edmtools.Features.TemperatureUnit\022\023\n\013bet" +
      "a_number\030\005 \001(\005\022\024\n\014build_number\030\006 \001(\005\".\n\017" +
      "TemperatureUnit\022\016\n\nFAHRENHEIT\020\001\022\013\n\007CELSI" +
      "US\020\002\"\360\002\n\007Sensors\022#\n\033num_exhaust_gas_temp" +
      "erature\030\003 \001(\005\022%\n\035num_cylinder_head_tempe" +
      "rature\030\004 \001(\005\022\017\n\007voltage\030\005 \001(\010\022\027\n\017oil_tem",
      "perature\030\006 \001(\010\022\"\n\032turbine_inlet_temperat" +
      "ure1\030\007 \001(\010\022\"\n\032turbine_inlet_temperature2" +
      "\030\010 \001(\010\022\037\n\027outside_air_temperature\030\t \001(\010\022" +
      "\021\n\tfuel_flow\030\n \001(\010\022!\n\031induction_air_temp" +
      "erature\030\013 \001(\010\022(\n compressor_discharge_te" +
      "mperature\030\014 \001(\010\022\031\n\021manifold_pressure\030\r \001" +
      "(\010\022\013\n\003rpm\030\016 \001(\010\"I\n\016FlightMetadata\022\025\n\rfli" +
      "ght_number\030\001 \001(\005\022 \n\030flight_data_length_w" +
      "ords\030\002 \001(\005\"\344\001\n\006Flight\022\025\n\rflight_number\030\001" +
      " \001(\005\022\027\n\017start_timestamp\030\002 \001(\003\022\037\n\027recordi",
      "ng_interval_secs\030\003 \001(\005\022\"\n\007sensors\030\004 \001(\0132" +
      "\021.edmtools.Sensors\022\"\n\004data\030\005 \003(\0132\024.edmto" +
      "ols.DataRecord\022\025\n\rheader_length\030\006 \001(\005\022\023\n" +
      "\013data_length\030\007 \001(\005\022\025\n\rparse_warning\030\010 \003(" +
      "\t\"\234\002\n\nDataRecord\022\017\n\007voltage\030\001 \003(\002\022\020\n\010amp" +
      "erage\030\002 \003(\005\022\037\n\027outside_air_temperature\030\003" +
      " \001(\005\022\'\n\004mark\030\004 \001(\0162\031.edmtools.DataRecord" +
      ".Mark\022*\n\006engine\030\005 \003(\0132\032.edmtools.EngineD" +
      "ataRecord\022\025\n\rparse_warning\030\006 \003(\t\"^\n\004Mark" +
      "\022\016\n\nNOT_MARKED\020\000\022\n\n\006MARKED\020\001\022\016\n\nRICH_STA",
      "RT\020\002\022\014\n\010RICH_END\020\003\022\016\n\nLEAN_START\020\004\022\014\n\010LE" +
      "AN_END\020\005\"\305\004\n\020EngineDataRecord\022\037\n\027exhaust" +
      "_gas_temperature\030\001 \003(\005\022.\n&max_exhaust_ga" +
      "s_temperature_difference\030\002 \001(\005\022!\n\031turbin" +
      "e_inlet_temperature\030\003 \003(\005\022!\n\031cylinder_he" +
      "ad_temperature\030\004 \003(\005\022.\n&cylinder_head_te" +
      "mperature_cooling_rate\030\005 \001(\005\022\027\n\017oil_temp" +
      "erature\030\006 \001(\005\022(\n compressor_discharge_te" +
      "mperature\030\007 \001(\005\022!\n\031induction_air_tempera" +
      "ture\030\010 \001(\005\022&\n\036interstage_turbine_tempera",
      "ture\030\t \001(\005\022\021\n\tfuel_used\030\n \003(\002\022\021\n\tfuel_fl" +
      "ow\030\013 \003(\002\022\025\n\rfuel_pressure\030\014 \001(\002\022\022\n\nfuel_" +
      "level\030\r \003(\002\022\024\n\014oil_pressure\030\016 \001(\005\022\031\n\021man" +
      "ifold_pressure\030\017 \001(\002\022\032\n\022hydraulic_pressu" +
      "re\030\020 \003(\005\022\022\n\nhorsepower\030\021 \001(\005\022\013\n\003rpm\030\022 \001(" +
      "\005\022\016\n\006torque\030\023 \001(\005\022\r\n\005hours\030\024 \001(\002\"Q\n\007JpiF" +
      "ile\022$\n\010metadata\030\001 \001(\0132\022.edmtools.Metadat" +
      "a\022 \n\006flight\030\002 \003(\0132\020.edmtools.FlightB\021\n\010e" +
      "dmtoolsB\005Proto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_edmtools_Metadata_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_edmtools_Metadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_edmtools_Metadata_descriptor,
        new java.lang.String[] { "Registration", "AlarmThresholds", "Fuel", "DownloadTimestamp", "ProtocolVersion", "Features", "FlightMetadata", "Length", "ParseWarning", });
    internal_static_edmtools_AlarmThresholds_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_edmtools_AlarmThresholds_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_edmtools_AlarmThresholds_descriptor,
        new java.lang.String[] { "MinVolts", "MaxVolts", "MaxExhaustGasTemperatureDifference", "MaxCylinderHeadTemperature", "MaxCylinderHeadTemperatureCoolingRate", "MaxExhaustGasTemperature", "MinOilTemperature", "MaxOilTemperature", });
    internal_static_edmtools_Fuel_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_edmtools_Fuel_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_edmtools_Fuel_descriptor,
        new java.lang.String[] { "FuelFlowUnits", "FullQuantity", "WarningQuantity", "KFactor1", "KFactor2", });
    internal_static_edmtools_Features_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_edmtools_Features_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_edmtools_Features_descriptor,
        new java.lang.String[] { "ModelNumber", "FirmwareVersion", "Sensors", "EngineTemperatureUnit", "BetaNumber", "BuildNumber", });
    internal_static_edmtools_Sensors_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_edmtools_Sensors_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_edmtools_Sensors_descriptor,
        new java.lang.String[] { "NumExhaustGasTemperature", "NumCylinderHeadTemperature", "Voltage", "OilTemperature", "TurbineInletTemperature1", "TurbineInletTemperature2", "OutsideAirTemperature", "FuelFlow", "InductionAirTemperature", "CompressorDischargeTemperature", "ManifoldPressure", "Rpm", });
    internal_static_edmtools_FlightMetadata_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_edmtools_FlightMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_edmtools_FlightMetadata_descriptor,
        new java.lang.String[] { "FlightNumber", "FlightDataLengthWords", });
    internal_static_edmtools_Flight_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_edmtools_Flight_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_edmtools_Flight_descriptor,
        new java.lang.String[] { "FlightNumber", "StartTimestamp", "RecordingIntervalSecs", "Sensors", "Data", "HeaderLength", "DataLength", "ParseWarning", });
    internal_static_edmtools_DataRecord_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_edmtools_DataRecord_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_edmtools_DataRecord_descriptor,
        new java.lang.String[] { "Voltage", "Amperage", "OutsideAirTemperature", "Mark", "Engine", "ParseWarning", });
    internal_static_edmtools_EngineDataRecord_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_edmtools_EngineDataRecord_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_edmtools_EngineDataRecord_descriptor,
        new java.lang.String[] { "ExhaustGasTemperature", "MaxExhaustGasTemperatureDifference", "TurbineInletTemperature", "CylinderHeadTemperature", "CylinderHeadTemperatureCoolingRate", "OilTemperature", "CompressorDischargeTemperature", "InductionAirTemperature", "InterstageTurbineTemperature", "FuelUsed", "FuelFlow", "FuelPressure", "FuelLevel", "OilPressure", "ManifoldPressure", "HydraulicPressure", "Horsepower", "Rpm", "Torque", "Hours", });
    internal_static_edmtools_JpiFile_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_edmtools_JpiFile_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_edmtools_JpiFile_descriptor,
        new java.lang.String[] { "Metadata", "Flight", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
